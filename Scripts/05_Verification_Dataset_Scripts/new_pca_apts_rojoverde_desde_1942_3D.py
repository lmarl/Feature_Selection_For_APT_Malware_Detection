import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.externals import joblib
from sklearn import decomposition
import sys

##########
#FICHEROS#
##########
input_file= "../datasets/newDatasetFinal5.csv"

data_dir="../tmp"
data_filename = data_dir + '/pca_nuevo_desdecero_3D_sindate.npy'
tmp_file="../tmp/dataset_limpiado_imputado_standarizado.joblib.pkl"
output_file='resultados/DoubleFigPCAByAPTandMalware_desdecero_3D_sindate4_all1942.png'

def draw_vector(v0, v1, ax=None):
    ax = ax or plt.gca()
    arrowprops=dict(arrowstyle='->', linewidth=2, shrinkA=0, shrinkB=0)
    ax.annotate('', v1, v0, arrowprops=arrowprops)


##########
#ARGUMENTS#
##########
def syntax_error():
        print "SYNTAX ERROR: Introduce un argumentos con los siguientes valores"
        print " 1 Recalcular PCA"
        print " 2 Obtener calculo de la ultima operacion grabada"
	print
	print "Current input/output values are:"
	print "		Input File:"+input_file
	print "		TMP File:"+tmp_file
	print "		PCA File:"+data_filename
	print "		Output File:"+output_file
	print
	print


argumentos=sys.argv
if len(argumentos)!=2:
        syntax_error()
        sys.exit()
else:
        if (argumentos[1]!='1' and argumentos[1]!='2'):
                syntax_error()
                sys.exit()

##################################
# PREPARATIVOS
##################################

###Leemos el dataset

df = pd.read_csv(input_file, header = 0)


###Separamos los campos que no nos interesan y campos objetivo
#malwaretypes=df.MALWARE_TYPE
isapt=df.isAPT
#numapt=df.NUM_APT

###Quitamos las cabeceras de los campos objetivo
#values=malwaretypes.values.astype(np.int64)
values2=isapt.values.astype(np.int64)
#values3=numapt.values.astype(np.int64)

def convert_malware_type_to_new_fields(row,valor):
   if int(row['MALWARE_TYPE']) == int(valor) :
      return 1;
   else:
      return 0;

print df.shape

del df['isAPT']
del df['MD5']

#df1=df[['ALL_FILES_C:','ALL_FILES_C:/Documents_and_Settings/<USER>/Application_Data/Microsoft','ALL_FILES_C:/Program_Files/Common_Files/System/Ole_DB','ALL_FILES_C:/Program_Files/Windows_NT/Accessories','ANTIDEBUG_CheckRemoteDebuggerPresent','ANTIDEBUG_FindWindowExA','ANTIDEBUG_FindWindowExW','ANTIDEBUG_GetWindowThreadProcessId','ANTIDEBUG_%IsDebuggerPresent','ANTIDEBUG_OutputDebugStringA','ANTIDEBUG_Process32NextW','DELETED_FILES_C:','DELETED_FILES_C:/DOCUME~1/<USER>~1/LOCALS~1/Temp','DELETED_FILES_C:/Documents_and_Settings/All_Users/Application_Data','DELETED_FILES_C:/Documents_and_Settings/All_Users/Start_Menu/Programs','DELETED_FILES_C:/Documents_and_Settings/<USER>/Desktop','DELETED_FILES_c:/windows/temp','DNS_CH','DNS_CZ','DNS_IL','DNS_NL','DNS_SY','IMPORTS_BIN_bind','IMPORTS_BIN_CallNextHookEx','IMPORTS_BIN_CharNextA','IMPORTS_BIN_CloseHandle','IMPORTS_BIN_CopyFile','IMPORTS_BIN_CreateDirectoryA','IMPORTS_BIN_CreateMutex','IMPORTS_BIN_CreateSymbolicLink','IMPORTS_BIN_DeleteCriticalSection','IMPORTS_BIN_DispatchMessageA','IMPORTS_BIN_EnterCriticalSection','IMPORTS_BIN_FindNextFile','IMPORTS_BIN_FindWindow','IMPORTS_BIN_FreeLibrary','IMPORTS_BIN_GetClientRect','IMPORTS_BIN_GetCurrentThreadId','IMPORTS_BIN_GetDC','IMPORTS_BIN_GetDeviceCaps','IMPORTS_BIN_GetDlgItem','IMPORTS_BIN_GetFileInformation','IMPORTS_BIN_GetFileTime','IMPORTS_BIN_GetFileType','IMPORTS_BIN_GetLastError','IMPORTS_BIN_GetLongPathName','IMPORTS_BIN_GetSystemDirectoryA','IMPORTS_BIN_GetTempPathA','IMPORTS_BIN_GetVersion','IMPORTS_BIN_GetWindowLongA','IMPORTS_BIN_GetWindowsDirectory','IMPORTS_BIN_GlobalAlloc','IMPORTS_BIN_GlobalFree','IMPORTS_BIN_GlobalUnlock','IMPORTS_BIN_HeapFree','IMPORTS_BIN_inet_addr','IMPORTS_BIN_InitializeCriticalSection','IMPORTS_BIN_IsDebuggerPresent','IMPORTS_BIN_LeaveCriticalSection','IMPORTS_BIN_LoadLibrary','IMPORTS_BIN_lstrcpynA','IMPORTS_BIN_MapViewOfFile','IMPORTS_BIN_OpenFile','IMPORTS_BIN_RegOpenKey','IMPORTS_BIN_RegQueryValueExA','IMPORTS_BIN_RegSetValueExA','IMPORTS_BIN_SelectObject','IMPORTS_BIN_SetFilePointer','IMPORTS_BIN_SetWindowLongA','IMPORTS_BIN_ShowWindow','IMPORTS_BIN_TlsGetValue','IMPORTS_BIN_wsprintfA','OPENED_FILES_C:','OPENED_FILES_C:/Documents_and_Settings/<USER>','OPENED_FILES_C:/Documents_and_Settings/<USER>/Start_Menu/Programs/Startup','OPENED_FILES_C:/WINDOWS/Registration','OPENED_FILES_C:/WINDOWS/system','OPENED_FILES_C:/WINDOWS/system32','OPENED_FILES_c:/windows/temp','OPENED_FILES_//./Global','PACKER_Armadillo','PACKER_NullSoft','PACKER_UPX','READ_FILES_C:','READ_FILES_C:/Documents_and_Settings/<USER>/Application_Data/Microsoft/Internet_Explorer/Quick_Launch','SERVICES_AudioSrv','SERVICES_Ias','SERVICES_NetDDEdsdm','SERVICES_Ntmssvc','SERVICES_RASMAN','SERVICES_Win32','SERVICES_WmiApSrv','SUSP_API_CopyFileA','SUSP_API_CopyFileW','SUSP_API_CreateFileA','SUSP_API_CreateProcessAsUserA','SUSP_API_CreateProcessW','SUSP_API_CreateProcessWithLogonW','SUSP_API_CreateServiceW','SUSP_API_CreateThread','SUSP_API_CryptEncrypt','SUSP_API_DeleteFileA','SUSP_API_DisconnectNamedPipe','SUSP_API_FindFirstFileA','SUSP_API_FindFirstFileExW','SUSP_API_GetCommandLineW','SUSP_API_GetModuleFileNameA','SUSP_API_GetProcAddress','SUSP_API_GetStartupInfoA','SUSP_API_GetStartupInfoW','SUSP_API_GetTempPathW','SUSP_API_GetVersionExA','SUSP_API_HttpSendRequestExA','SUSP_API_HttpSendRequestExW','SUSP_API_InternetConnectA','SUSP_API_InternetOpenA','SUSP_API_InternetOpenUrlA','SUSP_API_InternetQueryOptionA','SUSP_API_LoadLibraryA','SUSP_API_LoadLibraryExA','SUSP_API_LoadLibraryW','SUSP_API_LockResource','SUSP_API_OpenFileMappingW','SUSP_API_OpenProcess','SUSP_API_RegCreateKeyExA','SUSP_API_RegCreateKeyW','SUSP_API_RegDeleteValueA','SUSP_API_RegEnumKeyA','SUSP_API_RegEnumKeyExA','SUSP_API_RegOpenKeyExA','SUSP_API_ShellExecuteExA','SUSP_API_SleepEx','SUSP_API_StartServiceA','SUSP_API_StartServiceCtrlDispatcherW','SUSP_API_StartServiceW','SUSP_API_VirtualFree','SUSP_API_WriteFile','SUSP_API_WriteProcessMemory','SUSP_DLLS_ADVAPI32.dll','SUSP_DLLS_comdlg32.dll','SUSP_DLLS_crypt32.dll','SUSP_DLLS_GDI32.DLL','SUSP_DLLS_HAL.dll','SUSP_DLLS_KERNEL32.dll','SUSP_DLLS_MFC42.DLL','SUSP_DLLS_MSVFW32.dll','SUSP_DLLS_ntoskrnl.exe','SUSP_DLLS_OLE32.DLL','SUSP_DLLS_OPENGL32.DLL','SUSP_DLLS_SECUR32.dll','SUSP_DLLS_wininet.dll','SUSP_DLLS_WSOCK32.DLL','TCP_AE','TCP_CH','TCP_CN','TCP_DE','TCP_KR','TCP_MD','TCP_NL','TCP_US','UDP_CL','UDP_GB','UDP_MD','UDP_MT','UDP_US','ALL_FILES_C:/WINDOWS/system32','ANTIDEBUG_TerminateProcess','ANTIDEBUG_UnhandledExceptionFilter','DNS_US','HAS_OVERLAYS','IMPORTS_BIN_CreateFile','IMPORTS_BIN_CreateProcessA','IMPORTS_BIN_DeleteFile','IMPORTS_BIN_DeleteObject','IMPORTS_BIN_ExitProcess','IMPORTS_BIN_FileSize','IMPORTS_BIN_FindFirstFile','IMPORTS_BIN_GetACP','IMPORTS_BIN_GetCPInfo','IMPORTS_BIN_GetCurrentProcess','IMPORTS_BIN_GetFileAttributes','IMPORTS_BIN_GetFileAttributesA','IMPORTS_BIN_GetFullPathName','IMPORTS_BIN_GetShortPathName','IMPORTS_BIN_GetStdHandle','IMPORTS_BIN_GetTempFileName','IMPORTS_BIN_GlobalLock','IMPORTS_BIN_HeapAlloc','IMPORTS_BIN_lstrlenA','IMPORTS_BIN_MoveFile','IMPORTS_BIN_MultiByteToWideChar','IMPORTS_BIN_ReadFile','IMPORTS_BIN_RegCloseKey','IMPORTS_BIN_RtlUnwind','IMPORTS_BIN_SetErrorMode','IMPORTS_BIN_SetFileAttributes','IMPORTS_BIN_SetFileTime','IMPORTS_BIN_WaitForSingleObject','IMPORTS_BIN_WideCharToMultiByte','NUM_IMPORTS','NUM_LANG','NUM_PACKERS','OPENED_FILES_//.','OPENED_FILES_C:/DOCUME~1/<USER>~1/LOCALS~1/Temp','OPENED_FILES_C:/WINDOWS','OPENED_FILES_//./PIPE','READ_FILES_C:/WINDOWS/Registration','READ_FILES_C:/WINDOWS/system32','RESOURCE_NUM','SUSP_API_CreateFileW','SUSP_API_FindNextFileA','SUSP_API_FindResourceA','SUSP_API_GetCommandLineA','SUSP_API_GetFileSize','SUSP_API_GetModuleHandleA','SUSP_API_GetTempFileNameA','SUSP_API_GetTickCount','SUSP_API_RegDeleteKeyA','SUSP_API_ShellExecuteA','SUSP_API_Sleep','SUSP_API_VirtualAlloc','SUSP_API_VirtualProtect','SUSP_DLLS_COMCTL32.DLL','SUSP_DLLS_Msvcrt.dll','SUSP_DLLS_OLEAUT32.DLL','SUSP_DLLS_Shell32.dll','SUSP_DLLS_SHLWAPI.dll','SUSP_DLLS_USER32.dll','SUSP_DLLS_version.dll','isTypeUnknown','isOtherType','isTrojan','isBackdoor','isRootkit','isSpyware']]

#df=df1

print df.shape
###AQUI HAY 1942#####

import datetime
def convert_to_year(date_in_some_format):
        datetime_object = datetime.datetime.strptime(date_in_some_format, '%d/%m/%Y %H:%M')
        totalmins=(datetime_object-datetime.datetime(1970,1,1)).total_seconds()/60
        return int(totalmins)


##################################
# IMPUTAMOS VALORES VACIOS
##################################
#X=joblib.load("../tmp/dataset_mas_completo_sin_imphash_sin_ssdeeP.joblib.pkl",  mmap_mode='r')

from sklearn.impute import SimpleImputer
imp = SimpleImputer(strategy="most_frequent")
X=imp.fit_transform(df)

##################################
# Standarization
##################################
from sklearn import preprocessing
#df = preprocessing.scale(df)
X = preprocessing.scale(X)

joblib.dump(X, tmp_file)

##################################
# PCA
##################################
perpl=30
#tsne_nuevo_con15_3d.npy

if argumentos[1]=='1':
	###CALCULAMOS EL PCA
	pca = decomposition.PCA(n_components=3)
	Y = pca.fit_transform(X)

	print ("LA VARIANZA PERDIDA ES:")
	print pca.explained_variance_ 

	print ("EL RATIO ES:")
	print pca.explained_variance_ratio_

	#tsne = manifold.TSNE(n_components=3, perplexity=perpl)
	#Y = tsne.fit_transform(X)
	np.save(data_filename, Y)

if argumentos[1]=='2':
	###O LO ABRIMOS
	Y = np.load(data_filename)


##################################
# PLOTTING
##################################
###Creamos una figura con dos partes
#fig = plt.figure(figsize=(15, 15))
#ax = fig.add_subplot(1, 2, 2)

###Creamos una figura con dos partes
fig = plt.figure(figsize=(15,15))
#ax = fig.add_subplot(1, 1, 1)
ax = fig.add_subplot(111, projection='3d')


########################
#LO MOSTRAMOS POR TIPO
#colors=['gray', 'navy', 'turquoise', 'darkorange', 'red', 'green', 'blue']
#target_names=['Unknown', 'Other', 'Trojan','Worm','Backdoor','Rootkit','Spyware']
#target=[-1, 0, 1,4,2,3,5]
#

########################
#LO MOSTRAMOS POR MALWARE/APT
colors=['red', 'green']
target_names=['Malware','APT']
target=[0, 1]
lista=[0,1]

for color, i, target_name, pos in zip(colors, target, target_names, lista):
                indices=[]
                paraimprimir=[]


                for index in range(0,Y.size/3):
                        if values2[index]==i:
                                indices=np.append(indices,index)

                indices2=indices.astype(np.int64)
                paraimprimir=Y[indices2]
                #plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
		if pos!=1:
                    ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
                #ax.plot(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], 'o', s=1, color=color)


for color, i, target_name, pos in zip(colors, target, target_names, lista):
                indices=[]
                paraimprimir=[]


                for index in range(0,Y.size/3):
                        if values2[index]==i:
                                indices=np.append(indices,index)

                indices2=indices.astype(np.int64)
                paraimprimir=Y[indices2]
                #plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
		if pos==1:
                    ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], cmap=plt.cm.Spectral, s=9, c=color, label=target_names[pos])
                #ax.plot(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], 'o', s=1, color=color)



##########################################

#
#LO MOSTRAMOS POR APT
#ax2 = fig.add_subplot(1, 2, 1)

#ESTOS SON LOS 25 APTS QUE MANEJAMOS ( Mas los textos malware y unknown APT para algun caso que tengo con -1):
#target_names=['Malware', 'Carbanak','CozyDuke','EquationGrp','Duqu2','Regin','NetTraveler','Machete','BlackEnergy','CosmicDuke','MiniDuke','APT1','WildNeutron','Gauss','Flamer','Duqu','Winnti','DarkHotel','APT28', 'Kimsuky','Hellsing','Icefog','Dark Seoul','Careto','Turla','Poseidon','Stuxnet']

#Y ESTOS SON LOS COLORES QUE LES DAMOS (Negro para el desconocido y rosa claro para el malware general):
#colors=['lightpink','firebrick','blue','navy','mediumpurple','gray','chocolate','crimson','lightpink','magenta','purple','red','navajowhite','gold','pink','tan', 'sienna', 'y','yellow','lavender','gray','royalblue','slateblue','orchid','lime','salmon','brown','darkkhaki','silver','brown']

#target=[0,1,2,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,25,26,27,28,29,30,31,32]
#lista=[  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]

#for color, i, target_name, pos in zip(colors, target, target_names, lista):
		#indices=[]
		#paraimprimir=[]
#
		#for index in range(0,Y.size/3):
			#if values3[index]==i:
				#indices=np.append(indices,index)

		#indices2=indices.astype(np.int64)
		#paraimprimir=Y[indices2]
		#if pos==1:
			#plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
		#else:
			#plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=4, c=color, label=target_names[pos])


##################################
# SHOW PLOT
##################################
# plot data
#for length, vector in zip(pca.explained_variance_, pca.components_):
#    v = vector * 3 * np.sqrt(length)
#    draw_vector(pca.mean_, pca.mean_ + v, ax)

plt.axis('equal');
plt.title("PCA")
plt.legend(bbox_to_anchor=(0.95,0.98))
ax.xaxis.set_major_formatter(NullFormatter())
ax.yaxis.set_major_formatter(NullFormatter())
plt.axis('tight')
fig.savefig(output_file)
plt.show()
