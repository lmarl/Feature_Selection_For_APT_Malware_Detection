import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from pandas.plotting import scatter_matrix
from sklearn import manifold



###LEEMOS EL DATASET
input_file = "../datasets/csv_con_puntos_y_con_num_APTs_final_final_conptoycoma.csv"

df = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int,"NUM_APT":int})

###EXTRAEMOS LAS MUESTRAS DE LA APT APT1
df_APT1=df.loc[df['NUM_APT'] == 12]

###EXTRAEMOS LOS CAMPOS OBJETIVO Y QUE NO NOS INTERESAN
malwaretypes=df.MALWARE_TYPE
ssdeeptypes=df.SSDEEP
imphashtypes=df.IMPHASH
apttypes=df.APT
numapt=df.NUM_APT

###Y NOS QUEDAMOS CON SUS VALORES
values=malwaretypes.values.astype(np.int64)
values2=apttypes.values.astype(np.int64)
values3=numapt.values.astype(np.int64)

###PARA FINALMENTE BORRARLOS DEL DATASET
del df['MALWARE_TYPE']
del df['APT']
del df['MD5']
del df['FIRST_SEEN']
del df['SSDEEP']
del df['IMPHASH']
del df['NUM_APT']

###Y TAMBIEN DEL LISTADO DE APT1
del df_APT1['MALWARE_TYPE']
del df_APT1['APT']
del df_APT1['MD5']
del df_APT1['FIRST_SEEN']
del df_APT1['SSDEEP']
del df_APT1['IMPHASH']
del df_APT1['NUM_APT']

####Borramos los DIST
del df['PACKERS_BIN_DIST']
del df['IMPORTS_BINARY_DIST']
del df['ANTIDEBUG_BINARY_DIST']
del df['LANG_BINARY_DIST']
del df['API_BINARY_DIST']
del df['SERVICES_BINARY_DIST']
del df['SUSPICIOUS_DLLS_DIST']
del df['all_files_binary_DIST']
del df['all_written_files_binary_DIST']
del df['all_deleted_files_binary_DIST']
del df['all_read_files_binary_DIST']
del df['all_opened_files_binary_DIST']
del df['UDP_Countries_DIST']
del df['DNS_countries_DIST']
del df['TCP_countries_DIST']

del df_APT1['PACKERS_BIN_DIST']
del df_APT1['IMPORTS_BINARY_DIST']
del df_APT1['ANTIDEBUG_BINARY_DIST']
del df_APT1['LANG_BINARY_DIST']
del df_APT1['API_BINARY_DIST']
del df_APT1['SERVICES_BINARY_DIST']
del df_APT1['SUSPICIOUS_DLLS_DIST']
del df_APT1['all_files_binary_DIST']
del df_APT1['all_written_files_binary_DIST']
del df_APT1['all_deleted_files_binary_DIST']
del df_APT1['all_read_files_binary_DIST']
del df_APT1['all_opened_files_binary_DIST']
del df_APT1['UDP_Countries_DIST']
del df_APT1['DNS_countries_DIST']
del df_APT1['TCP_countries_DIST']


###SACAMOS LOS NOMBRES DE LOS CAMPOS
atributos=list(df)
###...Y SUS VALORES
df3=df.values

###ESTANDARIZAMOS
from sklearn import preprocessing
df2 = preprocessing.scale(df)
df = pd.DataFrame(df2)

###CALCULAMOS LAS CORRELACIONES ENTRE LOS CAMPOS DEL DATASET
correlations=df.corr()



###SACAMOS EL HISTOGRAMA DE TODOS LOS CAMPOS
####df.hist(figsize=[22,16],layout=[5,8])

###CREAMOS UNA FIGURA
fig = plt.figure(figsize=(16,16))

###Y VAMOS RECORRIENDO TODOS LOS CAMPOS (6x6)...
numfield=1
for i in range (0,4):
	for j in range(0,5):
		ax = fig.add_subplot(5,4,numfield)
		###...pintando el histograma de cada campo
		plt.hist(df.values[:,numfield-1])

		###...y el histograma de la APT APT1
		plt.hist(df_APT1.values[:,numfield-1])
		plt.title(atributos[numfield-1])
		numfield=numfield+1

plt.subplots_adjust(hspace=0.7, wspace=0.4)
fig.savefig('resultados/comparativa_historgramas_con_APT1.png')
plt.show()
