import numpy as np
from numpy import *
import pandas as pd
from time import time

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn import manifold
from sklearn.manifold import TSNE


##################################
# PREPARATIVOS
##################################

###leemos el dataset
input_file = "../datasets/csv_con_puntos_y_con_num_APTs_final_final_conptoycoma.csv"


####Ahora le anadimos los APTs a los que pertenecen
df = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int,"NUM_APT":int})

####Sacamos algunos de los campos
malwaretypes=df.MALWARE_TYPE
malware_or_apt=df.APT
ssdeeptypes=df.SSDEEP
imphashtypes=df.IMPHASH
apttypes=df.APT
numapt=df.NUM_APT

####En algunos casos hay que convertirlos a nmero:
malwaretpesvalues=malwaretypes.values.astype(np.int64)
malware_or_apt_values=malware_or_apt.values.astype(np.int64)
numaptvalues=numapt.values.astype(np.int64)

####Y los eliminamos (no deben formar parte del dataset)
del df['MALWARE_TYPE']
del df['APT']
del df['MD5']
del df['FIRST_SEEN']
del df['SSDEEP']
del df['IMPHASH']

##################################
# Standarization
##################################
from sklearn import preprocessing
atributos=list(df)
df2 = preprocessing.scale(df)
df = pd.DataFrame(df2)

#df.drop(axis=1, columns=1)


##################################
# TSNE
##################################
#tsne = manifold.TSNE(n_components=2,init='pca', random_state=0)
#Y = tsne.fit_transform(df)

#### Cargamos fichero con los datos del TSNE
#
data_dir="../tmp"
data_filename = data_dir + '/tsne.npy'
Y = np.load(data_filename)

#######################
#Creamos la figura
fig = plt.figure(figsize=(15, 15))

colors=['red', 'green']
target_names=['Malware', 'APT']
target=[0, 1]

for num in range(1,10):

	ax = fig.add_subplot(3, 3, num)

	###Pintamos el mapa de malware y APTs en rojo y verde
	for color, i, target_name, pos in zip(colors, target, target_names, [0,1]):
		indices=[]
		paraimprimir=[]
		for index in range(0,Y.size/2):
			if malware_or_apt_values[index]==i:
				indices=np.append(indices,index)
	
		indices2=indices.astype(np.int64)
		paraimprimir=Y[indices2]
		plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=2, c=color, label=target_names[pos])

	###LANZAMOS EL KMEANS
	#reduced_data = PCA(n_components=2).fit_transform(df)
	#reduced_data = PCA(n_components=2).fit_transform(Y)
	reduced_data=Y

	kmeans = KMeans(n_clusters=num+1, random_state=0).fit(reduced_data)

	###Y pintamos los centroides
	centroids = kmeans.cluster_centers_
	plt.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=169, linewidths=3, color='b', zorder=10)
	plt.title("%s" % (num+1));


#######################
#Creamos la figura
fig2 = plt.figure(figsize=(15, 15))

for num in range(10,19):
	ax = fig2.add_subplot(3, 3, num-9)
	
	###Pintamos el mapa de malware y APTs en rojo y verde
	for color, i, target_name, pos in zip(colors, target, target_names, [0,1]):
		indices=[]
		paraimprimir=[]
		for index in range(0,Y.size/2):
			if malware_or_apt_values[index]==i:
				indices=np.append(indices,index)
	
		indices2=indices.astype(np.int64)
		paraimprimir=Y[indices2]
		plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=2, c=color, label=target_names[pos])

	###LANZAMOS EL KMEANS
	#reduced_data = PCA(n_components=2).fit_transform(df)
	#reduced_data = PCA(n_components=2).fit_transform(Y)
	reduced_data=Y

	kmeans = KMeans(n_clusters=num+1, random_state=0).fit(reduced_data)

	###Y pintamos los centroides
	centroids = kmeans.cluster_centers_
	plt.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=169, linewidths=3, color='b', zorder=10)
	plt.title("%s" % (num+1));

#######################
#Creamos la figura
fig3 = plt.figure(figsize=(15, 15))

for num in range(19,28):
	ax = fig3.add_subplot(3, 3, num-18)

	###Pintamos el mapa de malware y APTs en rojo y verde
	for color, i, target_name, pos in zip(colors, target, target_names, [0,1]):
		indices=[]
		paraimprimir=[]
		for index in range(0,Y.size/2):
			if malware_or_apt_values[index]==i:
				indices=np.append(indices,index)
	
		indices2=indices.astype(np.int64)
		paraimprimir=Y[indices2]
		plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=2, c=color, label=target_names[pos])

	###LANZAMOS EL KMEANS
	#reduced_data = PCA(n_components=2).fit_transform(df)
	#reduced_data = PCA(n_components=2).fit_transform(Y)
	reduced_data=Y

	kmeans = KMeans(n_clusters=num+1, random_state=0).fit(reduced_data)

	###Y pintamos los centroides
	centroids = kmeans.cluster_centers_
	plt.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=169, linewidths=3, color='b', zorder=10)
	plt.title("%s" % (num+1));





##################################
# SHOW PLOT
##################################
ax.xaxis.set_major_formatter(NullFormatter())
ax.yaxis.set_major_formatter(NullFormatter())
#plt.legend()
plt.axis('tight')
fig.savefig('resultados/Fig_Centroids_In_red_And_Green_2_10.png')
fig2.savefig('resultados/Fig_Centroids_In_red_And_Green_11_19.png')
fig3.savefig('resultados/Fig_Centroids_In_red_And_Green_20_28.png')
plt.show()
