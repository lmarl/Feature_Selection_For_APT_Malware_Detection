import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.manifold import TSNE
from sklearn.externals import joblib
import sys

##########
#FICHEROS#
##########
md5_files="../datasets/csv_a_empezar_desde_cero_v2_sin_cols21y37_con52_y_49_46_y43_40_34_31_28_24_17_14_10_final_con_cabecera_quitamos_5_muestras_develgroup_country_new_headers.csv"
input_file= "../datasets/reducido_a_1941_features_without_NaNs_y_19457_rows.csv"
data_dir="../tmp"
data_filename = data_dir + '/tsne_1941_3D_e.npy'
tmp_file="../tmp/dataset_1941_tsne_apts_rosa.joblib.pkl"
output_file='resultados/TSNEByAPT_rosa_1941.png'
perpl=30


##########
#ARGUMENTS#
##########
def syntax_error():
        print "SYNTAX ERROR: Introduce un argumentos con los siguientes valores"
        print " 1 Recalcular TSNE"
        print " 2 Obtener calculo de la ultima operacion grabada"
	print
	print "Current input/output values are:"
	print "		Input File:"+input_file
	print "		TMP File:"+tmp_file
	print "		TSNE File:"+data_filename
	print "		Output File:"+output_file
	print
	print


##################################
# PREPARATIVOS
##################################


	###Leemos el dataset

df = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int,"NUM_APT":int})


df3 = pd.read_csv(md5_files, header=0, sep=';')

###Separamos los campos que no nos interesan y campos objetivo
#malwaretypes=df.MALWARE_TYPE
#ssdeeptypes=df.SSDEEP
#imphashtypes=df.IMPHASH
apttypes=df.APT
numapt=df.NUM_APT
	
###Quitamos las cabeceras de los campos objetivo
#values=malwaretypes.values.astype(np.int64)
values2=apttypes.values.astype(np.int64)
values3=numapt.values.astype(np.int64)

#01-Carbanak
#02-Cozy Duke
#03-Shamoon
#04-Equation Group
#05-Duqu2
#06-Regin
#07-Net Traveler
#08-Machete
#09-BlackEnergy
#10-Cosmic Duke
#11-Mini Duke
#12-APT1
#13-Red October
#14-Naikon
#16-Gauss
#17-Flamer/ Skywiper
#18-Duqu
#19-Winnti
#20-Dark Hotel
#21-Sofacy/APT28
#22-APT29
#25-Kimsuky
#26-Hellsing
#27-Icefog
#28-Dark Seoul
#29-Careto
#31-Poseidon
#30-Turla/ DragonFly
#32-Stuxnet

target_names=['Malware', 'Carbanak','CozyDuke','Shamoon','EquationGrp','Duqu2','Regin','NetTraveler','Machete','BlackEnergy','CosmicDuke','MiniDuke','APT1','RedOctober','Naikon/WildNeutron','15', 'Gauss','Flamer','Duqu','Winnti','DarkHotel','APT28', 'APT29','23','24','Kimsuky','Hellsing','Icefog','Dark Seoul','Careto','Turla','Poseidon','Stuxnet']
	
print "Hay en la actualidad estos APTs:"
df2=df[df.APT==1]
print df[df.APT==1].shape
sumaZoo=0
sumaVT=0
for num in range(0,33):
    print "Con num_apt ", num, " es decir, ", target_names[num]
    print df2[df2.NUM_APT==num].shape[0]
    cuantos=df2[df2.NUM_APT==num].shape[0]
    if num in [2,4,5,6,9,12,21,29,32,16,18]:
            sumaZoo+=cuantos
    else:
            sumaVT+=cuantos
            
print "Hay ",sumaZoo," de Zoo y ContagioDump y ", sumaVT, "de Virustotal"

#df4=df3[df3.NUM_APT==7]
#print df4
    
#APTs cogidas de ContagioDump y TheZoo:
#	CozyDuke (ContagioDump)
#	EquationGroup (ContagioDump)
#	Duqu2 (TheZoo)
#	Regin (TheZoo)
#	BlackEnergy (TheZoo)
#	APT1 (VirusShare)
#	APT28/Sofacy  (ContagioDump)
#	Careto (TheZoo)
#	Stuxnet (TheZoo)
#	Gauss(ContagioDump)
#	Duqu(ContagioDump)
#
#Reports de virustotal:
#	Carbanak
#	NetTraveler
#	Machete
#	CosmicDuke
#	MiniDuke
#	RedOctober
#	WildNeutron
#	Flamer
#	Winnti
#	DarkHotel
#	Kimsuky
#	Hellsing
#	Icefog
#	Dark Seoul
#	DragonFly
#	Poseidon

