#############################################
#
#  This script generates a figure with the t-SNE 3-D projection
#  of the dataset labelled with respect to being or not an APT sample
#
#  Author: Luis Martin Liras
#
#############################################


###############
#IMPORTS
###############
import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.manifold import TSNE
from sklearn.externals import joblib
import sys
import os
from sklearn import preprocessing
import warnings
from sklearn.exceptions import DataConversionWarning

###############
#CONFIGURATION
###############
input_file= "../datasets/newDatasetFinal5.csv"
data_dir="../tmp"
data_filename = data_dir + '/tsne_1941_3D_e.npy'
tmp_file="../tmp/dataset_standardized.joblib.pkl"
output_file='../results/DoubleFigTSNEByAPTandMalware_1941_verdes_bigdots.png'


##########
#ARGUMENTS
##########
def syntax_error():
        print "SYNTAX ERROR: Introduce one argument with any of the following values:"
        print " 1 Recalculate TSNE"
        print " 2 Obtain TSNE from last operation"
	print
	print "Current input/output values are:"
	print "		Input File:"+input_file
	print "		TMP File:"+tmp_file
	print "		TSNE File:"+data_filename
	print "		Output File:"+output_file
	print
	print


argumentos=sys.argv
os.system("clear")
###Remove warnings
warnings.filterwarnings(action='ignore', category=DataConversionWarning)

if len(argumentos)!=2:
        syntax_error()
        sys.exit()
else:
        if (argumentos[1]!='1' and argumentos[1]!='2'):
                syntax_error()
                sys.exit()

##################################
# PRELIMINAR TASKS
##################################

###Read  dataset
print ("Reading CSV...")
df = pd.read_csv(input_file, header = 0)
print ("Read!!!")

apttypes=df.isAPT
numapt=df.NUMAPT

values2=apttypes.values.astype(np.int64)
values3=numapt.values.astype(np.int64)
del df['isAPT']
del df['NUMAPT']
del df['MD5']


##################################
# Standarization
##################################
print ("Standardizing...")
X=df
X = preprocessing.scale(X)
joblib.dump(X, tmp_file)
print ("Done!!!")

##################################
# TSNE
##################################
perpl=30

if argumentos[1]=='1':
	tsne = manifold.TSNE(n_components=3, perplexity=perpl)
        print ("Obtaining TSNE... (This will take a long time - about 40 minutes)...")
	Y = tsne.fit_transform(X)
        print ("Finished...")
	np.save(data_filename, Y)

if argumentos[1]=='2':
	Y = np.load(data_filename)


##################################
# PLOTTING
##################################
###Create a single figure with two parts
fig = plt.figure(figsize=(15,15))
ax = fig.add_subplot(111, projection='3d')


########################
#MALWARE/APT
colors=['red', 'green']
target_names=['Malware','APT']
target=[0, 1]
lista=[0,1]

for color, i, target_name, pos in zip(colors, target, target_names, lista):
                indices=[]
                paraimprimir=[]


                for index in range(0,Y.size/3):
                        if values2[index]==i:
                                indices=np.append(indices,index)

                indices2=indices.astype(np.int64)
                paraimprimir=Y[indices2]
		if (color=='green'):
                	ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], cmap=plt.cm.Spectral, s=4, c=color, label=target_names[pos])
		else:
                	ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])


##################################
# SHOW PLOT
##################################
plt.title("t-SNE (perplexity: %.2g)" % (perpl))
plt.legend(bbox_to_anchor=(0.95,0.98))

plt.axis('tight')
fig.savefig(output_file)

print ("New plot will be shown in a different window. Close it to finish!")
plt.show()
