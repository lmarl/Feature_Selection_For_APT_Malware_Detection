##################################
# IMPORTS
##################################
import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.manifold import TSNE
from sklearn.feature_selection import VarianceThreshold
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn import datasets
from sklearn.ensemble import ExtraTreesClassifier
import sys
##################################
# PREPARATIVOS
##################################

###Leemos el dataset
input_file = "../datasets/csv_con_puntos_y_con_num_APTs_final_final_conptoycoma_new_2.csv"

df = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int,"NUM_APT":int})

###Separamos los campos que no nos interesan y campos objetivo
malwaretypes=df.MALWARE_TYPE
isapt=df.APT
numapt=df.NUM_APT

###Quitamos las cabeceras de los campos objetivo
values=malwaretypes.values.astype(np.int64)
values2=isapt.values.astype(np.int64)
values3=numapt.values.astype(np.int64)
print (df.shape)

####Quitamos los campos DIST
del df['PACKERS_BIN_DIST']
del df['IMPORTS_BINARY_DIST']
del df['ANTIDEBUG_BINARY_DIST']
del df['LANG_BINARY_DIST']
del df['API_BINARY_DIST']
del df['SERVICES_BINARY_DIST']
del df['all_files_binary_DIST']
del df['all_opened_files_binary_DIST']
del df['all_written_files_binary_DIST']
del df['all_deleted_files_binary_DIST']
del df['all_read_files_binary_DIST']
del df['UDP_Countries_DIST']
del df['TCP_countries_DIST']
del df['DNS_countries_DIST']
del df['SUSPICIOUS_DLLS_DIST']

print (df.shape)
###Quitamos los campos que no nos interesan
del df['MALWARE_TYPE']
del df['APT']
del df['MD5']
del df['FIRST_SEEN']
del df['SSDEEP']
del df['IMPHASH']
del df['NUM_APT']

print (df.shape)
exit()
headers=list(df)
headersArray=array(array(headers))
##################################
# FEATURE SELECTION
##################################
print("===================================================")
print("====Remove features with low variance (>0,9)=======")
print("===================================================")
Sel=VarianceThreshold(threshold=.9 * (1- .9))
fitt=Sel.fit(df)
New_X=Sel.fit_transform(df)

print("Son estos:")
scores=np.column_stack((headersArray,fitt.get_support()))
print(scores)
##################################
# CHI2
##################################
print(" ")
print("====================================================")
print("====Univariate Feature Selection (Chi2, k=10)=======")
print("====================================================")

df=df.values
kk=SelectKBest(chi2,2).fit(df,values2)
New_X=SelectKBest(chi2,2).fit_transform(df,values2)

print("==Los scores de cada campo son==")
scores=np.column_stack((headersArray,kk.scores_))
print(scores)
print(" ")
##################################
# EXTRA TREE IMPORTANCES
##################################
print("=================================")
print("====Extra Tree importances=======")
print("=================================")
print("Usando el clasificador Extra Tree")

model=ExtraTreesClassifier()
model.fit(df,values2)
scores=np.column_stack((headersArray,model.feature_importances_))
print(scores)

##################################
# DECISION TREE IMPORTANCES
##################################
print("=================================")
print("====Decission Tree classifier====")
print("=================================")
print("Usando el clasificador Decission Tree")
from sklearn import tree

model=tree.DecisionTreeClassifier()
model.fit(df,values2)
scores=np.column_stack((headersArray,model.feature_importances_))
print(scores)


