import numpy as np
from numpy import *
import pandas as pd
from time import time

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn.manifold import TSNE

from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn import manifold

##################################
# PREPARATIVOS
##################################

###Abrimos el dataset
input_file = "../datasets/csv_con_puntos_y_con_num_APTs_final_final_conptoycoma.csv"
df = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int,"NUM_APT":int})

####Sacamos algunos de los campos
malwaretypes=df.MALWARE_TYPE
apttypes=df.APT
ssdeeptypes=df.SSDEEP
imphashtypes=df.IMPHASH
apttypes=df.APT
numapt=df.NUM_APT

####En algunos casos hay que convertirlos a nmero:
values=malwaretypes.values.astype(np.int64)
values2=apttypes.values.astype(np.int64)
values3=numapt.values.astype(np.int64)

####Y los eliminamos (no deben formar parte del dataset)
del df['MALWARE_TYPE']
del df['APT']
del df['MD5']
del df['FIRST_SEEN']
del df['SSDEEP']
del df['IMPHASH']

####Creamos la figura (con un solo grafico)
fig = plt.figure(figsize=(15, 15))
ax = fig.add_subplot(1, 1, 1)

##################################
# TSNE
##################################
# Cargamos fichero con los datos del TSNE
#
output_dir="../tmp"
output_filename = output_dir + '/tsne.npy'
Y = np.load(output_filename)

#######################
#LO MOSTRAMOS POR APT (las 28 APTs)
perpl=30
colors=['lightpink','firebrick','blue','navy','black','gray','chocolate','crimson','silver','magenta','purple','red','navajowhite','gold','pink','tan', 'sienna', 'y','yellow','lavender','gray','royalblue','slateblue','orchid','lime','salmon','brown','darkkhaki','silver','brown','green']

target_names=['Malware', 'Carbanak','CozyDuke','EquationGroup','Duqu2','Regin','NetTraveler','Machete','BlackEnergy','CosmicDuke','MiniDuke','APT1','RedOctober','WildNeutron','Gauss','Flamer','Duqu','Winnti','DarkHotel','APT28/Sofacy','Regin','Shamoon', 'Kimsuky','Hellsing','Icefog','Dark Seoul','Careto','DragonFly','Poseidon','Stuxnet']

target=[0,1,2,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,23,25,26,27,28,29,30,31,32]
lista=[ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]

for color, i, target_name, pos in zip(colors, target, target_names, lista):
                indices=[]
                paraimprimir=[]

                for index in range(0,Y.size/2):
                        if values3[index]==i:
                                indices=np.append(indices,index)

                indices2=indices.astype(np.int64)
                paraimprimir=Y[indices2]
                if pos==0:
                        plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
                else:
                        plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=4, c=color, label=target_names[pos])

plt.title("t-SNE (perplexity: %.2g)" % (perpl))
plt.legend(bbox_to_anchor=(0.98,0.98))

###LANZAMOS EL KMEANS
#reduced_data = PCA(n_components=2).fit_transform(df)
#reduced_data = PCA(n_components=2).fit_transform(Y)
reduced_data=Y
kmeans = KMeans(n_clusters=30, random_state=0).fit(reduced_data)

centroids = kmeans.cluster_centers_
plt.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=169, linewidths=3, color='b', zorder=10)

##################################
# SHOW PLOT
##################################
ax.xaxis.set_major_formatter(NullFormatter())
ax.yaxis.set_major_formatter(NullFormatter())
plt.axis('tight')
fig.savefig('resultados/Fig_Centroides_By_APT_Y_Malware.png')
plt.show()
