import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from pandas.plotting import scatter_matrix
from sklearn import manifold

input_file = "../datasets/csv_con_puntos_y_con_num_APTs_final_final_conptoycoma.csv"

df = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int,"NUM_APT":int})

malwaretypes=df.MALWARE_TYPE
ssdeeptypes=df.SSDEEP
imphashtypes=df.IMPHASH
apttypes=df.APT
numapt=df.NUM_APT

values=malwaretypes.values.astype(np.int64)
values2=apttypes.values.astype(np.int64)
values3=numapt.values.astype(np.int64)

del df['MALWARE_TYPE']
del df['APT']
del df['MD5']
del df['FIRST_SEEN']
del df['SSDEEP']
del df['IMPHASH']
del df['NUM_APT']

#QUITAMOS LOS CAMPOS QUE TENIAN MAYOR CORRELACION
del df['IMPORTS_BINARY_DIST']
del df['all_opened_files_binary_DIST']
del df['all_read_files_binary_DIST']
del df['all_files_binary_DIST']
del df['SUSPICIOUS_DLLS_DIST']
del df['all_written_files_binary_DIST']
del df['all_deleted_files_binary_DIST']
del df['NUM_IMPORTS']
del df['NUM_PACKERS']
#del df['PACKERS_BIN_DIST']
del df['LANG_BINARY_DIST']
del df['API_BINARY_DIST']
del df['PACKERS_BIN_DIST']
#del df['IMPORTS_BINARY_DIST']
del df['ANTIDEBUG_BINARY_DIST']
#del df['LANG_BINARY_DIST']
#del df['API_BINARY_DIST']
del df['SERVICES_BINARY_DIST']
#del df['SUSPICIOUS_DLLS_DIST']
del df['UDP_Countries_DIST']
del df['DNS_countries_DIST']
del df['TCP_countries_DIST']

##################################
# Standarization
##################################
from sklearn import preprocessing
atributos=list(df)
df2 = preprocessing.scale(df)
df = pd.DataFrame(df2,columns=atributos)

############################################################
# Correlacion
############################################################
correlations=df.corr()
axs=scatter_matrix(df, alpha=0.2, figsize=(24,24), diagonal='kde')

n = len(df.columns)
for x in range(n):
    for y in range(n):
        # to get the axis of subplots
        ax = axs[x, y]
        # to make x axis name vertical  
        ax.xaxis.label.set_rotation(90)
        # to make y axis name horizontal 
        ax.yaxis.label.set_rotation(0)
        # to make sure y axis names are outside the plot area
        ax.yaxis.labelpad = 50

#fig = plt.figure(figsize=(16,16))
#ax = fig.add_subplot(111)
#ticks = np.arange(0,36,1)
#ax.set_xticks(ticks)
#ax.set_yticks(ticks)
#ax.set_xticklabels(atributos)
#ax.set_yticklabels(atributos)
#plt.xticks(rotation=80)
plt.savefig('resultados/scatterplot_de_correlacion.png')
plt.show()
