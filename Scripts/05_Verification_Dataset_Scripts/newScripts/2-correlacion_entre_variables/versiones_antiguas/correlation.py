import numpy as np
from numpy import *
import pandas as pd
from time import time

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from pandas.plotting import scatter_matrix

from sklearn import manifold
input_file = "../datasets/csv_con_puntos_y_con_num_APTs_final_final_conptoycoma.csv"

df2 = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int,"NUM_APT":int})

df=df2

malwaretypes=df.MALWARE_TYPE
ssdeeptypes=df.SSDEEP
imphashtypes=df.IMPHASH
apttypes=df.APT
numapt=df.NUM_APT

values=malwaretypes.values.astype(np.int64)
values2=apttypes.values.astype(np.int64)
values3=numapt.values.astype(np.int64)

del df['MALWARE_TYPE']
del df['APT']
del df['MD5']
del df['FIRST_SEEN']
del df['SSDEEP']
del df['IMPHASH']
del df['NUM_APT']

##################################
# Standarization
##################################
from sklearn import preprocessing
atributos=list(df)
df2 = preprocessing.scale(df)
df = pd.DataFrame(df2)

#df.drop(axis=1, columns=1)

##################################
# Correlation
##################################
correlations=df.corr()
#atributos=["NUM_PACKERS","PACKERS_BIN","all_files_binary","SERVICES_BINARY_DIST","API_BINARY_DIST","LANG_BINARY_DIST","TCP_countries_DIST","all_written_files_binary","ANTIDEBUG_BINARY_DIST","all_opened_files_binary","SERVICES_BINARY","IMPORTS_BINARY_DIST","UDP_Countries","NUM_LANG","all_read_files_binary","PACKERS_BIN_DIST","TCP_countries","all_deleted_files_binary","DNS_countries","ANTIDEBUG_BINARY","NUM_IMPORTS","all_read_files_binary_DIST","IMPORTS_BIN","SUSPICIOUS_DLLS_DIST","API_BINARY","DNS_countries_DIST","UDP_Countries_DIST","HAS_OVERLAYS","LANG_BINARY","SUSPICIOUS_DLLS","RESOURCE_NUM","all_written_files_binary_DIST","all_deleted_files_binary_DIST","SIZE","all_opened_files_binary_DIST","all_files_binary_DIST"] 
#for i in range(len(atributos)):
	#correlaciones[i]=corr_matrix[atributos[i]].sort_values(ascending=False)
#scatter_matrix(df[atributos], figsize=(18,18))
#scatter_matrix(df, alpha=0.2, figsize=(36, 36), diagonal='kde')


##################################
# Showing information
##################################
fig = plt.figure(figsize=(16,16))
ax = fig.add_subplot(111)
cax = ax.matshow(correlations, vmin=-1, vmax=1)
fig.colorbar(cax)
ticks = np.arange(0,36,1)
ax.set_xticks(ticks)
ax.set_yticks(ticks)
ax.set_xticklabels(atributos)
ax.set_yticklabels(atributos)
plt.xticks(rotation=80)
plt.show()
