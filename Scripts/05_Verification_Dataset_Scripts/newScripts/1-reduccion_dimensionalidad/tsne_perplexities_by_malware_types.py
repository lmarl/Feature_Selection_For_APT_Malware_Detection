import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.manifold import TSNE


#########################
#
# Este script calcula el TSNE del dataset con 10 perplejidades (5 a 55) separando por tipo de APT
#

#####################################
# PREPARATIVOS
#####################################

input_file="../datasets/csv_con_puntos_y_con_num_APTs_final_final_conptoycoma_new2.csv"

df = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int})

malwaretypes=df.MALWARE_TYPE
apttypes=df.APT
ssdeeptypes=df.SSDEEP
imphashtypes=df.IMPHASH
apttypes=df.APT
#numapt=df.NUM_APT

values=malwaretypes.values.astype(np.int64)
values2=apttypes.values.astype(np.int64)

del df['MALWARE_TYPE']
del df['APT']
del df['MD5']
del df['FIRST_SEEN']
del df['SSDEEP']
del df['IMPHASH']
del df['NUM_APT']

##################################
# Standarization
##################################
from sklearn import preprocessing
df = preprocessing.scale(df)

##################################
# TSNE
##################################

###Creamos una figura 
fig = plt.figure(figsize=(15, 15))

###Seleccionamos los colores, labels y valores en el dataset
colors=['gray', 'navy', 'turquoise', 'darkorange', 'red', 'green', 'blue']
target_names=['Unknown', 'Other', 'Trojan','Worm','Backdoor','Rootkit','Spyware']
target=[-1, 0, 1,4,2,3,5]

###Y metemos las 10 perplexities en la figura:
for perpl in range (5,55,5):
	ax = fig.add_subplot(2, 5, perpl/5)
	tsne = manifold.TSNE(n_components=2, perplexity=perpl)
	Y = tsne.fit_transform(df)

	for color, i, target_name, pos in zip(colors, target, target_names, [0,1]):
		indices=[]
		paraimprimir=[]
		for index in range(0,Y.size/2):
			if values2[index]==i:
				indices=np.append(indices,index)

		indices2=indices.astype(np.int64)
		paraimprimir=Y[indices2]
		plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])

	plt.title("t-SNE (perplexity: %.2g)" % (perpl))

##################################
# SHOW PLOT. Finalmente mostramos y guardamos
##################################
ax.xaxis.set_major_formatter(NullFormatter())
ax.yaxis.set_major_formatter(NullFormatter())
plt.axis('tight')
fig.savefig('resultados\FigTSNE_by_MalwareTypes_with_different_perplexities.png')
plt.show()
