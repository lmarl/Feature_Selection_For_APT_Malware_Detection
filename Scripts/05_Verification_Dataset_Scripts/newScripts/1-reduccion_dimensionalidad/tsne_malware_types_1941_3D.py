import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.manifold import TSNE
from sklearn.externals import joblib
import sys

##########
#FICHEROS#
##########
input_file= "../datasets/reducido_a_1941_features_without_NaNs_y_19457_rows.csv"
data_dir="../tmp"
data_filename = data_dir + '/tsne_1941_3D_e.npy'
tmp_file="../tmp/dataset_1941_malware_types.joblib.pkl"
output_file='resultados/TSNE_1941_by_MalwareTypes.png'
perpl=30


##########
#ARGUMENTS#
##########
def syntax_error():
        print "SYNTAX ERROR: Introduce un argumentos con los siguientes valores"
        print " 1 Recalcular TSNE"
        print " 2 Obtener calculo de la ultima operacion grabada"
	print
	print "Current input/output values are:"
	print "		Input File:"+input_file
	print "		TMP File:"+tmp_file
	print "		TSNE File:"+data_filename
	print "		Output File:"+output_file
	print
	print


##################################
# PREPARATIVOS
##################################
df = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int,"NUM_APT":int})


###Separamos los campos que no nos interesan y campos objetivo
#malwaretypes=df.MALWARE_TYPE
isapt=df.APT
numapt=df.NUM_APT
np.set_printoptions(threshold=np.nan)
###Quitamos las cabeceras de los campos objetivo
#values=malwaretypes.values.astype(np.int64)
values2=isapt.values.astype(np.int64)
values3=numapt.values.astype(np.int64)

import datetime
def convert_to_year(date_in_some_format):
        datetime_object = datetime.datetime.strptime(date_in_some_format, '%d/%m/%Y %H:%M')
        totalmins=(datetime_object-datetime.datetime(1970,1,1)).total_seconds()/60
        return int(totalmins)

def convert_malware_type_to_new_fields(row,valor):
   if int(row['MALWARE_TYPE']) == int(valor) :
      return 1;
   else:
      return 0;

print df.shape

m1 = (df.isTypeUnknown >0)
m2 = (df.isOtherType >0)
m3 = (df.isTrojan >0)
m4 = (df.isWorm >0)
m5 = (df.isBackdoor >0)
m6 = (df.isRootkit >0)
m7 = (df.isSpyware >0)

values = np.select([m1, m2, m3,m4,m5,m6,m7], [-1,0,1,4,2,3,5], default=0)
#print values

#target_names=['Unknown', 'Other', 'Trojan','Worm','Backdoor','Rootkit','Spyware']
#target=[-1,0,1,4,2,3,5]


#EXPLOTAMOS MALWARE_TYPE EN TIPOS:
#df['isTypeUnknown'] = df.apply (lambda row: convert_malware_type_to_new_fields(row,-1), axis=1)
#df['isOtherType'] = df.apply (lambda row: convert_malware_type_to_new_fields(row,0), axis=1)
#df['isTrojan'] = df.apply (lambda row: convert_malware_type_to_new_fields(row,1), axis=1)
#df['isWorm'] = df.apply (lambda row: convert_malware_type_to_new_fields(row,2), axis=1)
#df['isBackdoor'] = df.apply (lambda row: convert_malware_type_to_new_fields(row,3), axis=1)
#df['isRootkit'] = df.apply (lambda row: convert_malware_type_to_new_fields(row,4), axis=1)
#df['isSpyware'] = df.apply (lambda row: convert_malware_type_to_new_fields(row,5), axis=1)

#del df['MALWARE_TYPE']
#print df.shape
#exit()

#df['DATE'] = df['FIRST_SEEN'].apply(convert_to_year)
#print (df['Date'])

#del df['FIRST_SEEN']

###Quitamos los campos que no nos interesan
#del df['MALWARE_TYPE']
del df['APT']
#del df['MD5']
del df['NUM_APT']
#del df['DEVEL_GROUP']
#del df['DEVEL_COUNTRY']

#del df['IMPHASH']
#del df['SSDEEP']
#del df['DATE']

####Quitamos los campos DIST
#del df['PACKERS_BIN_DIST']
#del df['IMPORTS_BINARY_DIST']
#del df['ANTIDEBUG_BINARY_DIST']
#del df['LANG_BINARY_DIST']
#del df['API_BINARY_DIST']
#del df['SERVICES_BINARY_DIST']
#del df['all_files_binary_DIST']
#del df['all_opened_files_binary_DIST']
#del df['all_written_files_binary_DIST']
#del df['all_deleted_files_binary_DIST']
#del df['all_read_files_binary_DIST']
#del df['UDP_Countries_DIST']
#del df['TCP_countries_DIST']
#del df['DNS_countries_DIST']
#del df['SUSPICIOUS_DLLS_DIST']
#
#del df['PACKERS_BIN']
#del df['IMPORTS_BIN']
#del df['ANTIDEBUG_BINARY']
#del df['LANG_BINARY']
#del df['API_BINARY']
#del df['SERVICES_BINARY']
#del df['all_files_binary']
#del df['all_opened_files_binary']
#del df['all_written_files_binary']
#del df['all_deleted_files_binary']
#del df['all_read_files_binary']
#del df['UDP_Countries']
#del df['TCP_countries']
#del df['DNS_countries']
#del df['SUSPICIOUS_DLLS']

#del df['UNKNOWN1']
#del df['UNKNOWN2']
#del df['UNKNOWN3']
#del df['UNKNOWN4']
#del df['UNKNOWN5']
#del df['UNKNOWN6']
#del df['UNKNOWN7']
#del df['UNKNOWN8']
#del df['UNKNOWN9']
#del df['UNKNOWN10']
#del df['UNKNOWN11']
#del df['UNKNOWN12']
#del df['UNKNOWN13']
#del df['UNKNOWN15']
#del df['UNKNOWN16']

###Quitamos los features duplicados de imports y SUSP_APIs
#del df ['IMPORTS_BIN_CheckRemoteDebuggerPresent']
#del df ['IMPORTS_BIN_Connect']
#del df ['SUSP_API_CreateDirectoryA']
#del df ['IMPORTS_BIN_CreateFileA']
#del df ['SUSP_API_CreateProcessA']
#del df ['SUSP_API_CreateRemoteThread']
#del df ['IMPORTS_BIN_CreateThread']
#del df ['IMPORTS_BIN_DeleteFileA']
#del df ['IMPORTS_BIN_FindFirstFileA']
#del df ['IMPORTS_BIN_GetCommandLineA']
#del df ['SUSP_API_GetCurrentProcess']
#del df ['SUSP_API_GetCurrentProcessId']
#del df ['SUSP_API_GetFileAttributesA']
#del df ['IMPORTS_BIN_GetFileSize']
#del df ['IMPORTS_BIN_GetFileSizeEx']
#del df ['IMPORTS_BIN_GetModuleFileNameA']
#del df ['IMPORTS_BIN_GetModuleHandleA']
#del df ['IMPORTS_BIN_GetProcAddress']
#del df ['IMPORTS_BIN_GetStartupInfoA']
#del df ['SUSP_API_GetTempPathA']
#del df ['IMPORTS_BIN_GetThreadContext']
#del df ['IMPORTS_BIN_GetTickCount']
#del df ['IMPORTS_BIN_GetVersionExA']
#del df ['SUSP_API_IsDebuggerPresent']
#del df ['IMPORTS_BIN_LdrLoadDll']
#del df ['IMPORTS_BIN_LoadLibraryA']
#del df ['SUSP_API_MapViewOfFile']
#del df ['SUSP_API_RegCloseKey']
#del df ['IMPORTS_BIN_RegCreateKeyExA']
#del df ['IMPORTS_BIN_RegOpenKeyExA']
#del df ['IMPORTS_BIN_ShellExecuteA']
#del df ['IMPORTS_BIN_Sleep']
#del df ['IMPORTS_BIN_TerminateProcess']
#del df ['IMPORTS_BIN_UnhandledExceptionFilter']
#del df ['IMPORTS_BIN_VirtualAlloc']
#del df ['IMPORTS_BIN_VirtualFree']
#del df ['IMPORTS_BIN_VirtualProtect']
#del df ['IMPORTS_BIN_WriteFile']
#del df ['IMPORTS_BIN_WriteProcessMemory']
#del df ['SUSP_API_ZwQueryInformationThread']
#del df ['SUSP_API_FindWindowExA']
#del df ['SUSP_API_TerminateProcess']
#del df ['SUSP_API_UnhandledExceptionFilter']
#del df ['SUSP_DLLS_user32']
#del df ['IMPORTS_BIN_CreateProcess']

###Menos de 1 pero mas de 0.9:
#del df['ALL_FILES_//./Global']
#del df['IMPORTS_BIN_GetSystemDirectory']
#del df['ALL_FILES_C:/WINDOWS']
#del df['ALL_FILES_C:/WINDOWS/Registration']
#del df ['ALL_FILES_//./PIPE']
#del df ['ALL_FILES_//.']
#del df ['ALL_FILES_C:/DOCUME~1/<USER>~1/LOCALS~1/Temp']


#TAMBIEN SE QUITA SIZE POR PETICION DE ADOLFO
#del df['SIZE']

print df.shape
###AQUI HAY 1948#####


argumentos=sys.argv
if len(argumentos)!=2:
        syntax_error()
        sys.exit()
else:
        if (argumentos[1]!='1' and argumentos[1]!='2'):
                syntax_error()
                sys.exit()

	##################################
	# IMPUTAMOS VALORES VACIOS
	##################################
	#print ("Imputing empty fields...")
	#X=joblib.load("../tmp/dataset_mas_completo_sin_imphash_sin_ssdeeP.joblib.pkl",  mmap_mode='r')
	
	#from sklearn.impute import SimpleImputer
	#imp = SimpleImputer(strategy="most_frequent")
	#X=imp.fit_transform(df)
	
	##################################
	# Standarization
	##################################
	print ("Standarization process...")
	from sklearn import preprocessing
	#df = preprocessing.scale(df)
        X=df
	X = preprocessing.scale(X)
	
	joblib.dump(X, tmp_file)
	
	##################################
	# TSNE
	##################################
	
	if argumentos[1]=='1':
		###CALCULAMOS EL TSNE
		tsne = manifold.TSNE(n_components=3, perplexity=perpl)
		Y = tsne.fit_transform(X)
		np.save(data_filename, Y)

        if argumentos[1]=='2':
	####O LO ABRIMOS
	    print ("Reading NPY file...")
	    Y = np.load(data_filename)


##################################
# PLOTTING
##################################
###Creamos una figura con dos partes
#fig = plt.figure(figsize=(10, 10))
#ax = fig.add_subplot(1, 2, 2)

###Creamos una figura con dos partes
fig = plt.figure(figsize=(15,15), dpi=100)
#fig = plt.figure(figsize=(15,15))
#ax = fig.add_subplot(1, 1, 1)
ax = fig.add_subplot(111, projection='3d')


########################
#LO MOSTRAMOS POR TIPO
#colors=['gray', 'navy', 'turquoise', 'darkorange', 'red', 'green', 'blue']
#target_names=['Unknown', 'Other', 'Trojan','Worm','Backdoor','Rootkit','Spyware']
#target=[-1, 0, 1,4,2,3,5]
#

##########################################
#
# SI LO MOSTRAMOS POR APT
#ax2 = fig.add_subplot(1, 2, 1)

#ESTOS SON LOS 25 APTS QUE MANEJAMOS ( Mas los textos malware y unknown APT para algun caso que tengo con -1):
#target_names=['Malware', 'Carbanak','CozyDuke','EquationGrp','Duqu2','Regin','NetTraveler','Machete','BlackEnergy','CosmicDuke','MiniDuke','APT1','WildNeutron','Gauss','Flamer','Duqu','Winnti','DarkHotel','APT28', 'Kimsuky','Hellsing','Icefog','Dark Seoul','Careto','Turla','Poseidon','Stuxnet']

#Y ESTOS SON LOS COLORES QUE LES DAMOS (Negro para el desconocido y rosa claro para el malware general):
#colors=['lightpink','firebrick','blue','navy','mediumpurple','gray','chocolate','crimson','lightpink','magenta','purple','red','navajowhite','gold','pink','tan', 'sienna', 'y','yellow','lavender','gray','royalblue','slateblue','orchid','lime','salmon','brown','darkkhaki','silver','brown']

#target=[0,1,2,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,25,26,27,28,29,30,31,32]
lista=[0,1,2,3,4,5,6]

colors=['gray', 'navy', 'turquoise', 'darkorange', 'red', 'green', 'blue']
target_names=['Unknown', 'Other', 'Trojan','Worm','Backdoor','Rootkit','Spyware']
target=[-1,0,1,4,2,3,5]


for color, i, target_name, pos in zip(colors, target, target_names, lista):
		indices=[]
		paraimprimir=[]
#
		for index in range(0,Y.size/3):
			if values[index]==i:
				indices=np.append(indices,index)

		indices2=indices.astype(np.int64)
		paraimprimir=Y[indices2]
		#if color=='lightpink':
		#	ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir [:,2], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
		#else:
		ax.scatter(paraimprimir[:,0], paraimprimir[:,1], paraimprimir[:,2],cmap=plt.cm.Spectral,s=1,c=color,label=target_names[pos])
##########################################

#plt.title("t-SNE by APTs(perplexity: %.2g)" % (perpl))
ax.legend(bbox_to_anchor=(1.10,0.98))
#ax.xaxis.set_major_formatter(NullFormatter())
#ax.yaxis.set_major_formatter(NullFormatter())
plt.axis('tight')
fig.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)
#fig.tight_layout()
fig.savefig(output_file, bbox_inches='tight')
plt.show()
