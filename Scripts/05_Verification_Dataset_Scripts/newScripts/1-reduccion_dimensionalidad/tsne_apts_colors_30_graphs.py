import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold

##################################
# PREPARATIVOS
##################################

###Fichero de lectura del dataset
input_file = "../datasets/csv_con_puntos_y_con_num_APTs_final_final_conptoycoma_new_2.csv"

### comma delimited is the default
df = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int,"NUM_APT":int})

###Extraemos los features que luego vamos a eliminar del dataset
malwaretypes=df.MALWARE_TYPE
ssdeeptypes=df.SSDEEP
imphashtypes=df.IMPHASH
apttypes=df.APT
numapt=df.NUM_APT

###Eliminamos las cabeceras de algunos de ellos(nos quedamos solo con los datos
values=malwaretypes.values.astype(np.int64)
values2=apttypes.values.astype(np.int64)
values3=numapt.values.astype(np.int64)

###Eliminamos los campos que o bien no nos interesan, o bien son campos objetivo
#del df['MALWARE_TYPE']
del df['APT']
del df['MD5']
del df['FIRST_SEEN']
del df['SSDEEP']
del df['IMPHASH']
del df['NUM_APT']

##################################
# Standarization
##################################
from sklearn import preprocessing
df = preprocessing.scale(df)

##################################
# TSNE
##################################
from sklearn.manifold import TSNE
t0 = time()

###LANZAMOS EL TSNE (Ya sea calculandolo o abriendolo de un fichero para evitarnos los 6 minutos que tarda)
###Por defecto perplejidad 30
perpl=30

###CALCULAMOS EL TSNE
#tsne = manifold.TSNE(n_components=2,init='pca', random_state=0)
#tsne = manifold.TSNE(n_components=2, perplexity=perpl)
#Y = tsne.fit_transform(df)
#np.save(data_filename, Y)

###O LO ABRIMOS
data_dir="../tmp"
data_filename = data_dir + '/tsne_nuevo.npy'
Y = np.load(data_filename)

########################
#LO MOSTRAMOS POR TIPO
#colors=['gray', 'navy', 'turquoise', 'darkorange', 'red', 'green', 'blue']
#target_names=['Unknown', 'Other', 'Trojan','Worm','Backdoor','Rootkit','Spyware']
#target=[-1, 0, 1,4,2,3,5]
#

##########################################
###Primera figura. Primero DIBUJAMOS EL TSNE POR MALWARE/APT(En rojo y verde)

###Creamos la figura donde dibujaremos los resultados
fig = plt.figure(figsize=(19, 19))

###Seleccionamos los colores, los labels y los valores dentro del dataset que tendran cada tipo de puntos
colors=['red', 'green']
target_names=['Malware','APT']
target=[0, 1]
lista=[0,1]

###Con esto hacemos que la figura se divida en 9 partes y en la primera dibujamos el mapa en rojo verde de si es malware o no
ax = fig.add_subplot(3, 3, 1)
for color, i, target_name, pos in zip(colors, target, target_names, lista):
		indices=[]
		paraimprimir=[]

		for index in range(0,Y.size/2):
			if values2[index]==i:
				indices=np.append(indices,index)

		indices2=indices.astype(np.int64)
		paraimprimir=Y[indices2]
		plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])

plt.title("Malware")

##########
###En el resto de subplots de la primera figura, LO MOSTRAMOS POR APT(Son unas 27 APTs, al menos haran falta 3 figuras)

#Estas son las APTs que manejamos:
target_names=['Malware', 'Carbanak','CozyDuke','EquationGroup','Duqu2','Regin','NetTraveler','Machete','BlackEnergy','CosmicDuke','MiniDuke','APT1','RedOctober','WildNeutron','Gauss','Flamer','Duqu','Winnti','DarkHotel','APT28/Sofacy', 'Kimsuky','Hellsing','Icefog','Dark Seoul','Careto','DragonFly','Poseidon','Stuxnet']

#Y estos los colores que asignaremos a cada APT:
colors=['firebrick','blue','navy','mediumpurple','gray','chocolate','crimson','black','magenta','purple','red','blue','gold','black','green', 'sienna', 'y','yellow','lavender','gray','royalblue','slateblue','red','lime','blue','brown','darkkhaki','silver']

#Tenemos 27 APTs
#number_of_APTs=27
#list_length=number_of_APTs

#Estos son los codigos de las APTs que hay en el CSV, como vemos no son consecutivos porque se han ido quitando algunos con el tiempo
target=[1,2,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,25,26,27,28,29,30,31,32]

lista=[0,1]

for pos in range (0,8):
	colores=['lightpink',colors[pos]]
	targetes=[0,target[pos]]
	targetenames=['malware',target_names[pos]]
	ax2 = fig.add_subplot(3, 3, pos+2)
	for color, i, target_name, pos2 in zip(colores, targetes, targetenames, lista):
		indices=[]
		paraimprimir=[]

		for index in range(0,Y.size/2):
			if values3[index]==i:
				indices=np.append(indices,index)

		indices2=indices.astype(np.int64)
		paraimprimir=Y[indices2]
		if pos2==0:
                        plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=targetenames[pos2])
                else:
                        plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=4, c=color, label=targetenames[pos2])

		plt.title("(%s-%d)" % (target_name,i))



################################################
### SEGUNDA FIGURA. Metemos los siguientes APTs.

fig2 = plt.figure(figsize=(19, 19))

for pos in range (9,18):
	colores=['lightpink',colors[pos]]
	targetes=[0,target[pos]]
	targetenames=['malware',target_names[pos]]
	ax3 = fig2.add_subplot(3, 3, pos-8)
	for color, i, target_name, pos2 in zip(colores, targetes, targetenames, lista):
		indices=[]
		paraimprimir=[]

		for index in range(0,Y.size/2):
			if values3[index]==i:
				indices=np.append(indices,index)

		indices2=indices.astype(np.int64)
		paraimprimir=Y[indices2]

		#CON ESTO PINTAMOS LOS PUNTOS DE LAS APTS MAS GORDOS:
		if pos2==0:
                       plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=targetenames[pos2])
                else:
                        plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=4, c=color, label=targetenames[pos2])

		plt.title("(%s-%d)" % (target_name,i))



################################################
### TERCERA FIGURA. METEMOS LOS ULTIMOS 9 APTSs

fig3 = plt.figure(figsize=(19, 19))

for pos in range (19,27):
	colores=['lightpink',colors[pos]]
	targetes=[0,target[pos]]
	targetenames=['malware',target_names[pos]]
	ax4 = fig3.add_subplot(3, 3, pos-18)
	for color, i, target_name, pos2 in zip(colores, targetes, targetenames, lista):
		indices=[]
		paraimprimir=[]

		for index in range(0,Y.size/2):
			if values3[index]==i:
				indices=np.append(indices,index)

		indices2=indices.astype(np.int64)
		paraimprimir=Y[indices2]

		#CON ESTO PINTAMOS LOS PUNTOS DE LAS APTS MAS GORDOS:
		if pos2==0:
                        plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=targetenames[pos2])
                else:
                        plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=4, c=color, label=targetenames[pos2])

		plt.title("(%s%d)" % (target_name,i))


###Como nos sobra un hueco, pintamos todos los APTs juntos.
ax4 = fig3.add_subplot(3, 3, 9)
colors=['black','lightpink','firebrick','blue','navy','mediumpurple','gray','chocolate','crimson','lightpink','magenta','purple','red','navajowhite','gold','pink','tan', 'sienna', 'y','yellow','lavender','gray','royalblue','slateblue','orchid','lime','salmon','brown','darkkhaki','silver','brown']

target_names=['Unknown_APT','Malware', 'Carbanak','CozyDuke','EquationGroup','Duqu2','Regin','NetTraveler','Machete','BlackEnergy','CosmicDuke','MiniDuke','APT1','RedOctober','WildNeutron','Gauss','Flamer','Duqu','Winnti','DarkHotel','APT28/Sofacy', 'Kimsuky','Hellsing','Icefog','Dark Seoul','Careto','DragonFly','Poseidon','Stuxnet']

target=[-1,0,1,2,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,25,26,27,28,29,30,31,32]
lista=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]

for color, i, target_name, pos in zip(colors, target, target_names, lista):
                indices=[]
                paraimprimir=[]

                for index in range(0,Y.size/2):
                        if values3[index]==i:
                                indices=np.append(indices,index)

                indices2=indices.astype(np.int64)
                paraimprimir=Y[indices2]
                if pos==1:
                        plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
                else:
                        plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=4, c=color, label=target_names[pos])

plt.title("(todas)")

##################################
# SHOW PLOT. Por ultimo mostramos las figuras y las guardamos en disco
##################################
ax.xaxis.set_major_formatter(NullFormatter())
ax.yaxis.set_major_formatter(NullFormatter())
ax2.xaxis.set_major_formatter(NullFormatter())
ax2.yaxis.set_major_formatter(NullFormatter())
ax3.xaxis.set_major_formatter(NullFormatter())
ax3.yaxis.set_major_formatter(NullFormatter())
ax4.xaxis.set_major_formatter(NullFormatter())
ax4.yaxis.set_major_formatter(NullFormatter())
#plt.legend()
plt.axis('tight')

fig.savefig('resultados/FigAllTSNE_ByAPT1.png')
fig2.savefig('resultados/FigAllTSNE_ByAPT2.png')
fig3.savefig('resultados/FigAllTSNE_ByAPT3.png')
plt.show()
