import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.manifold import TSNE
from sklearn.externals import joblib
import sys

def syntax_error():
        print "SYNTAX ERROR: Introduce un argumentos con los siguientes valores"
        print " 1 Recalcular TSNE"
        print " 2 Obtener calculo de la ultima operacion grabada"


argumentos=sys.argv
if len(argumentos)!=2:
        syntax_error()
        sys.exit()
else:
        if (argumentos[1]!='1' and argumentos[1]!='2'):
                syntax_error()
                sys.exit()

##################################
# PREPARATIVOS
##################################

###Leemos el dataset
#input_file = "../datasets/csv_a_empezar_desde_cero_v2_sin_cols21y37_con52_y_49_46_y43_40_34_31_28_24_17_14_10_final_con_cabecera_quitamos_5_muestras.csv"
input_file= "../datasets/csv_a_empezar_desde_cero_v2_sin_cols21y37_con52_y_49_46_y43_40_34_31_28_24_17_14_10_final_con_cabecera_quitamos_5_muestras_develgroup_country_new_headers.csv"

df = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int,"NUM_APT":int})

###Separamos los campos que no nos interesan y campos objetivo
malwaretypes=df.MALWARE_TYPE
ssdeeptypes=df.SSDEEP
imphashtypes=df.IMPHASH
apttypes=df.APT
numapt=df.NUM_APT
md5=df.MD5

###Quitamos las cabeceras de los campos objetivo
values=malwaretypes.values.astype(np.int64)
values2=apttypes.values.astype(np.int64)
values3=numapt.values.astype(np.int64)


###Quitamos los campos que no nos interesan
#del df['MALWARE_TYPE']
del df['APT']
del df['MD5']
#del df['FIRST_SEEN']
del df['SSDEEP']
del df['IMPHASH']
del df['NUM_APT']

import datetime
def convert_to_year(date_in_some_format):
        datetime_object = datetime.datetime.strptime(date_in_some_format, '%d/%m/%Y %H:%M')
        totalmins=(datetime_object-datetime.datetime(1970,1,1)).total_seconds()/60
        return int(totalmins)

df['DATE'] = df['FIRST_SEEN'].apply(convert_to_year)
#print (df['Date'])

del df['FIRST_SEEN']
del df['DATE']

####Quitamos los campos DIST


del df['UNKNOWN1']
del df['UNKNOWN2']
del df['UNKNOWN3']
del df['UNKNOWN4']
del df['UNKNOWN5']
del df['UNKNOWN6']
del df['UNKNOWN7']
del df['UNKNOWN8']
del df['UNKNOWN9']
del df['UNKNOWN10']
del df['UNKNOWN11']
del df['UNKNOWN12']
del df['UNKNOWN13']
del df['UNKNOWN15']
del df['UNKNOWN16']


del df['PACKERS_BIN_DIST']
del df['IMPORTS_BINARY_DIST']
del df['ANTIDEBUG_BINARY_DIST']
del df['LANG_BINARY_DIST']
del df['API_BINARY_DIST']
del df['SERVICES_BINARY_DIST']
del df['all_files_binary_DIST']
del df['all_opened_files_binary_DIST']
del df['all_written_files_binary_DIST']
del df['all_deleted_files_binary_DIST']
del df['all_read_files_binary_DIST']
del df['UDP_Countries_DIST']
del df['TCP_countries_DIST']
del df['DNS_countries_DIST']
del df['SUSPICIOUS_DLLS_DIST']
del df['PACKERS_BIN']
del df['IMPORTS_BIN']
del df['ANTIDEBUG_BINARY']
del df['LANG_BINARY']
del df['API_BINARY']
del df['SERVICES_BINARY']
del df['all_files_binary']
del df['all_opened_files_binary']
del df['all_written_files_binary']
del df['all_deleted_files_binary']
del df['all_read_files_binary']
del df['UDP_Countries']
del df['TCP_countries']
del df['DNS_countries']
del df['SUSPICIOUS_DLLS']

#
#NOS QUEDAMOS CON LAS 240 FEATURES QUE SE HAN SELECCIONADO EN EL APARTADO ANTERIOR. Si queremos dejarlo como estaba solo hay que quitar las siguientes lineas
#
df1=df[['ALL_FILES_C:','ALL_FILES_C:/Documents_and_Settings/<USER>/Application_Data/Microsoft','ALL_FILES_C:/Program_Files/Common_Files/System/Ole_DB','ALL_FILES_C:/Program_Files/Windows_NT/Accessories','ANTIDEBUG_CheckRemoteDebuggerPresent','ANTIDEBUG_FindWindowExA','ANTIDEBUG_FindWindowExW','ANTIDEBUG_GetWindowThreadProcessId','ANTIDEBUG_%IsDebuggerPresent','ANTIDEBUG_OutputDebugStringA','ANTIDEBUG_Process32NextW','DELETED_FILES_C:','DELETED_FILES_C:/DOCUME~1/<USER>~1/LOCALS~1/Temp','DELETED_FILES_C:/Documents_and_Settings/All_Users/Application_Data','DELETED_FILES_C:/Documents_and_Settings/All_Users/Start_Menu/Programs','DELETED_FILES_C:/Documents_and_Settings/<USER>/Desktop','DELETED_FILES_c:/windows/temp','DNS_CH','DNS_CZ','DNS_IL','DNS_NL','DNS_SY','IMPORTS_BIN_bind','IMPORTS_BIN_CallNextHookEx','IMPORTS_BIN_CharNextA','IMPORTS_BIN_CloseHandle','IMPORTS_BIN_CopyFile','IMPORTS_BIN_CreateDirectoryA','IMPORTS_BIN_CreateMutex','IMPORTS_BIN_CreateSymbolicLink','IMPORTS_BIN_DeleteCriticalSection','IMPORTS_BIN_DispatchMessageA','IMPORTS_BIN_EnterCriticalSection','IMPORTS_BIN_FindNextFile','IMPORTS_BIN_FindWindow','IMPORTS_BIN_FreeLibrary','IMPORTS_BIN_GetClientRect','IMPORTS_BIN_GetCurrentThreadId','IMPORTS_BIN_GetDC','IMPORTS_BIN_GetDeviceCaps','IMPORTS_BIN_GetDlgItem','IMPORTS_BIN_GetFileInformation','IMPORTS_BIN_GetFileTime','IMPORTS_BIN_GetFileType','IMPORTS_BIN_GetLastError','IMPORTS_BIN_GetLongPathName','IMPORTS_BIN_GetSystemDirectoryA','IMPORTS_BIN_GetTempPathA','IMPORTS_BIN_GetVersion','IMPORTS_BIN_GetWindowLongA','IMPORTS_BIN_GetWindowsDirectory','IMPORTS_BIN_GlobalAlloc','IMPORTS_BIN_GlobalFree','IMPORTS_BIN_GlobalUnlock','IMPORTS_BIN_HeapFree','IMPORTS_BIN_inet_addr','IMPORTS_BIN_InitializeCriticalSection','IMPORTS_BIN_IsDebuggerPresent','IMPORTS_BIN_LeaveCriticalSection','IMPORTS_BIN_LoadLibrary','IMPORTS_BIN_lstrcpynA','IMPORTS_BIN_MapViewOfFile','IMPORTS_BIN_OpenFile','IMPORTS_BIN_RegOpenKey','IMPORTS_BIN_RegQueryValueExA','IMPORTS_BIN_RegSetValueExA','IMPORTS_BIN_SelectObject','IMPORTS_BIN_SetFilePointer','IMPORTS_BIN_SetWindowLongA','IMPORTS_BIN_ShowWindow','IMPORTS_BIN_TlsGetValue','IMPORTS_BIN_wsprintfA','OPENED_FILES_C:','OPENED_FILES_C:/Documents_and_Settings/<USER>','OPENED_FILES_C:/Documents_and_Settings/<USER>/Start_Menu/Programs/Startup','OPENED_FILES_C:/WINDOWS/Registration','OPENED_FILES_C:/WINDOWS/system','OPENED_FILES_C:/WINDOWS/system32','OPENED_FILES_c:/windows/temp','OPENED_FILES_//./Global','PACKER_Armadillo','PACKER_NullSoft','PACKER_UPX','READ_FILES_C:','READ_FILES_C:/Documents_and_Settings/<USER>/Application_Data/Microsoft/Internet_Explorer/Quick_Launch','SERVICES_AudioSrv','SERVICES_Ias','SERVICES_NetDDEdsdm','SERVICES_Ntmssvc','SERVICES_RASMAN','SERVICES_Win32','SERVICES_WmiApSrv','SUSP_API_CopyFileA','SUSP_API_CopyFileW','SUSP_API_CreateFileA','SUSP_API_CreateProcessAsUserA','SUSP_API_CreateProcessW','SUSP_API_CreateProcessWithLogonW','SUSP_API_CreateServiceW','SUSP_API_CreateThread','SUSP_API_CryptEncrypt','SUSP_API_DeleteFileA','SUSP_API_DisconnectNamedPipe','SUSP_API_FindFirstFileA','SUSP_API_FindFirstFileExW','SUSP_API_GetCommandLineW','SUSP_API_GetModuleFileNameA','SUSP_API_GetProcAddress','SUSP_API_GetStartupInfoA','SUSP_API_GetStartupInfoW','SUSP_API_GetTempPathW','SUSP_API_GetVersionExA','SUSP_API_HttpSendRequestExA','SUSP_API_HttpSendRequestExW','SUSP_API_InternetConnectA','SUSP_API_InternetOpenA','SUSP_API_InternetOpenUrlA','SUSP_API_InternetQueryOptionA','SUSP_API_LoadLibraryA','SUSP_API_LoadLibraryExA','SUSP_API_LoadLibraryW','SUSP_API_LockResource','SUSP_API_OpenFileMappingW','SUSP_API_OpenProcess','SUSP_API_RegCreateKeyExA','SUSP_API_RegCreateKeyW','SUSP_API_RegDeleteValueA','SUSP_API_RegEnumKeyA','SUSP_API_RegEnumKeyExA','SUSP_API_RegOpenKeyExA','SUSP_API_ShellExecuteExA','SUSP_API_SleepEx','SUSP_API_StartServiceA','SUSP_API_StartServiceCtrlDispatcherW','SUSP_API_StartServiceW','SUSP_API_VirtualFree','SUSP_API_WriteFile','SUSP_API_WriteProcessMemory','SUSP_DLLS_ADVAPI32.dll','SUSP_DLLS_comdlg32.dll','SUSP_DLLS_crypt32.dll','SUSP_DLLS_GDI32.DLL','SUSP_DLLS_HAL.dll','SUSP_DLLS_KERNEL32.dll','SUSP_DLLS_MFC42.DLL','SUSP_DLLS_MSVFW32.dll','SUSP_DLLS_ntoskrnl.exe','SUSP_DLLS_OLE32.DLL','SUSP_DLLS_OPENGL32.DLL','SUSP_DLLS_SECUR32.dll','SUSP_DLLS_wininet.dll','SUSP_DLLS_WSOCK32.DLL','TCP_AE','TCP_CH','TCP_CN','TCP_DE','TCP_KR','TCP_MD','TCP_NL','TCP_US','UDP_CL','UDP_GB','UDP_MD','UDP_MT','UDP_US','ALL_FILES_C:/WINDOWS/system32','ANTIDEBUG_TerminateProcess','ANTIDEBUG_UnhandledExceptionFilter','DNS_US','HAS_OVERLAYS','IMPORTS_BIN_CreateFile','IMPORTS_BIN_CreateProcessA','IMPORTS_BIN_DeleteFile','IMPORTS_BIN_DeleteObject','IMPORTS_BIN_ExitProcess','IMPORTS_BIN_FileSize','IMPORTS_BIN_FindFirstFile','IMPORTS_BIN_GetACP','IMPORTS_BIN_GetCPInfo','IMPORTS_BIN_GetCurrentProcess','IMPORTS_BIN_GetFileAttributes','IMPORTS_BIN_GetFileAttributesA','IMPORTS_BIN_GetFullPathName','IMPORTS_BIN_GetShortPathName','IMPORTS_BIN_GetStdHandle','IMPORTS_BIN_GetTempFileName','IMPORTS_BIN_GlobalLock','IMPORTS_BIN_HeapAlloc','IMPORTS_BIN_lstrlenA','IMPORTS_BIN_MoveFile','IMPORTS_BIN_MultiByteToWideChar','IMPORTS_BIN_ReadFile','IMPORTS_BIN_RegCloseKey','IMPORTS_BIN_RtlUnwind','IMPORTS_BIN_SetErrorMode','IMPORTS_BIN_SetFileAttributes','IMPORTS_BIN_SetFileTime','IMPORTS_BIN_WaitForSingleObject','IMPORTS_BIN_WideCharToMultiByte','MALWARE_TYPE','NUM_IMPORTS','NUM_LANG','NUM_PACKERS','OPENED_FILES_//.','OPENED_FILES_C:/DOCUME~1/<USER>~1/LOCALS~1/Temp','OPENED_FILES_C:/WINDOWS','OPENED_FILES_//./PIPE','READ_FILES_C:/WINDOWS/Registration','READ_FILES_C:/WINDOWS/system32','RESOURCE_NUM','SUSP_API_CreateFileW','SUSP_API_FindNextFileA','SUSP_API_FindResourceA','SUSP_API_GetCommandLineA','SUSP_API_GetFileSize','SUSP_API_GetModuleHandleA','SUSP_API_GetTempFileNameA','SUSP_API_GetTickCount','SUSP_API_RegDeleteKeyA','SUSP_API_ShellExecuteA','SUSP_API_Sleep','SUSP_API_VirtualAlloc','SUSP_API_VirtualProtect','SUSP_DLLS_COMCTL32.DLL','SUSP_DLLS_Msvcrt.dll','SUSP_DLLS_OLEAUT32.DLL','SUSP_DLLS_Shell32.dll','SUSP_DLLS_SHLWAPI.dll','SUSP_DLLS_USER32.dll','SUSP_DLLS_version.dll']]

#num=230

#df=df1.iloc[0:20449,0:num]
df=df1

##################################
# IMPUTAMOS VALORES VACIOS
##################################
#X=joblib.load("../tmp/dataset_mas_completo_sin_imphash_sin_ssdeeP_sin_date.joblib.pkl",  mmap_mode='r')
#X=joblib.load("../tmp/dataset_mas_completo_sin_imphash_sin_ssdeeP.joblib.pkl",  mmap_mode='r')

from sklearn.impute import SimpleImputer
imp = SimpleImputer(strategy="most_frequent")
X=imp.fit_transform(df)

##################################
# Standarization
##################################
from sklearn import preprocessing
#df = preprocessing.scale(df)
X = preprocessing.scale(X)

joblib.dump(X, "../tmp/dataset_limpiado_imputado_standarizado_240_features.joblib.pkl")

##################################
# TSNE
##################################

perpl=30

data_dir="../tmp"
data_filename = data_dir + '/tsne_nuevo_desdecero_3D_sindate.npy'
#tsne_nuevo_con15_3d.npy

if argumentos[1]=='1':
	###CALCULAMOS EL TSNE
	tsne = manifold.TSNE(n_components=3, perplexity=perpl)
	Y = tsne.fit_transform(X)
	np.save(data_filename, Y)

if argumentos[1]=='2':
	###O LO ABRIMOS
	Y = np.load(data_filename)


##################################
# PLOTTING
##################################
###Creamos una figura con dos partes
#fig = plt.figure(figsize=(15, 15))
#ax = fig.add_subplot(1, 2, 2)

###Creamos una figura con dos partes
fig = plt.figure(figsize=(15,15))
#ax = fig.add_subplot(1, 1, 1)
ax = fig.add_subplot(111, projection='3d')


########################
#LO MOSTRAMOS POR TIPO
#colors=['gray', 'navy', 'turquoise', 'darkorange', 'red', 'green', 'blue']
#target_names=['Unknown', 'Other', 'Trojan','Worm','Backdoor','Rootkit','Spyware']
#target=[-1, 0, 1,4,2,3,5]
#

########################
#LO MOSTRAMOS POR MALWARE/APT
colors=['red', 'green']
target_names=['Malware','APT']
target=[0, 1]
lista=[0,1]

for color, i, target_name, pos in zip(colors, target, target_names, lista):
                indices=[]
                paraimprimir=[]


                for index in range(0,Y.size/3):
                        if values2[index]==i:
                                indices=np.append(indices,index)

                indices2=indices.astype(np.int64)
                paraimprimir=Y[indices2]
                #plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
                ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
                #ax.plot(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], 'o', s=1, color=color)

plt.title("t-SNE (perplexity: %.2g)" % (perpl))

##########################################
#
#LO MOSTRAMOS POR APT
#ax2 = fig.add_subplot(1, 2, 1)

#ESTOS SON LOS 25 APTS QUE MANEJAMOS ( Mas los textos malware y unknown APT para algun caso que tengo con -1):
#target_names=['Malware', 'Carbanak','CozyDuke','EquationGrp','Duqu2','Regin','NetTraveler','Machete','BlackEnergy','CosmicDuke','MiniDuke','APT1','WildNeutron','Gauss','Flamer','Duqu','Winnti','DarkHotel','APT28', 'Kimsuky','Hellsing','Icefog','Dark Seoul','Careto','Turla','Poseidon','Stuxnet']

#Y ESTOS SON LOS COLORES QUE LES DAMOS (Negro para el desconocido y rosa claro para el malware general):
#colors=['lightpink','firebrick','blue','navy','mediumpurple','gray','chocolate','crimson','lightpink','magenta','purple','red','navajowhite','gold','pink','tan', 'sienna', 'y','yellow','lavender','gray','royalblue','slateblue','orchid','lime','salmon','brown','darkkhaki','silver','brown']

#target=[0,1,2,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,25,26,27,28,29,30,31,32]
#lista=[  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]

#for color, i, target_name, pos in zip(colors, target, target_names, lista):
		#indices=[]
		#paraimprimir=[]
#
		#for index in range(0,Y.size/3):
			#if values3[index]==i:
				#indices=np.append(indices,index)

		#indices2=indices.astype(np.int64)
		#paraimprimir=Y[indices2]
		#if pos==1:
			#plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
		#else:
			#plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=4, c=color, label=target_names[pos])


##################################
# SHOW PLOT
##################################
plt.title("t-SNE (perplexity: %.2g)" % (perpl))
plt.legend(bbox_to_anchor=(0.95,0.98))
ax.xaxis.set_major_formatter(NullFormatter())
ax.yaxis.set_major_formatter(NullFormatter())
plt.axis('tight')
fig.savefig('resultados/DoubleFigTSNEByAPTandMalware_desdecero_3D_sindate_solo230.png')
plt.show()
