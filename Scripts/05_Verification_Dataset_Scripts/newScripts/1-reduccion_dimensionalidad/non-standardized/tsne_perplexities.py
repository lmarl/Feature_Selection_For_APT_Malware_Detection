import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.manifold import TSNE

############################################
# PREPARATIVOS
############################################

###Leemos el dataset
input_file = "../datasets/csv_con_puntos_y_con_num_APTs_final_final_conptoycoma.csv"

df = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int, "NUM_APT":int})

###Separamos los campos que no nos interesan y los campos objetivo
malwaretypes=df.MALWARE_TYPE
apttypes=df.APT
ssdeeptypes=df.SSDEEP
imphashtypes=df.IMPHASH
apttypes=df.APT
numapt=df.NUM_APT

del df['MALWARE_TYPE']
del df['APT']
del df['MD5']
del df['FIRST_SEEN']
del df['SSDEEP']
del df['IMPHASH']
del df['NUM_APT']

###A los campos objetivo, les quitamos las cabeceras
values=malwaretypes.values.astype(np.int64)
values2=apttypes.values.astype(np.int64)

###Eliminamos los campos con alta correlacion
del df['IMPORTS_BINARY_DIST']
del df['all_opened_files_binary_DIST']
del df['all_read_files_binary_DIST']
del df['all_files_binary_DIST']
del df['SUSPICIOUS_DLLS_DIST']
del df['all_written_files_binary_DIST']
del df['all_deleted_files_binary_DIST']
del df['NUM_IMPORTS']
del df['NUM_PACKERS']
del df['PACKERS_BIN_DIST']
del df['LANG_BINARY_DIST']
del df['API_BINARY_DIST']

###Creamos la figura donde dibujaremos los 9 tsnes
fig = plt.figure(figsize=(15, 15))

##################################
# TSNE
##################################
###LANZAMOS EL TSNE
###tsne = manifold.TSNE(n_components=2,init='pca', random_state=0)

colors=['red', 'green']
target_names=['Malware', 'APT']
target=[0, 1]

###Lanzamos el tsne desde 5 hasta 50 en saltos de 5:
for perpl in range (5,55,5):

	###Cada perplejidad la colocamos en una figura
	ax = fig.add_subplot(2, 5, perpl/5)
	tsne = manifold.TSNE(n_components=2, perplexity=perpl)
	Y = tsne.fit_transform(df)

	###Grabamos el TSNE calculado
	data_dir="../tmp"
	data_filename = data_dir + '/tsne_solo24_perpl_is_'+str(perpl)+'.npy'
	np.save(output_filename, Y)

	###Una vez calculado el tsne, anadimos los puntos a la grafica:
	for color, i, target_name, pos in zip(colors, target, target_names, [0,1]):
		indices=[]
		paraimprimir=[]
		for index in range(0,Y.size/2):
			if values2[index]==i:
				indices=np.append(indices,index)

		indices2=indices.astype(np.int64)
		paraimprimir=Y[indices2]
		plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])

	plt.title("t-SNE (perplexity: %.2g)" % (perpl))

##################################
# SHOW PLOT. Finalmente mostramos la figura con las 9 graficas
##################################
ax.xaxis.set_major_formatter(NullFormatter())
ax.yaxis.set_major_formatter(NullFormatter())
plt.legend()
plt.axis('tight')
fig.savefig('resultados/FigTSNE.png')
plt.show()
