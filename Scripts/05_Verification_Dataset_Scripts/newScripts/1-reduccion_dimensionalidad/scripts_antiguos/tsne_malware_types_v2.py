import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.manifold import TSNE
import sys

def syntax_error():
	print "SYNTAX ERROR: Introduce dos argumentos con los siguientes valores"
	print "Primer argumento:"
	print "	1 Quitar todos los campos DIST"
	print "	2 Dejar los campos DIST"
	print
	print "Segundo argumento:"
	print "	1 Recalcular TSNE"
	print "	2 Obtener calculo de la ultima operacion grabada"




	
argumentos=sys.argv
if len(argumentos)!=3:
	syntax_error()
	sys.exit()
else:
	if (argumentos[1]!='1' and argumentos[1]!='2') or (argumentos[2]!='1' and argumentos[2]!='2'):	
		syntax_error()
		sys.exit()
		
############################################
# PREPARATIVOS
############################################

###LEEMOS EL DATASET
input_file="../datasets/csv_con_puntos_y_con_num_APTs_final_final_conptoycoma.csv"

df = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int})

###SEPARAMOS LOS CAMPOS QUE NO NOS INTERESAN Y LOS CAMPOS OBJETIVO
malwaretypes=df.MALWARE_TYPE
apttypes=df.APT
ssdeeptypes=df.SSDEEP
imphashtypes=df.IMPHASH
apttypes=df.APT
numapt=df.NUM_APT

###A LOS CAMPOS OBJETIVO LES QUITAMOS LAS CABECERAS
values=malwaretypes.values.astype(np.int64)
values2=apttypes.values.astype(np.int64)

###ELIMINAMOS LOS CAMPOS QUE NO NOS INTERESAN
del df['MALWARE_TYPE']
del df['APT']
del df['MD5']
del df['FIRST_SEEN']
del df['SSDEEP']
del df['IMPHASH']
del df['NUM_APT']


###ELIMINAMOS LOS CAMPOS CON ALTA CORRELACION
if argumentos[1]==1:
	del df['IMPORTS_BINARY_DIST']
	del df['all_opened_files_binary_DIST']
	del df['all_read_files_binary_DIST']
	del df['all_files_binary_DIST']
	del df['SUSPICIOUS_DLLS_DIST']
	del df['all_written_files_binary_DIST']
	del df['all_deleted_files_binary_DIST']
	del df['NUM_IMPORTS']
	del df['NUM_PACKERS']
	del df['PACKERS_BIN_DIST']
	del df['LANG_BINARY_DIST']
	del df['API_BINARY_DIST']

##################################
# Standarization
##################################
from sklearn import preprocessing
df = preprocessing.scale(df)

##################################
# TSNE
##################################
data_dir="../tmp"
data_filename = data_dir + '/tsne_solo24_perpl30.npy'
if argumentos[2]=='1':
	###LANZAMOS EL TSNE
	tsne =	 manifold.TSNE(n_components=2, random_state=0)
	Y = tsne.fit_transform(df)

	###Si hacemos una reduccion con PCA el grafico es completamente diferente...
	#tsne = manifold.TSNE(n_components=2,init='pca', random_state=0)

	######################
	###Grabamos el TSNE calculado
	np.save(data_filename, Y)
else:
	######################
	###Cargamos el TSNE con perplejidad 30
	Y = np.load(data_filename)


##################################
# PLOTTING
##################################

###Creamos la figura(Un solo grafico)
fig = plt.figure(figsize=(15, 15))
ax = fig.add_subplot(1, 1, 1)

###Determinamos los colores, labels y valores de los diferentes tipos de APTs
colors=['navy', 'turquoise', 'darkorange', 'red', 'green', 'blue']
target_names=['Other', 'Trojan','Worm','Backdoor','Rootkit','Spyware']
target=[0,1,4,2,3,5]

###Por una parte dibujamos los malware en rosa...
colors=['lightpink']
for color, i, target_name, pos in zip(colors, target, target_names, [0,1,2,3,4,5]):
	indicesmalware=[]
	paraimprimirmalware=[]
	for index in range(0,Y.size/2):
		if values2[index]==0:
		#SI ES UN MALWARE NORMAL...
			indicesmalware=np.append(indicesmalware,index)
	indicesmalware2=indicesmalware.astype(np.int64)
	paraimprimirmalware=Y[indicesmalware2]
	plt.scatter(paraimprimirmalware[:, 0], paraimprimirmalware[:, 1], cmap=plt.cm.Spectral, s=1, c="lightpink", label="malware")

	
###Y por otra las APTs en colores...
colors=['navy', 'turquoise', 'darkorange', 'red', 'green', 'blue']
for color, i, target_name, pos in zip(colors, target, target_names, [0,1,2,3,4,5]):
	indices=[]
	paraimprimir=[]
	for index in range(0,Y.size/2):
		if values2[index]!=0 and values[index]==i:
			indices=np.append(indices,index)

	indices2=indices.astype(np.int64)
	paraimprimir=Y[indices2]
	plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
	plt.legend(bbox_to_anchor=(0.98,0.98))


##################################
# SHOW PLOT
##################################
ax.xaxis.set_major_formatter(NullFormatter())
ax.yaxis.set_major_formatter(NullFormatter())
plt.axis('tight')
plt.title("t-SNE (por malware type)" )

fig.savefig('resultados/Fig_TSNE_de-Malware_Y_APTs_por_MalwareTypes.png')
plt.show()
