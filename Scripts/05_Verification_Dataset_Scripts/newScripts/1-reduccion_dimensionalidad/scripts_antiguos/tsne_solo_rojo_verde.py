import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.manifold import TSNE
import sys

def syntax_error():
        print "SYNTAX ERROR: Introduce dos argumentos con los siguientes valores"
        print "Primer argumento:"
        print " 1 Quitar todos los campos DIST"
        print " 2 Dejar los campos DIST"
        print
        print "Segundo argumento:"
        print " 1 Recalcular TSNE"
        print " 2 Obtener calculo de la ultima operacion grabada"


argumentos=sys.argv
if len(argumentos)!=3:
        syntax_error()
        sys.exit()
else:
        if (argumentos[1]!='1' and argumentos[1]!='2') or (argumentos[2]!='1' and argumentos[2]!='2'):
                syntax_error()
                sys.exit()

##################################
# PREPARATIVOS
##################################

###Leemos el dataset
input_file = "../datasets/csv_con_puntos_y_con_num_APTs_final_final_conptoycoma_new_3.csv"

df = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int,"NUM_APT":int})

###Separamos los campos que no nos interesan y campos objetivo
malwaretypes=df.MALWARE_TYPE
ssdeeptypes=df.SSDEEP
imphashtypes=df.IMPHASH
apttypes=df.APT
numapt=df.NUM_APT
md5=df.MD5

print(apttypes[20533])
###Quitamos las cabeceras de los campos objetivo
values=malwaretypes.values.astype(np.int64)
values2=apttypes.values.astype(np.int64)
values3=numapt.values.astype(np.int64)

###Quitamos los campos que no nos interesan
#del df['MALWARE_TYPE']
del df['APT']
del df['MD5']
del df['FIRST_SEEN']
del df['SSDEEP']
del df['IMPHASH']
del df['NUM_APT']

if argumentos[1]=='1':
	del df['IMPORTS_BINARY_DIST']
        del df['all_opened_files_binary_DIST']
        del df['all_read_files_binary_DIST']
        del df['all_files_binary_DIST']
        del df['SUSPICIOUS_DLLS_DIST']
        del df['all_written_files_binary_DIST']
        del df['all_deleted_files_binary_DIST']
        del df['PACKERS_BIN_DIST']
        del df['LANG_BINARY_DIST']
        del df['API_BINARY_DIST']

##################################
# Standarization
##################################
from sklearn import preprocessing
df = preprocessing.scale(df)

##################################
# TSNE
##################################

perpl=30

data_dir="../tmp"
data_filename = data_dir + '/tsne_nuevo.npy'
if argumentos[2]=='1':
	###CALCULAMOS EL TSNE
	###tsne = manifold.TSNE(n_components=2,init='pca', random_state=0)
	tsne = manifold.TSNE(n_components=2, perplexity=perpl)
	Y = tsne.fit_transform(df)
	np.save(data_filename, Y)

if argumentos[2]=='2':
	###O LO ABRIMOS
	Y = np.load(data_filename)


##################################
# PLOTTING
##################################
###Creamos una figura con dos partes
fig = plt.figure(figsize=(15, 15))
ax = fig.add_subplot(1, 1, 1)

########################
#LO MOSTRAMOS POR TIPO
#colors=['gray', 'navy', 'turquoise', 'darkorange', 'red', 'green', 'blue']
#target_names=['Unknown', 'Other', 'Trojan','Worm','Backdoor','Rootkit','Spyware']
#target=[-1, 0, 1,4,2,3,5]
#

########################
#LO MOSTRAMOS POR MALWARE/APT
colors=['red', 'green']
target_names=['Malware','APT']
target=[0, 1]
lista=[0,1]
for color, i, target_name, pos in zip(colors, target, target_names, lista):
		indices=[]
		paraimprimir=[]

		for index in range(0,Y.size/2):
			if values2[index]==i:
				indices=np.append(indices,index)

		indices2=indices.astype(np.int64)
		paraimprimir=Y[indices2]
		plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])

plt.title("t-SNE (perplexity: %.2g)" % (perpl))

##################################
# SHOW PLOT
##################################
plt.title("t-SNE (perplexity: %.2g)" % (perpl))
plt.legend(bbox_to_anchor=(0.95,0.98))
ax.xaxis.set_major_formatter(NullFormatter())
ax.yaxis.set_major_formatter(NullFormatter())
plt.axis('tight')
fig.savefig('resultados/DoubleFigTSNEByAPTandMalware.png')
plt.show()
