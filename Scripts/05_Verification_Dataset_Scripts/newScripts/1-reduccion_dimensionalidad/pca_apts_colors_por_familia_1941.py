import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.externals import joblib
from sklearn import decomposition
import sys

##########
#FICHEROS#
##########
input_file= "../datasets/reducido_a_1941_features_without_NaNs_y_19457_rows.csv"
data_dir="../tmp"
data_filename = data_dir + '/pca_colors_1941.npy'
tmp_file="../tmp/dataset_1941_pca_colors.joblib.pkl"
output_file='resultados/PCA_1941_APT_por_Family.png'

def draw_vector(v0, v1, ax=None):
    ax = ax or plt.gca()
    arrowprops=dict(arrowstyle='->', linewidth=2, shrinkA=0, shrinkB=0)
    ax.annotate('', v1, v0, arrowprops=arrowprops)


##########
#ARGUMENTS#
##########
def syntax_error():
        print "SYNTAX ERROR: Introduce un argumentos con los siguientes valores"
        print " 1 Recalcular PCA"
        print " 2 Obtener calculo de la ultima operacion grabada"
	print
	print "Current input/output values are:"
	print "		Input File:"+input_file
	print "		TMP File:"+tmp_file
	print "		PCA File:"+data_filename
	print "		Output File:"+output_file
	print
	print


argumentos=sys.argv
if len(argumentos)!=2:
        syntax_error()
        sys.exit()
else:
        if (argumentos[1]!='1' and argumentos[1]!='2'):
                syntax_error()
                sys.exit()

##################################
# PREPARATIVOS
##################################

###Leemos el dataset

df = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int,"NUM_APT":int})

###Separamos los campos que no nos interesan y campos objetivo
#malwaretypes=df.MALWARE_TYPE
#ssdeeptypes=df.SSDEEP
#imphashtypes=df.IMPHASH
apttypes=df.APT
numapt=df.NUM_APT
#md5=df.MD5

###Quitamos las cabeceras de los campos objetivo
#values=malwaretypes.values.astype(np.int64)
values2=apttypes.values.astype(np.int64)
values3=numapt.values.astype(np.int64)


###Quitamos los campos que no nos interesan
#del df['MALWARE_TYPE']
del df['APT']
#del df['MD5']
#del df['FIRST_SEEN']
#del df['SSDEEP']
#del df['IMPHASH']
del df['NUM_APT']

import datetime
def convert_to_year(date_in_some_format):
        datetime_object = datetime.datetime.strptime(date_in_some_format, '%d/%m/%Y %H:%M')
        totalmins=(datetime_object-datetime.datetime(1970,1,1)).total_seconds()/60
        return int(totalmins)

#df['DATE'] = df['FIRST_SEEN'].apply(convert_to_year)
#
print df.shape

##################################
# IMPUTAMOS VALORES VACIOS
##################################
#X=joblib.load("../tmp/dataset_mas_completo_sin_imphash_sin_ssdeeP.joblib.pkl",  mmap_mode='r')

#from sklearn.impute import SimpleImputer
#imp = SimpleImputer(strategy="most_frequent")
#X=imp.fit_transform(df)

##################################
# Standarization
##################################
from sklearn import preprocessing
#df = preprocessing.scale(df)
X=df
X = preprocessing.scale(X)

joblib.dump(X, tmp_file)

##################################
# PCA
##################################
perpl=30
#tsne_nuevo_con15_3d.npy

if argumentos[1]=='1':
	###CALCULAMOS EL PCA
	pca = decomposition.PCA(n_components=3)
	Y = pca.fit_transform(X)

	print ("LA VARIANZA PERDIDA ES:")
	print pca.explained_variance_ 

	print ("EL RATIO ES:")
	print pca.explained_variance_ratio_

	#tsne = manifold.TSNE(n_components=3, perplexity=perpl)
	#Y = tsne.fit_transform(X)
	np.save(data_filename, Y)

if argumentos[1]=='2':
	###O LO ABRIMOS
	Y = np.load(data_filename)


##################################
# PLOTTING
##################################
###Creamos una figura con dos partes
#fig = plt.figure(figsize=(15, 15))
#ax = fig.add_subplot(1, 2, 2)

###Creamos una figura con dos partes
fig = plt.figure(figsize=(15,15))
#ax = fig.add_subplot(1, 1, 1)
ax = fig.add_subplot(111, projection='3d')


########################
#LO MOSTRAMOS POR TIPO
#colors=['gray', 'navy', 'turquoise', 'darkorange', 'red', 'green', 'blue']
#target_names=['Unknown', 'Other', 'Trojan','Worm','Backdoor','Rootkit','Spyware']
#target=[-1, 0, 1,4,2,3,5]
#

########################
#LO MOSTRAMOS POR MALWARE/APT
#colors=['red', 'green']
#target_names=['Malware','APT']
#target=[0, 1]
#lista=[0,1]
#
#for color, i, target_name, pos in zip(colors, target, target_names, lista):
#                indices=[]
#                paraimprimir=[]
#
#                for index in range(0,Y.size/3):
#                        if values2[index]==i:
#                                indices=np.append(indices,index)
#
#                indices2=indices.astype(np.int64)
#                paraimprimir=Y[indices2]
#                #plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
#                ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
#                #ax.plot(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], 'o', s=1, color=color)
#
#plt.title("PCA (perplexity: %.2g)" % (perpl))

##########################################
#
#LO MOSTRAMOS POR APT
#ax2 = fig.add_subplot(1, 2, 1)
#ESTOS SON LOS 25 APTS QUE MANEJAMOS ( Mas los textos malware y unknown APT para algun caso que tengo con -1):
target_names=['Malware', 'Carbanak','CozyDuke','EquationGrp','Duqu2','Regin','NetTraveler','Machete','BlackEnergy','CosmicDuke','MiniDuke','APT1','WildNeutron','Gauss','Flamer','Duqu','Winnti','DarkHotel','APT28', 'Kimsuky','Hellsing','Icefog','Dark Seoul','Careto','Turla','Poseidon','Stuxnet']
#Y ESTOS SON LOS COLORES QUE LES DAMOS (Negro para el desconocido y rosa claro para el malware general):
colors=['lightpink','firebrick','blue','navy','mediumpurple','gray','chocolate','crimson','lightpink','magenta','purple','red','navajowhite','gold','pink','tan', 'sienna', 'y','yellow','lavender','gray','royalblue','slateblue','orchid','lime','salmon','brown','darkkhaki','silver','brown']

target=[0,1,2,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,25,26,27,28,29,30,31,32]
lista=[  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]
nn=0
for color, i, target_name, pos in zip(colors, target, target_names, lista):
		indices=[]
		paraimprimir=[]

		for index in range(0,Y.size/3):
			if values3[index]==i:
				indices=np.append(indices,index)

		indices2=indices.astype(np.int64)
		paraimprimir=Y[indices2]
                #ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
		if pos==0:
			#ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:,2], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
			nn=nn+1
		else:
			ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:,2], cmap=plt.cm.Spectral, s=5, c=color, label=target_names[pos])


##################################
# SHOW PLOT
##################################
# plot data
#for length, vector in zip(pca.explained_variance_, pca.components_):
#    v = vector * 3 * np.sqrt(length)
#    draw_vector(pca.mean_, pca.mean_ + v, ax)

plt.axis('equal');
plt.title("PCA")
plt.legend(bbox_to_anchor=(0.95,0.98))
ax.xaxis.set_major_formatter(NullFormatter())
ax.yaxis.set_major_formatter(NullFormatter())
plt.axis('tight')
fig.savefig(output_file)
plt.show()
