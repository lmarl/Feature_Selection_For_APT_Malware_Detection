import numpy as np
from numpy import *
import pandas as pd
from time import time

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter

from sklearn import manifold
input_file = "../datasets/csv_con_puntos_y_con_num_APTs_final_final_conptoycoma.csv"

df = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int,"NUM_APT":int})


##################################################
#Extraemos los campos 'objetivo' y los que no nos interesan
##################################################

malwaretypes=df.MALWARE_TYPE
ssdeeptypes=df.SSDEEP
imphashtypes=df.IMPHASH
isapt=df.APT
numapt=df.NUM_APT

values=malwaretypes.values.astype(np.int64)
values2=isapt.values.astype(np.int64)
values3=numapt.values.astype(np.int64)

#del df['MALWARE_TYPE']
del df['APT']
del df['MD5']
del df['FIRST_SEEN']
del df['SSDEEP']
del df['IMPHASH']
del df['NUM_APT']

############################################
# ELIMINAMOS LOS CAMPOS CON ALTA CORRELACION
############################################
#del df['IMPORTS_BINARY_DIST']
#del df['all_opened_files_binary_DIST']
#del df['all_read_files_binary_DIST']
#del df['all_files_binary_DIST']
#del df['SUSPICIOUS_DLLS_DIST']
#del df['all_written_files_binary_DIST']
#del df['all_deleted_files_binary_DIST']
#del df['NUM_IMPORTS']
#del df['NUM_PACKERS']
#del df['PACKERS_BIN_DIST']
#del df['LANG_BINARY_DIST']
#del df['API_BINARY_DIST']


##################################
# Preparando Training y Testing sets
##################################
#
#Barajamos las muestras. Realmente lo que se barajan son los indices.
shuffle_index=np.random.permutation(17000)

#Nos quedamos con los valores, descartando las cabeceras
df3=df.values
df=df.values

#X_train son las 17000 primeras muestras. X_test son las 3547 ultimas muestras
#Y_train es un 0 o un 1 por cada una de esas 17000 muestras indicando si se trata de un APT o no
#Y_test es un 0 o un 1 por cada una de esas 3547 muestras indicando si se trata de un APT o no
X_train,X_test,Y_train,Y_test=df[:17000],df[17000:],isapt[:17000],isapt[17000:]

#Calculamos un test set con el mismo numero de malware que de APTs
total=200
numAPT=0
numMAL=0
XequalSet=[]
YequalSet=pd.Series()
numTotal=1
for i in range(1,20547):
	if numAPT<total and isapt[i]==1:
		a=np.array(df[i])
		XequalSet.append(a)
		YequalSet = YequalSet.set_value(numTotal, isapt[i])
		numAPT+=1
		numTotal+=1
		
	if numMAL<total and isapt[i]==0:
		a=np.array(df[i])
		XequalSet.append(a)
		YequalSet = YequalSet.set_value(numTotal, isapt[i])
		numMAL+=1
		numTotal+=1

	if numAPT>=total and numMAL>=total:
		break

XequalSet = np.array(XequalSet)


###########################################
# TARGET VECTORS
###########################################
#Pasamos de valores 0 o 1 a valores true or false:
Y_train_APT=(Y_train == 1)
Y_test_APT=(Y_test == 1)

###########################################
# Random Forest Classifier
###########################################
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import cross_val_score

#Creamos el clasificador. El random_state value no deberia afectar
forest_clf = RandomForestClassifier(random_state=42)

#Y lo entrenamos con el training Set
forest_clf.fit(X_train, Y_train_APT)

##Calculamos (A mano) el porcentaje de aciertos. Lo hacemos con los valores del test set
acierto=0
total=0
for i in range(17000,20547):
	total=total+1
	ej=df3[i]
	prediction=forest_clf.predict([ej])

	#print i, prediction, isapt[i]
	if (prediction) and isapt[i]==1:
		acierto=acierto + 1
	if (not prediction) and isapt[i]==0:
		acierto=acierto + 1
media=0.0
media=100.0*acierto / total*1.0
print "\n",acierto," aciertos de ",total,"intentos (",media,"%)"


##Y ahora hacemos la prediccion con la funcion de sklearn predict:
y_test_pred=cross_val_predict(forest_clf, X_test, Y_test_APT, cv=3)

#En y_test_pred se ha almacenado el array de predicciones

print "\nCross Validation de SKLEARN. Lo intentamos con 7 foldings:"
print "%porcentaje de acierto....", cross_val_score(forest_clf, X_test, Y_test_APT, cv=7, scoring="accuracy")*100

###########
# Confusion Matrix
###########
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_score, recall_score

print "\nConfusion Matrix"
print confusion_matrix(Y_test_APT,y_test_pred)

print "\nPrecision Score:"
print precision_score(Y_test_APT,y_test_pred) 
print "\nRecall Score:"
print recall_score(Y_test_APT,y_test_pred) 


#########
# ROC Curve
#
# Esta grafica nos permite decidir cual de los clasificadores son mejores
###########
from sklearn.metrics import roc_curve

#Aqui Obtenemos probabilidades, a partir de los sets de training de cada clase
y_probabilities_forest=cross_val_predict(forest_clf, X_train, Y_train_APT, cv=3, method="predict_proba")

#Esto devuelve un array del tipo( Probabilidades de que si, probabilidades de que no):
#[[1.  0. ]
# [1.  0. ]
# ...
# [0.7 0.3]
# [0.6 0.4]
# [0.  1. ]]

print "\nROC Curve"
fig = plt.figure(figsize=(15, 15))
y_scores_forest=y_probabilities_forest[:,1]
fpr_forest, tpr_forest, threshold_forest=roc_curve(Y_train_APT,y_scores_forest)


plt.plot(fpr_forest, tpr_forest, linewidth=2, label=None)
plt.plot([0,1],[0,1],"k--")
plt.axis([0,1,0,1])
plt.xlabel("False Positive rate")
plt.ylabel("True Positive rate")
plt.legend()
plt.show()
plt.savefig('resultados/Roc_Curve_With_RandomForest.png')

###########
# ROC AUC (Area under Curve) Score
###########
from sklearn.metrics import roc_auc_score

print "\nROC AUC Score"
print roc_auc_score(Y_train_APT, y_scores_forest)


###########
# Classification Report
###########
from sklearn.metrics import classification_report
print(classification_report(Y_test_APT, y_test_pred, target_names=["Malware","APT"]))






###########################################
# AHORA INTENTAMOS CON UN TEST SET QUE TENGA EL MISMO NUMERO DE APTs Y MALWARE
###########################################
#Pasamos de valores 0 o 1 a valores true or false:
Y_test_equal=(YequalSet == 1)

###########################################
# Random Forest Classifier
###########################################

###
##Y luego lo calculamos con la funcion de sklearn predict:
y_test_equal_pred=cross_val_predict(forest_clf, XequalSet, Y_test_equal, cv=3)

##Calculamos el porcentaje de aciertos. Primero lo hacemos a mano...
YY=YequalSet.values
acierto=0
total=0
for i in range(0,400):
	total=total+1
	ej=XequalSet[i]
	prediction=forest_clf.predict([ej])

	if (prediction) and YY[i]==1:
		acierto=acierto + 1
	if (not prediction) and YY[i]==0:
		acierto=acierto + 1
media=0.0
media=100.0*acierto / total*1.0
print "\n",acierto," aciertos de ",total,"intentos (",media,"%)"




###########
# Confusion Matrix
###########

print "\nConfusion Matrix"
print confusion_matrix(Y_test_equal,y_test_equal_pred)

print "\nPrecision Score:"
print precision_score(Y_test_equal,y_test_equal_pred) 
print "\nRecall Score:"
print recall_score(Y_test_equal,y_test_equal_pred) 


###########
# ROC AUC Score
###########
from sklearn.metrics import roc_auc_score
y_scores_forest=y_probabilities_forest[:,1]

print "\nROC AUC Score"
print roc_auc_score(Y_train_APT, y_scores_forest)


###########
# Classification Report
###########
from sklearn.metrics import classification_report
print(classification_report(Y_test_equal, y_test_equal_pred, target_names=["Malware","APT"]))
