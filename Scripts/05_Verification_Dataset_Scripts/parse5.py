import json
from pprint import pprint
import ast
import os
import sys

insert_text=""

def sanitize (cad):
	return cad.replace(" ", "_").replace("-","_").replace("\\","/").replace("'","")

#Convierte el contenido de una lista en una ristra de secuencias INSERT y UPDATE	
def parse_list (campo, l, insert_text):
	First=True
	for i in l:
	   if type(i) == dict:
#            	print "\n\nTABLE: ", campo
		print_dict_rec(i)
	   else:
		if campo:
			if First:
	   			cad= ""+insert_text+" set "+sanitize(campo)+" = '"+sanitize(i)+"' where MD5='"+MD5+"'"
				First=False
			else:
	   			cad=cad+", "+sanitize(campo)+" = '"+sanitize(i)+"' where MD5='"+MD5+"'"
			
		print cad+";"			

#Convierte el contenido de un diccionario en una ristra de secuencias INSERT y UPDATE	
def print_dict_rec( indict ):
  global insert_text
  if indict is not None:
    for majorkey, subdict in indict.iteritems():
	 if type(subdict) == list:
	    #Si son listas y no estan vacias
	    if subdict and insert_text=="":
	    	print "\nINSERT INTO "+ sanitize(str(majorkey))+" (MD5) VALUES('"+MD5+"');"
	    	insert_text="UPDATE "+ sanitize(str(majorkey))
	    parse_list(majorkey,subdict, str(insert_text))
	    insert_text=""
         elif type(subdict) == dict:
	    print "\nINSERT INTO "+ sanitize(str(majorkey))+" (MD5) VALUES('"+MD5+"');"
	    insert_text="UPDATE "+ sanitize(str(majorkey))
            print_dict_rec(subdict)
	    insert_text=""
         else:
	    if subdict is not None:
		try:
			if (str(majorkey)=='update'):
				majorkey="updates"

            		print ""+insert_text+" set "+sanitize(str(majorkey))+" = '"+str(subdict) +"' where MD5='"+MD5+"';"
		
		except:
			print ""	

if len(sys.argv)!=2:
	print "\nError: Se necesita un argumento.\n"
	exit(98)
	
m=sys.argv[1]
mypath=os.path.join(m, "")

if not os.path.isdir(os.path.join(m, "")): 
	print "\nError: El parametro no es un directorio.\n"
	exit(99)

print "LOCK TABLES extra WRITE, FileSystem WRITE, HOOKING WRITE, HOSTS_FILE WRITE, mutex WRITE, TCP WRITE, UDP WRITE, DNS WRITE, HTTP WRITE, processes WRITE, RUNTIME_DLLS WRITE, exiftool WRITE, ALYac WRITE, AVG WRITE, AVware WRITE, Ad_Aware WRITE, AegisLab WRITE, Agnitum WRITE, AhnLab_V3 WRITE, Alibaba WRITE, Antiy_AVL WRITE, Arcabit WRITE, Avast WRITE, Avira WRITE, Baidu_International WRITE, BitDefender WRITE, Bkav WRITE, ByteHero WRITE, CAT_QuickHeal WRITE, CMC WRITE, CRC WRITE, ClamAV WRITE, Commtouch WRITE, Comodo WRITE, Cyren WRITE, DNS WRITE, DrWeb WRITE, ESET_NOD32 WRITE, Emsisoft WRITE, F_Prot WRITE, F_Secure WRITE, FileSystem WRITE, Fortinet WRITE, GData WRITE, GENERAL WRITE, HASHES WRITE, HOOKING WRITE, HOSTS_FILE WRITE, HTTP WRITE, Ikarus WRITE, Jiangmin WRITE, K7AntiVirus WRITE, K7GW WRITE, Kaspersky WRITE, Kingsoft WRITE, Malwarebytes WRITE, McAfee WRITE, McAfee_GW_Edition WRITE, MicroWorld_eScan WRITE, Microsoft WRITE, NANO_Antivirus WRITE, Norman WRITE, PACKERS2 WRITE, PE WRITE, PE_Resource_detail WRITE, PE_Resources WRITE, PE_Sections WRITE, Panda WRITE, Qihoo_360 WRITE, RUNTIME_DLLS WRITE, Rising WRITE, SIGCHECK WRITE, SUPERAntiSpyware WRITE, Sophos WRITE, Symantec WRITE, TCP WRITE, Tencent WRITE, TheHacker WRITE, TotalDefense WRITE, TrendMicro WRITE, TrendMicro_HouseCall WRITE, UDP WRITE, VBA32 WRITE, VIPRE WRITE, ViRobot WRITE, Zillya WRITE, Zoner WRITE, autostart WRITE, clamav WRITE, counter_signers_details WRITE, deepguard WRITE, eSafe WRITE, exiftool WRITE, exports WRITE, filetype WRITE, imports WRITE, imports2 WRITE, links WRITE, mutex WRITE, nProtect WRITE, netguids WRITE, opened_managers WRITE, overlay WRITE, packers WRITE, pescan WRITE, pescanner WRITE, processes WRITE, resources WRITE, samples WRITE, services WRITE, shellcmds WRITE, signers_details WRITE, submission_names WRITE, suspicious_sections WRITE, trendmicro_heuristics WRITE, verinfo WRITE, windows_searched WRITE, yara WRITE;"

for f in os.listdir(mypath):

 if f.endswith('.report') and os.path.isfile(os.path.join(mypath, f)):
  ########################################
  #Abrimos el fichero y lo hacemos legible
  #with open('VTDL000578397FB06052C58738B38E3E800A.json') as data_file:    
  print f
  with open(os.path.join(mypath, f)) as data_file:    
    file_content=data_file.read()
    aaa=ast.literal_eval(file_content)

  FILE_SUMMARY=aaa['FILE_SUMMARY']
  BEHAVIOUR_SUMMARY=aaa['BEHAVIOUR_SUMMARY']
  #BEHAVIOURS=aaa['BEHAVIOURS']
  #CONTACTED_DOMAINS=aaa['CONTACTED_DOMAINS']
  #CONTACTED_IPS=aaa['CONTACTED_IPS']
  #CONTACTED_URLS=aaa['CONTACTED_URLS']

  MD5=FILE_SUMMARY['data']['attributes']['md5']

  #######################
  #    BEHAVIOUR
  #######################
  ####print_dict_rec(aaa['additional_info']['behaviour-v1'])
  #La mayor parte del fichero es un diccionario llamado data
  
  #Dentro de behaviour-v1 estan los sudiccionarios:
  #- extra
  #- filesystem
  #- hooking
  #- hosts_file
  #- mutex
  #- network
  #- process
  #- registry
  #- runtime-dlls
  #- service


  if 'attributes' in FILE_SUMMARY['data']:


	#########
	#extra
	#########
	#First=True
	#if FILE_SUMMARY['data']['attributes']['authentihash']:
	#	print "TESSSSSSSSSSSSSSSS');"	
	#	for i in aaa['additional_info']['behaviour-v1']['extra']:
	#		if First:
	#   			cad="INSERT INTO extra VALUES (0,'"+MD5+"','"+sanitize(str(i))+"')"
	#			First=False
	#		else:
	#			cad=cad+" , (0,'"+MD5+"','"+sanitize(str(i))+"')"
#	
#		print cad+";"


	#########
	#filesystem
	#########
	if 'file_copied' in BEHAVIOUR_SUMMARY['data']:
	   for destination, source in BEHAVIOUR_SUMMARY['data']['files_copied'].iteritems():
		print "INSERT INTO Copied_Files VALUES(0,'"+MD5+"','""','"+sanitize(str(fil['source']))+"','"+sanitize(str(fil['destination']))+"','"+str(fil['success'])+"');"
	
        if 'files_deleted' in BEHAVIOUR_SUMMARY['data']:
	   for path in BEHAVIOUR_SUMMARY['data']['files_deleted']:
		print "INSERT INTO FileSystem VALUES(0,'"+MD5+"','Deleted','"+sanitize(str(path))+"','True','');"
		
        if 'files_opened' in BEHAVIOUR_SUMMARY['data']:
	   for path in BEHAVIOUR_SUMMARY['data']['files_opened']:
		print "INSERT INTO FileSystem VALUES(0,'"+MD5+"','Opened','"+sanitize(str(path))+"','True','');"

        if 'files_written' in BEHAVIOUR_SUMMARY['data']:
	   for path in BEHAVIOUR_SUMMARY['data']['files_written']:
		print "INSERT INTO FileSystem VALUES(0,'"+MD5+"','Written','"+sanitize(str(path))+"','True','');"

        if 'files_dropped' in BEHAVIOUR_SUMMARY['data']:
	   for path in BEHAVIOUR_SUMMARY['data']['files_dropped']:
		print "INSERT INTO FileSystem VALUES(0,'"+MD5+"','Created','"+sanitize(str(path))+"','True','');"

	#########
	#hooking
	#########
	#print "INSERT INTO HOOKING (MD5) VALUES ('"+MD5+"');"	
	#insert_text="UPDATE HOOKING"
	#parse_list("",aaa['additional_info']['behaviour-v1']['hooking'],"UPDATE HOOKING ")

	#########
	#hosts_file
	#########
	#if 'hosts_file' in aaa['additional_info']['behaviour-v1']:
		#if aaa['additional_info']['behaviour-v1']['hosts_file'] is not None:
			#print "INSERT INTO HOSTS_FILE VALUES(0,'"+MD5+"', '"+sanitize(''.join(aaa['additional_info']['behaviour-v1']['hosts_file'].splitlines()))+"');" 

	#########
	#mutex
	#########
	#print_dict_rec(aaa['additional_info']['behaviour-v1']['mutex'])
	#First=True
	#for type_key, type_values in aaa['additional_info']['behaviour-v1']['mutex'].iteritems():
		#if type_values:
			#for mut in type_values:
				#if First:
					#cad="INSERT INTO mutex VALUES(0,'"+MD5+"','"+sanitize(str(type_key))+"','"+sanitize(mut['mutex'])+"','"+sanitize(str(mut['success']))+"')"
					#First=False
				#else:
					#cad=cad+", (0,'"+MD5+"','"+sanitize(str(type_key))+"','"+sanitize(mut['mutex'])+"','"+sanitize(str(mut['success']))+"')"

			#print cad+";"

	#########
	#network
	#########
	#print_dict_rec(aaa['additional_info']['behaviour-v1']['network'])
        if 'dns_lookups' in BEHAVIOUR_SUMMARY['data']:
            for lookup in BEHAVIOUR_SUMMARY['data']['dns_lookups']:
                if 'resolved_ips' in lookup:
                   for ip in lookup['resolved_ips']:
			print "INSERT INTO DNS VALUES(0,'"+MD5+"','"+lookup['hostname']+"','"+ip+"','','');"

        if 'ip_traffic' in BEHAVIOUR_SUMMARY['data']:
            for traffic in BEHAVIOUR_SUMMARY['data']['ip_traffic']:
                if 'transport_layer_protocol' in traffic:
                   if traffic['transport_layer_protocol']=="TCP":
                        if 'destination_port' in traffic:
			   print "INSERT INTO TCP VALUES(0,'"+MD5+"','"+str(traffic['destination_ip'])+"',"+str(traffic['destination_port'])+",'','');"
                        else:
			   print "INSERT INTO TCP VALUES(0,'"+MD5+"','"+str(traffic['destination_ip'])+"',"",'','');"
                   if traffic['transport_layer_protocol']=="UDP":
                        if 'destination_port' in traffic:
			   print "INSERT INTO UDP VALUES(0,'"+MD5+"','"+str(traffic['destination_ip'])+"',"+str(traffic['destination_port'])+",'','');"
                        else:
			   print "INSERT INTO UDP VALUES(0,'"+MD5+"','"+str(traffic['destination_ip'])+"',"",'','');"

			#if (type_key=='http'):
				#for connection in type_values:
					##print connection
					#print "INSERT INTO HTTP VALUES(0,'"+MD5+"','"+str(connection['method'])+"','"+str(connection['url'])+"','"+str(connection['user-agent'])+"');"


	#########
	#process
	#########
	#print_dict_rec(aaa['additional_info']['behaviour-v1']['process'])
	#for type_key, type_values in aaa['additional_info']['behaviour-v1']['process'].iteritems():
		#if type_values:
			#if (type_key=='created') | (type_key=='terminated') | (type_key=='injected'):
				#for process in type_values:
					#print "INSERT INTO processes VALUES(0,'"+MD5+"','"+sanitize(str(type_key))+"','"+sanitize(process['proc'])+"','"+sanitize(str(process['success']))+"');"
					
			#if (type_key=='shellcmds'):
				#for process in type_values:
					#print "INSERT INTO shellcmds VALUES(0,'"+MD5+"','"+sanitize(str(type_key))+"','"+sanitize(process['cmd'])+"','"+sanitize(str(process['success']))+"');"
					

	#########
	#registry
	#########
	#print_dict_rec(aaa['additional_info']['behaviour-v1']['registry'])

	#########
	#runtime-dlls
	#########
	First=True
	cad=""
	if 'modules_loaded' in BEHAVIOUR_SUMMARY['data']:
	   for files in BEHAVIOUR_SUMMARY['data']['modules_loaded']:
	       cad="INSERT INTO RUNTIME_DLLS VALUES (0,'"+MD5+"','"+sanitize(str(files))+"','True')"
	       print cad+";"
               cad=""

	#########
	#service
	#########
	#print_dict_rec(aaa['additional_info']['behaviour-v1']['service'])
	if 'services_created' in BEHAVIOUR_SUMMARY['data']:
	   for service in BEHAVIOUR_SUMMARY['data']['services_created']:
		print "INSERT INTO services VALUES(0,'"+MD5+"','created','"+sanitize(service)+"','True');"
			
	if 'services_opened' in BEHAVIOUR_SUMMARY['data']:
	   for service in BEHAVIOUR_SUMMARY['data']['services_opened']:
		print "INSERT INTO services VALUES(0,'"+MD5+"','opened','"+sanitize(service)+"','True');"
	
        if 'services_started' in BEHAVIOUR_SUMMARY['data']:
	   for service in BEHAVIOUR_SUMMARY['data']['services_started']:
		print "INSERT INTO services VALUES(0,'"+MD5+"','started','"+sanitize(service)+"','True');"

	#########
	#windows_searched
	#########
	#print_dict_rec(aaa['additional_info']['behaviour-v1']['windows'])
	#First=True
	#for w in aaa['additional_info']['behaviour-v1']['windows']['searched']:
	#	if w:
	#		if First:
	#			cad= "INSERT INTO windows_searched VALUES(0,'"+MD5+"','"+sanitize(w['class'])+"','"+sanitize(w['name'])+"')"
	#			First=False
	#		else:
	#			cad=cad+ ", (0,'"+MD5+"','"+sanitize(w['class'])+"','"+sanitize(w['name'])+"')"
	#print cad+";"				


  #######################
  #  EXIFTOOL
  #######################
  #if 'exiftool' in aaa['additional_info']:
#	print "\nINSERT INTO exiftool (MD5) values('"+MD5+"');"
#	insert_text="UPDATE exiftool"
#	print_dict_rec(aaa['additional_info']['exiftool'])

  #######################
  #  EXPORTS
  #######################
  First=True
  if 'pe_info' in FILE_SUMMARY['data']['attributes']:
     if 'exports' in  FILE_SUMMARY['data']['attributes']['pe_info']:
         for ex in FILE_SUMMARY['data']['attributes']['pe_info']['exports']:
		cad= "\nINSERT INTO exports values(0,'"+MD5+"','"+sanitize(ex)+"')"
	        print cad+";"

  #######################
  #  IMPORTS
  #######################
  if 'pe_info' in FILE_SUMMARY['data']['attributes']:
     if 'import_list' in  FILE_SUMMARY['data']['attributes']['pe_info']:
        for impor in FILE_SUMMARY['data']['attributes']['pe_info']['import_list']:
            for function in impor['imported_functions']:
		cad="\nINSERT INTO imports2 values(0,'"+MD5+"', '"+sanitize(impor['library_name'])+"', '"+sanitize(function)+"' )"
	        print cad+";"
				
  #######################
  #   Filetype 
  #######################
  if 'magic' in FILE_SUMMARY['data']['attributes']:
  	print "\nINSERT INTO filetype values(0,'"+MD5+"', '"+FILE_SUMMARY['data']['attributes']['magic']+"');"

  #######################
  #    PE
  #######################
  if 'pe_info' in FILE_SUMMARY['data']['attributes']:
     if 'timestamp' in  FILE_SUMMARY['data']['attributes']['pe_info']:
	p1=str(FILE_SUMMARY['data']['attributes']['pe_info']['timestamp'])
     else:
	p1=""
  else:
     p1=""

  if 'pe_info' in FILE_SUMMARY['data']['attributes']:
     if 'imphash' in  FILE_SUMMARY['data']['attributes']['pe_info']:
	p2=str(FILE_SUMMARY['data']['attributes']['pe_info']['imphash'])
     else:
	p2=""
  else:
     p2=""

  if 'pe_info' in FILE_SUMMARY['data']['attributes']:
     if 'entry_point' in  FILE_SUMMARY['data']['attributes']['pe_info']:
	p3=str(FILE_SUMMARY['data']['attributes']['pe_info']['entry_point'])
     else:
	p3=""
  else:
     p3=""

  if 'pe_info' in FILE_SUMMARY['data']['attributes']:
     if 'machine_type' in  FILE_SUMMARY['data']['attributes']['pe_info']:
	p4=str(FILE_SUMMARY['data']['attributes']['pe_info']['machine_type'])
     else:
	p4=""
  else:
     p4=""

  print "\nINSERT INTO PE values(0,'"+MD5+"', '"+p3+"', '"+p2+"','"+p4+"','"+p1+"');"

  #############
  ###OVERLAY###
  #############
  if 'pe_info' in FILE_SUMMARY['data']['attributes']:
     if 'overlay' in  FILE_SUMMARY['data']['attributes']['pe_info']:
        overlay=FILE_SUMMARY['data']['attributes']['pe_info']['overlay']
	print "\nINSERT INTO overlay values('"+MD5+"', "+str(overlay['entropy'])+", '"+sanitize(str(overlay['filetype']))+"','"+sanitize(str(overlay['md5']))+"',"+sanitize(str(overlay['offset']))+","+sanitize(str(overlay['size']))+");"

  #############
  ##RESOURCE###
  #############
  ####faltan los resource-langs y los resource-types
  if 'pe_info' in FILE_SUMMARY['data']['attributes']:
     if 'resource_details' in  FILE_SUMMARY['data']['attributes']['pe_info']:
	for resource in FILE_SUMMARY['data']['attributes']['pe_info']['resource_details']:
		cad= "\nINSERT INTO PE_Resource_detail values(0,'"+MD5+"', '"+resource['filetype']+"', '"+resource['lang']+"','"+resource['sha256']+"', '"+resource['type']+"')"
	        print cad+";"
	

  #First=True
  #if 'pe-resource-parents' in aaa['additional_info']:
	#for resource in aaa['additional_info']['pe-resource-parents']:
		#if First:
			#cad= "\nINSERT INTO PE_Resource_parents values(0,'"+MD5+"','"+resource+"')"
			#First=False
		#else:
			#cad=cad+ ", (0,'"+MD5+"','"+resource+"')"

	#print cad+";"
			

  #############
  ##SECTIONS###
  #############
  if 'pe_info' in FILE_SUMMARY['data']['attributes']:
     if 'sections' in  FILE_SUMMARY['data']['attributes']['pe_info']:
        for section in FILE_SUMMARY['data']['attributes']['pe_info']['sections']:
		cad= "\nINSERT INTO PE_Sections values(0,'"+MD5+"','"+str(section['name'])+"','"+str(section['virtual_address'])+"','"+str(section['virtual_size'])+"','"+str(section['raw_size'])+"','"+str(section['entropy'])+"','"+str(section['md5'])+"')"
	        print cad+";"
			
	
  #print "\nINSERT INTO sections values (MD5='KK')"
  #insert_text="UPDATE sections"
  #print_dict_rec(aaa['additional_info']['sections'])

  #############
  ##SIGCHECK###
  #############
  #n=0
  #m=0
  #if 'sigcheck' in aaa['additional_info']:
  	#print "\nINSERT INTO SIGCHECK (MD5) values ('"+MD5+"');"
	#for key, value in aaa['additional_info']['sigcheck'].iteritems():
	 	#if type(value) == list:
			#if (key=="counter signers details"):
				#for detail in value:
					#print "INSERT INTO counter_signers_details (MD5, num_id) values ('"+MD5+"','"+str(n)+"');"
					#n=n+1
					#for key2, value2 in detail.iteritems():
						#print "UPDATE counter_signers_details set "+sanitize(str(key2))+" = '"+sanitize(str(value2))+"' where MD5='"+MD5+"';"
					
			#elif (key=="signers details"):
				#for detail in value:
					#print "INSERT INTO signers_details (MD5, num_id) values ('"+MD5+"','"+str(m)+"');"
					#m=m+1
					#for key2, value2 in detail.iteritems():
						#print "UPDATE signers_details set "+sanitize(str(key2))+" = '"+sanitize(str(value2))+"' where MD5='"+MD5+"';"
					

				
		#else:
			#try: 
				#print "UPDATE SIGCHECK set "+sanitize(str(key))+" = '"+sanitize(str(value))+"' where MD5='"+MD5+"';"
			#except:
				#print ""
		

  	#insert_text="UPDATE SIGCHECK"
  	#print_dict_rec(aaa['additional_info']['sigcheck'])
		#print "\nINSERT INTO SIGCHECK values('"+MD5+"','"+str(section[0])+"','"+str(section[1])+"','"+str(section[2])+"','"+str(section[3])+"','"+str(section[4])+"','"+str(section[5])+"');"

	
  #############
  ###GENERAL###
  #############
  #if 'suspicious-insight' in aaa['additional_info']:
	#s1=str(aaa['additional_info']['suspicious-insight'])
  #else:
	#s1=""

  ###333 means new Malware
  print "\nINSERT INTO GENERAL values (0,'"+MD5+"','-','-','-','"+str(FILE_SUMMARY['data']['attributes']['first_submission_date'])+"','"+str(FILE_SUMMARY['data']['attributes']['last_submission_date'])+"','"+str(FILE_SUMMARY['data']['attributes']['last_analysis_stats']['harmless'])+"','"+str(FILE_SUMMARY['data']['attributes']['last_analysis_stats']['malicious'])+"','0','"+str(FILE_SUMMARY['data']['attributes']['size'])+"','0','"+str(FILE_SUMMARY['data']['attributes']['times_submitted'])+"','','333');"


  #############
  ###HASHES###
  #############
  if 'authentihash' in FILE_SUMMARY['data']['attributes']:
	a1=str(FILE_SUMMARY['data']['attributes']['authentihash'])
  else:
	a1=""

  a2=""
  a3=""
  a4=""
  if 'pe_info' in FILE_SUMMARY['data']['attributes']:
     if 'sha1' in FILE_SUMMARY['data']['attributes']['pe_info']:
	a2=str(FILE_SUMMARY['data']['attributes']['pe_info']['sha1'])

     if 'sha256' in FILE_SUMMARY['data']['attributes']['pe_info']:
	a3=str(FILE_SUMMARY['data']['attributes']['pe_info']['sha256'])

     if 'ssdeep' in FILE_SUMMARY['data']['attributes']['pe_info']:
	a4=str(FILE_SUMMARY['data']['attributes']['pe_info']['ssdeep'])

  print "\nINSERT INTO HASHES values (0,'"+MD5+"','"+a1+"','"+a2+"','"+a3+"','"+a4+"');"

  #############
  ###SCANS###
  #############
  #print "\nINSERT INTO scans values(MD5='"+MD5+"')"
  #insert_text="UPDATE scans"
  #print_dict_rec(aaa['scans'])

  #############
  ###SUBMISSION NAMES###
  #############
  First=True
  Fail=False
  cad=""
  for i in FILE_SUMMARY['data']['attributes']['names']:
		cad= "\nINSERT INTO submission_names values(0,'"+MD5+"','"+sanitize(str(i))+"')"
  	        print cad+";"

  ##############
  ### LINKS ####
  ##############
  #try:
  # if 'prevx' in aaa['additional_info']:
#	print "\nINSERT INTO links values(0,'"+MD5+"','prevx','"+aaa['additional_info']['prevx']+"');"
##
#   if 'permalink' in aaa:
#	print "\nINSERT INTO links values(0,'"+MD5+"','virustotal','"+aaa['permalink']+"');"
#
#   if 'ITW_urls' in aaa:
#	if aaa['ITW_urls']:
##		print "\nINSERT INTO links values(0,'"+MD5+"','ITW','"+aaa['ITW_urls'][0]+"');"
#		
#   if 'cwsandbox' in aaa['additional_info']:
#		print "\nINSERT INTO links values(0,'"+MD5+"','cwsandbox','"+aaa['additional_info']['cwsandbox']+"');"
#  except:
#	print ""

  #############
  ###PACKERS###
  #############
  if 'pe_info' in FILE_SUMMARY['data']['attributes']:
     if 'packers' in FILE_SUMMARY['data']['attributes']['pe_info']:
	for peid, packer in FILE_SUMMARY['data']['attributes']['pe_info']['packers'].iteritems():
	    print "\nINSERT INTO PACKERS2 values (0,'"+MD5+"','peid','"+sanitize(str(packer))+"');" 

  #if 'f-prot-unpacker' in aaa['additional_info']:
	#print "\nINSERT INTO PACKERS2 values (0,'"+MD5+"','f-prot','"+aaa['additional_info']['f-prot-unpacker']+"');" 

  #if 'command-unpacker' in aaa['additional_info']:
	#print "\nINSERT INTO PACKERS2 values (0,'"+MD5+"','command','"+aaa['additional_info']['command-unpacker']+"');" 

  #############
   ### AUTOSTART ###
  #############
  #if 'pe_info' in aaa['additional_info']:
	#for i in aaa['additional_info']['autostart']:
		#print "\nINSERT INTO autostart values (0,'"+MD5+"','"+i['entry']+"','"+i['location']+"');" 
		#print

  #############
  ### .NET GUID ###
  #############
  #if 'netguids' in aaa['additional_info']:
	#print "\nINSERT INTO netguids values (0,'"+MD5+"','"+aaa['additional_info']['netguids']['mvid']+"');" 

  #############
  ### TRENDMICRO HEURISTIC ###
  #############
  #if 'trendmicro-housecall-heuristic' in aaa['additional_info']:
	#print "\nINSERT INTO trendmicro_heuristics values (0,'"+MD5+"','"+aaa['additional_info']['trendmicro-housecall-heuristic']+"');" 

  #############
  ### DEEPGUARD ###
  #############
  #if 'deepguard' in aaa['additional_info']:
	#print "\nINSERT INTO deepguard values (0,'"+MD5+"','"+aaa['additional_info']['deepguard']+"');" 


  data_file.close()


print "UNLOCK TABLES extra WRITE, FileSystem WRITE, HOOKING WRITE, HOSTS_FILE WRITE, mutex WRITE, TCP WRITE, UDP WRITE, DNS WRITE, HTTP WRITE, processes WRITE, RUNTIME_DLLS WRITE, exiftool WRITE, ALYac WRITE, AVG WRITE, AVware WRITE, Ad_Aware WRITE, AegisLab WRITE, Agnitum WRITE, AhnLab_V3 WRITE, Alibaba WRITE, Antiy_AVL WRITE, Arcabit WRITE, Avast WRITE, Avira WRITE, Baidu_International WRITE, BitDefender WRITE, Bkav WRITE, ByteHero WRITE, CAT_QuickHeal WRITE, CMC WRITE, CRC WRITE, ClamAV WRITE, Commtouch WRITE, Comodo WRITE, Copied_Files WRITE, Cyren WRITE, DNS WRITE, DrWeb WRITE, ESET_NOD32 WRITE, Emsisoft WRITE, F_Prot WRITE, F_Secure WRITE, FileSystem WRITE, Fortinet WRITE, GData WRITE, GENERAL WRITE, HASHES WRITE, HOOKING WRITE, HOSTS_FILE WRITE, HTTP WRITE, Ikarus WRITE, Jiangmin WRITE, K7AntiVirus WRITE, K7GW WRITE, Kaspersky WRITE, Kingsoft WRITE, Malwarebytes WRITE, McAfee WRITE, McAfee_GW_Edition WRITE, MicroWorld_eScan WRITE, Microsoft WRITE, NANO_Antivirus WRITE, Norman WRITE, PACKERS2 WRITE, PE WRITE, PE_Resource_detail WRITE, PE_Resources WRITE, PE_Sections WRITE, Panda WRITE, Qihoo_360 WRITE, RUNTIME_DLLS WRITE, Rising WRITE, SIGCHECK WRITE, SUPERAntiSpyware WRITE, Sophos WRITE, Symantec WRITE, TCP WRITE, Tencent WRITE, TheHacker WRITE, TotalDefense WRITE, TrendMicro WRITE, TrendMicro_HouseCall WRITE, UDP WRITE, VBA32 WRITE, VIPRE WRITE, ViRobot WRITE, Zillya WRITE, Zoner WRITE, autostart WRITE, clamav WRITE, counter_signers_details WRITE, deepguard WRITE, eSafe WRITE, exiftool WRITE, exports WRITE, filetype WRITE, imports WRITE, imports2 WRITE, links WRITE, mutex WRITE, nProtect WRITE, netguids WRITE, opened_managers WRITE, overlay WRITE, packers WRITE, pescan WRITE, pescanner WRITE, processes WRITE, resources WRITE, samples WRITE, services WRITE, shellcmds WRITE, signers_details WRITE, submission_names WRITE, suspicious_sections WRITE, trendmicro_heuristics WRITE, verinfo WRITE, windows_searched WRITE, yara WRITE;"
