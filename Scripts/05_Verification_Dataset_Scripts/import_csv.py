import numpy as np
from numpy import *
import pandas as pd
from time import time

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter

#input_file = "CSV_FINAL4_solo_medias_CSV.csv"
#input_file = "CSV_FINAL6_CON_PUNTOS_ARREGLADO.csv"
input_file = "csv_con_puntos.csv"

# comma delimited is the default
#df = pd.read_csv(input_file, header = 0, sep=';', decimal=',', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":int,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int})

df2 = pd.read_csv(input_file, header = 0, sep=';', dtype={"MD5":object,"FIRST_SEEN":object,"SIZE":int,"NUM_PACKERS":float64,"PACKERS_BIN":float64,"PACKERS_BIN_DIST":float64,"MALWARE_TYPE":object,"NUM_IMPORTS":float64,"IMPORTS_BIN":float64,"IMPORTS_BINARY_DIST":float64,"HAS_OVERLAYS":int,"SUSPICIOUS_DLLS":float64,"SUSPICIOUS_DLLS_DIST":float64,"ANTIDEBUG_BINARY":float64,"ANTIDEBUG_BINARY_DIST":float64,"NUM_LANG":float64,"LANG_BINARY":float64,"LANG_BINARY_DIST":float64,"API_BINARY":float64,"API_BINARY_DIST":float64,"RESOURCE_NUM":int,"SERVICES_BINARY":float64,"SERVICES_BINARY_DIST":float64,"all_files_binary":float64,"all_files_binary_DIST":float64,"all_opened_files_binary":float64,"all_opened_files_binary_DIST":float64,"all_written_files_binary":float64,"all_written_files_binary_DIST":float64,"all_deleted_files_binary":float64,"all_deleted_files_binary_DIST":float64,"all_read_files_binary":float64,"all_read_files_binary_DIST":float64,"UDP_Countries":float64,"UDP_Countries_DIST":float64,"TCP_countries":float64,"TCP_countries_DIST":float64,"DNS_countries":float64,"DNS_countries_DIST":float64,"SSDEEP":int,"IMPHASH":int,"APT":int})

#df=df2.head(9000)
df=df2
malwaretypes=df.MALWARE_TYPE
apttypes=df.APT
ssdeeptypes=df.SSDEEP
imphashtypes=df.IMPHASH
apttypes=df.APT

values=malwaretypes.values.astype(np.int64)
values2=apttypes.values.astype(np.int64)

del df['MALWARE_TYPE']
del df['APT']
del df['MD5']
del df['FIRST_SEEN']
del df['SSDEEP']
del df['IMPHASH']

#df.drop(axis=1, columns=1)
#print df


from sklearn import manifold
##################################
#ISOMAP
##################################
##iso = manifold.Isomap(n_neighbors=6, n_components=6)
#iso = manifold.Isomap(n_neighbors=6, n_components=2)
#iso.fit(df)
#manifold_6Da = iso.transform(df)
##manifold_6D = pd.DataFrame(manifold_6Da, columns=['Component 1', 'Component 2', 'Component 3', 'Component 4', 'Component 5', 'Component 6','Component 7', 'Component 8', 'Component 9', 'Component 10', 'Component 11', 'Component 6','Component 1', 'Component 2', 'Component 3', 'Component 4', 'Component 5', 'Component 6','Component 1', 'Component 2'])
#
##manifold_20D = pd.DataFrame(manifold_6Da, columns=['Component 1', 'Component 2', 'Component 3', 'Component 4', 'Component 5', 'Component 6','Component 7', 'Component 8', 'Component 9', 'Component 10', 'Component 11', 'Component 6','Component 1', 'Component 2', 'Component 3', 'Component 4', 'Component 5', 'Component 6','Component 1', 'Component 2'])
#
#manifold_2D = pd.DataFrame(manifold_6Da, columns=['Component 1', 'Component 2'])
#
#manifold_2D.head()
#print manifold_2D

fig = plt.figure(figsize=(15, 15))
ax = fig.add_subplot(1, 1, 1)


##################################
# PCA
##################################
#from sklearn.decomposition import PCA
#pca=PCA(n_components=2)

#colors=['gray', 'navy', 'turquoise', 'darkorange', 'red', 'green', 'blue']
#target_names=['Unknown', 'Other', 'Trojan','Worm','Backdoor','Rootkit','Spyware']
#target=[-1, 0, 1,4,2,3,5]

#colors=['red', 'green']
#target_names=['Malware', 'APT']
#target=[0, 1]

###AQUI HACEMOS EL PCA
#X2D=pca.fit_transform(df)


###DIBUJAMOS
#for color, i, target_name, pos in zip(colors, target, target_names, [0,1,2,3,4,5,6]):
#for color, i, target_name, pos in zip(colors, target, target_names, [0,1]):
#	indices=[]
#	paraimprimir=[]
#	for index in range(0,X2D.size/2):
#		#if values[index]==i:
#		if values2[index]==i:
#			indices=np.append(indices,index)
#
#	indices2=indices.astype(np.int)
#	paraimprimir=X2D[indices2]
#	plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
#
#plt.legend()

##################################
# TSNE
##################################
from sklearn.manifold import TSNE
t0 = time()

###LANZAMOS EL TSNE
###tsne = manifold.TSNE(n_components=2,init='pca', random_state=0)
tsne = manifold.TSNE(n_components=2)
Y = tsne.fit_transform(df)
#
#colors=['gray', 'navy', 'turquoise', 'darkorange', 'red', 'green', 'blue']
#target_names=['Unknown', 'Other', 'Trojan','Worm','Backdoor','Rootkit','Spyware']
#target=[-1, 0, 1,4,2,3,5]
#
colors=['red', 'green']
target_names=['Malware', 'APT']
target=[0, 1]
#
t1 = time()
#print t1 -t0
###plt.scatter(Y[:, 0], Y[:, 1], cmap=plt.cm.Spectral, s=3, c=color)
#
###LO DIBUJAMOS
##plt.scatter(Y[:, 0], Y[:, 1], cmap=plt.cm.Spectral, s=3)
#
#print Y.size
#
#for color, i, target_name, pos in zip(colors, target, target_names, [0,1,2,3,4,5,6]):
for color, i, target_name, pos in zip(colors, target, target_names, [0,1]):
	indices=[]
	paraimprimir=[]
	for index in range(0,Y.size/2):
		#if values[index]==i:
		if values2[index]==i:
			indices=np.append(indices,index)

	indices2=indices.astype(np.int64)
	paraimprimir=Y[indices2]
	plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=2, c=color, label=target_names[pos])


plt.title("t-SNE (%.2g sec)" % (t1 - t0))
plt.legend()

##################################
# MDS
##################################
#from sklearn.manifold import MDS
#t0 = time()
#mds = manifold.MDS(2, max_iter=100, n_init=1)
#Y = mds.fit_transform(df)
#t1 = time()
#print("MDS: %.2g sec" % (t1 - t0))
#plt.scatter(Y[:, 0], Y[:, 1], c=color, cmap=plt.cm.Spectral,s=3)
#plt.title("MDS (%.2g sec)" % (t1 - t0))


##################################
# KMEANS
##################################
#from sklearn.cluster import KMeans
#from yellowbrick.text import TSNEVisualizer
#tsne = TSNEVisualizer(labels=["MALWARE_TYPE"])

#clusters = KMeans(n_clusters=5)
#clusters.fit(df2)

#tsne.fit(df2, ["c{}".format(c) for c in clusters.labels_])
#tsne.poof()

##################################
# SHOW PLOT
##################################
ax.xaxis.set_major_formatter(NullFormatter())
ax.yaxis.set_major_formatter(NullFormatter())
plt.axis('tight')
plt.show()

