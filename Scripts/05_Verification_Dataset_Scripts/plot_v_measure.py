import numpy as np
from numpy import *
from time import time
import pandas as pd
import sys
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn import manifold
from sklearn.manifold import TSNE
from sklearn.cluster import AffinityPropagation
from sklearn.cluster import MeanShift, estimate_bandwidth
from sklearn.cluster import DBSCAN
from sklearn import metrics
from sklearn.cluster import AgglomerativeClustering
from sklearn.neighbors import kneighbors_graph
import time

##########
#FICHEROS#
##########
input_file= "./datos_vMeasure.csv"
data_dir="../tmp"
tmp_file="../tmp/dataset_1941.joblib.pkl"
data_filename = data_dir + '/tsne_1941_3D_f.npy'
output_file='resultados/kmeans_pre_TSNE_2_groups_1941.png'

start = time.time()
##################################
# PREPARATIVOS
##################################

###Leemos el dataset
df = pd.read_csv(input_file, header = 0, sep=';')
print df
fig, ((ax1, ax8, ax2, ax3),( ax4, ax5, ax6,ax7)) = plt.subplots(2, 4)
#fig, ax1 = plt.subplots()
width=0.35

df2=df[df.EPS==0.2]
x=df2.shape[0]
Vs=df2["V-MEASURE"].values
MinSamples=df2["MIN_SAMPLES"]
Clusters=df2["RECOMMENDED_CLUSTERS"].values
ax1.set_title('EPS=0,2')
for i in range(x):
    rects1 = ax1.bar(i - width/2, 100*Vs[i], width, label='V-Measures', color="orange")
    rects2 = ax1.bar(i + width/2, Clusters[i], width, label='Clusters', color="blue")

for rect in rects1:
    height = rect.get_height()
    ax1.annotate('{}'.format(height/100),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')
for rect in rects2:
    height = rect.get_height()
    ax1.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')

rects1[0].set_color('r')
ax1.set_xticklabels(MinSamples)
ax1.legend()



df2=df[df.EPS==0.3]
x=df2.shape[0]
Vs=df2["V-MEASURE"].values
MinSamples=df2["MIN_SAMPLES"]
Clusters=df2["RECOMMENDED_CLUSTERS"].values
ax8.set_title('EPS=0,3')
for i in range(x):
    rects1 = ax8.bar(i - width/2, 100*Vs[i], width, label='V-Measures', color="orange")
    rects2 = ax8.bar(i + width/2, Clusters[i], width, label='Clusters', color="blue")
for rect in rects1:
    height = rect.get_height()
    ax8.annotate('{}'.format(height/100),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')
for rect in rects2:
    height = rect.get_height()
    ax8.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')

rects1[0].set_color('r')

ax8.set_xticklabels(MinSamples)
ax8.legend()

df2=df[df.EPS==0.6]
x=df2.shape[0]
Vs=df2["V-MEASURE"].values
MinSamples=df2["MIN_SAMPLES"]
Clusters=df2["RECOMMENDED_CLUSTERS"].values
ax2.set_title('EPS=0,6')
for i in range(x):
    rects1 = ax2.bar(i - width/2, 100*Vs[i], width, label='V-Measures', color="orange")
    rects2 = ax2.bar(i + width/2, Clusters[i], width, label='Clusters', color="blue")
for rect in rects1:
    height = rect.get_height()
    ax2.annotate('{}'.format(height/100),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')
for rect in rects2:
    height = rect.get_height()
    ax2.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')

rects1[0].set_color('r')
ax2.set_xticklabels(MinSamples)
ax2.legend()

df2=df[df.EPS==1]
x=df2.shape[0]
Vs=df2["V-MEASURE"].values
MinSamples=df2["MIN_SAMPLES"]
Clusters=df2["RECOMMENDED_CLUSTERS"].values
ax3.set_title('EPS=1')
for i in range(x):
    rects1 = ax3.bar(i - width/2, 100*Vs[i], width, label='V-Measures', color="orange")
    rects2 = ax3.bar(i + width/2, Clusters[i], width, label='Clusters', color="blue")
for rect in rects1:
    height = rect.get_height()
    ax3.annotate('{}'.format(height/100),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')
for rect in rects2:
    height = rect.get_height()
    ax3.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')

ax3.set_xticklabels(MinSamples)
ax3.legend()

df2=df[df.EPS==2]
x=df2.shape[0]
Vs=df2["V-MEASURE"].values
MinSamples=df2["MIN_SAMPLES"]
Clusters=df2["RECOMMENDED_CLUSTERS"].values
ax4.set_title('EPS=2')
for i in range(x):
    rects1 = ax4.bar(i - width/2, 100*Vs[i], width, label='V-Measures', color="orange")
    rects2 = ax4.bar(i + width/2, Clusters[i], width, label='Clusters', color="blue")

ax4.set_xticklabels(MinSamples)
ax4.legend()

df2=df[df.EPS==4]
x=df2.shape[0]
Vs=df2["V-MEASURE"].values
MinSamples=df2["MIN_SAMPLES"]
Clusters=df2["RECOMMENDED_CLUSTERS"].values
ax5.set_title('EPS=4')
for i in range(x):
    rects1 = ax5.bar(i - width/2, 100*Vs[i], width, label='V-Measures', color="orange")
    rects2 = ax5.bar(i + width/2, Clusters[i], width, label='Clusters', color="blue")

ax5.set_xticklabels(MinSamples)
ax5.legend()


df2=df[df.EPS==8]
x=df2.shape[0]
Vs=df2["V-MEASURE"].values
MinSamples=df2["MIN_SAMPLES"]
Clusters=df2["RECOMMENDED_CLUSTERS"].values
ax6.set_title('EPS=8')
for i in range(x):
    rects1 = ax6.bar(i - width/2, 100*Vs[i], width, label='V-Measures', color="orange")
    rects2 = ax6.bar(i + width/2, Clusters[i], width, label='Clusters', color="blue")

ax6.set_xticklabels(MinSamples)
ax6.legend()

df2=df[df.EPS==12]
x=df2.shape[0]
Vs=df2["V-MEASURE"].values
MinSamples=df2["MIN_SAMPLES"]
Clusters=df2["RECOMMENDED_CLUSTERS"].values
ax7.set_title('EPS=12')
for i in range(x):
    rects1 = ax7.bar(i - width/2, 100*Vs[i], width, label='V-Measures', color="orange")
    rects2 = ax7.bar(i + width/2, Clusters[i], width, label='Clusters', color="blue")

ax7.set_xticklabels(MinSamples)
ax7.legend()

#df2=df[df.EPS==24]
#x=df2.shape[0]
#Vs=df2["V-MEASURE"].values
#MinSamples=df2["MIN_SAMPLES"]
#Clusters=df2["RECOMMENDED_CLUSTERS"].values
#ax8.set_title('EPS=24')
#for i in range(x):
#    rects1 = ax8.bar(i - width/2, 100*Vs[i], width, label='V-Measures', color="orange")
#    rects2 = ax8.bar(i + width/2, Clusters[i], width, label='Clusters', color="blue")
#
#ax8.set_xticklabels(MinSamples)
#ax8.legend()



plt.show()
