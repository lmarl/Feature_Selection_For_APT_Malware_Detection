#################################################
#
#   This script generates a plot that shows the visualization 
#   of the t-SNE 3D projection according to the malware samples types
#
#   Author: Luis Martin
#
#################################################


###############
# IMPORTS
###############

import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.manifold import TSNE
from sklearn.externals import joblib
import sys
import datetime
import os
from sklearn import preprocessing

###############
#CONFIGURATION#
###############
input_file= "../datasets/newDatasetFinal5.csv"
data_dir="../tmp"
data_filename = data_dir + '/tsne_1941_3D_e.npy'
tmp_file="../tmp/dataset_1941_malware_types.joblib.pkl"
output_file='../results/TSNE_1941_by_MalwareTypes.png'
perpl=30


##########
#ARGUMENTS#
##########
def syntax_error():
        print "SYNTAX ERROR: Introduce a single argument with the following values:"
        print " 1 Recalculate TSNE"
        print " 2 Obtain TSNE from last saved operation"
	print
	print "Current input/output values are:"
	print "		Input File:"+input_file
	print "		TMP File:"+tmp_file
	print "		TSNE File:"+data_filename
	print "		Output File:"+output_file
	print
	print

argumentos=sys.argv
if len(argumentos)!=2:
        syntax_error()
        sys.exit()
else:
        if (argumentos[1]!='1' and argumentos[1]!='2'):
                syntax_error()
                sys.exit()


##################################
# PRELIMINAR TASKS
##################################
os.system("clear")
#Read dataset
print ("Reading CSV...")
df = pd.read_csv(input_file, header = 0)
print ("Read!!!")

total_muestras=df.shape[0]
a = [0] * total_muestras
df.insert(2, "isWorm", a, True)

## Extract target fields
isapt=df.isAPT
numapt=df.NUMAPT
np.set_printoptions(threshold=np.nan)
values2=isapt.values.astype(np.int64)
values3=numapt.values.astype(np.int64)

##Extract malware type
m1 = (df.isTypeUnknown >0)
m2 = (df.isOtherType >0)
m3 = (df.isTrojan >0)
m5 = (df.isBackdoor >0)
m6 = (df.isRootkit >0)
m7 = (df.isSpyware >0)

values = np.select([m1, m2, m3,m5,m6,m7], [-1,0,1,2,3,5], default=0)

del df['isAPT']
del df['NUMAPT']
del df['MD5']


##################################
# Standarization
##################################
X=df
print ("Standarizing...")
X = preprocessing.scale(X)
joblib.dump(X, tmp_file)
print ("Dumped!!!")
	
##################################
# TSNE
##################################
	
if argumentos[1]=='1':
		tsne = manifold.TSNE(n_components=3, perplexity=perpl)
                print ("Calculating TSNE... This will take a long time (about 40 min)")
		Y = tsne.fit_transform(X)
                print ("Finished!!!")
		np.save(data_filename, Y)

if argumentos[1]=='2':
	    print ("Reading NPY file...")
	    Y = np.load(data_filename)
            print ("Read!!!")


##################################
# PLOTTING
##################################

###Create a single figure with two parts
fig = plt.figure(figsize=(15,15), dpi=100)
ax = fig.add_subplot(111, projection='3d')

lista=[0,1,2,3,4,5]

colors=['gray', 'navy', 'turquoise',  'red', 'green', 'blue']
target_names=['Unknown', 'Other', 'Trojan','Backdoor','Rootkit','Spyware']
target=[-1,0,1,2,3,5]


for color, i, target_name, pos in zip(colors, target, target_names, lista):
		indices=[]
		paraimprimir=[]
#
		for index in range(0,Y.size/3):
			if values[index]==i:
				indices=np.append(indices,index)

		indices2=indices.astype(np.int64)
		paraimprimir=Y[indices2]
		ax.scatter(paraimprimir[:,0], paraimprimir[:,1], paraimprimir[:,2],cmap=plt.cm.Spectral,s=1,c=color,label=target_names[pos])

##################################
# SHOW PLOT
##################################
ax.legend(bbox_to_anchor=(1.10,0.98))
plt.axis('tight')
fig.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)
fig.savefig(output_file, bbox_inches='tight')
plt.show()
