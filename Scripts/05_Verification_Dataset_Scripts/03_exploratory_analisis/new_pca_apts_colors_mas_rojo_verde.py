import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.externals import joblib

from sklearn import decomposition
import sys

def syntax_error():
        print "SYNTAX ERROR: Introduce dos argumentos con los siguientes valores"
        print "Primer argumento:"
        print " 1 Recalcular PCA"
        print " 2 Obtener calculo de la ultima operacion grabada"


argumentos=sys.argv
if len(argumentos)!=2:
        syntax_error()
        sys.exit()
else:
        if (argumentos[1]!='1' and argumentos[1]!='2') :
                syntax_error()
                sys.exit()

##################################
# PREPARATIVOS
##################################

###Leemos el dataset
input_file = "../datasets/newDatasetFinal.csv"

df = pd.read_csv(input_file, header = 0)

###Separamos los campos que no nos interesan y campos objetivo
apttypes=df.isAPT
md5=df.MD5

sys.exit

###Quitamos las cabeceras de los campos objetivo
values2=apttypes.values.astype(np.int64)

###Quitamos los campos que no nos interesan
del df['isAPT']
del df['MD5']

##################################
# IMPUTAMOS VALORES VACIOS
##################################
#X=joblib.load("../tmp/dataset_mas_completo_sin_imphash_sin_ssdeeP.joblib.pkl",  mmap_mode='r')
from sklearn import preprocessing
df = preprocessing.scale(df)

from sklearn.impute import SimpleImputer
imp = SimpleImputer(strategy="most_frequent")

X=imp.fit_transform(df)

##################################
# Standarization
##################################
from sklearn import preprocessing
X = preprocessing.scale(X)

#joblib.dump(X, tmp_file)


##################################
# PCA
##################################

perpl=30

data_dir="../tmp"
if argumentos[1]=='1':
	###CALCULAMOS EL PCA
        pca = decomposition.PCA(n_components=3)
        Y = pca.fit_transform(X)


##################################
# PLOTTING
##################################
###Creamos una figura con dos partes
fig = plt.figure(figsize=(15, 15))
ax = fig.add_subplot(111, projection='3d')

########################
#LO MOSTRAMOS POR MALWARE/APT
colors=['red', 'green']
target_names=['Malware','APT']
target=[0, 1]
lista=[0,1]
for color, i, target_name, pos in zip(colors, target, target_names, lista):
		indices=[]
		paraimprimir=[]

		for index in range(0,Y.size/3):
			if values2[index]==i:
				indices=np.append(indices,index)

		indices2=indices.astype(np.int64)
		paraimprimir=Y[indices2]
		#plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
                if (pos==1):
                    ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], cmap=plt.cm.Spectral, s=9, c=color, label=target_names[pos])
                else:
                    ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])

plt.title("PCA" )

##################################
# SHOW PLOT
##################################
plt.title("PCA")
plt.legend(bbox_to_anchor=(0.95,0.98))
ax.xaxis.set_major_formatter(NullFormatter())
ax.yaxis.set_major_formatter(NullFormatter())
plt.axis('tight')
fig.savefig('resultados/PCAByAPTandMalware.png')
plt.show()
