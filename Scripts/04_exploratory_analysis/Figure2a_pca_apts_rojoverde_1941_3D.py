###################################################
#
#    This script generates a plot with the projection using PCA 
#    of the 3 principal components of the dataset. This is the base 
#    of the figure 2a 
#
#    Author: Luis Martin Liras
#
###################################################




###############
# IMPORTS
###############

import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.externals import joblib
from sklearn import decomposition
import sys
from sklearn import preprocessing
import datetime
import os

import warnings
from sklearn.exceptions import DataConversionWarning


###############
# CONFIGURATION
###############
input_file= "../datasets/dataset_1941_features_and_19457_rows.csv"
data_dir="../tmp"
data_filename = data_dir + '/pca_3D_1941.npy'
tmp_file="../tmp/dataset_1941.joblib.pkl"
output_file='../results/DoubleFigPCAByAPTandMalware_1941.png'

###############
# AUX FUNCTIONS 
###############
def draw_vector(v0, v1, ax=None):
    ax = ax or plt.gca()
    arrowprops=dict(arrowstyle='->', linewidth=2, shrinkA=0, shrinkB=0)
    ax.annotate('', v1, v0, arrowprops=arrowprops)

##########
#ARGUMENTS#
##########
def syntax_error():
        print "SYNTAX ERROR: Introduce one argument with any of the following values:"
        print " 1 Recalculate PCA"
        print " 2 Obtain the PCA from the last operation"
	print
	print "Current input/output values are:"
	print "		Input File:"+input_file
	print "		TMP File:"+tmp_file
	print "		PCA File:"+data_filename
	print "		Output File:"+output_file
	print
	print


argumentos=sys.argv
###Remove warnings
warnings.filterwarnings(action='ignore', category=DataConversionWarning)
os.system("clear")
if len(argumentos)!=2:
        syntax_error()
        sys.exit()
else:
        if (argumentos[1]!='1' and argumentos[1]!='2'):
                syntax_error()
                sys.exit()

##################################
# PRELIMINAR TASKS
##################################

###Read dataset
print ("Reading CSV...")
df = pd.read_csv(input_file, header = 0, sep=';')
print ("Read!!!")
isapt=df.isAPT
numapt=df.NUM_APT
values2=isapt.values.astype(np.int64)
values3=numapt.values.astype(np.int64)
del df['isAPT']
del df['MD5']
del df['NUM_APT']

##################################
# Standarization
##################################
print ("Standardizing...")
X=df
X = preprocessing.scale(X)
joblib.dump(X,tmp_file)
print ("Done!!")

##################################
# PCA
##################################
if argumentos[1]=='1':
        print ("Calculating PCA...")
	pca = decomposition.PCA(n_components=3)
	Y = pca.fit_transform(X)
        print ("Done!")

	print ("Lost variance is:")
	print pca.explained_variance_ 

	print ("Variance ratio is:")
	print pca.explained_variance_ratio_

	np.save(data_filename, Y)

if argumentos[1]=='2':
	Y = np.load(data_filename)


##################################
# PLOTTING
##################################
###Create a figure with two parts
fig = plt.figure(figsize=(15,15))
ax = fig.add_subplot(111, projection='3d')

colors=['red', 'green']
target_names=['Malware','APT']
target=[0, 1]
lista=[0,1]

for color, i, target_name, pos in zip(colors, target, target_names, lista):
                indices=[]
                paraimprimir=[]

                for index in range(0,Y.size/3):
                        if values2[index]==i:
                                indices=np.append(indices,index)

                indices2=indices.astype(np.int64)
                paraimprimir=Y[indices2]
		if pos!=1:
                    ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])


for color, i, target_name, pos in zip(colors, target, target_names, lista):
                indices=[]
                paraimprimir=[]


                for index in range(0,Y.size/3):
                        if values2[index]==i:
                                indices=np.append(indices,index)

                indices2=indices.astype(np.int64)
                paraimprimir=Y[indices2]
		if pos==1:
                    ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], cmap=plt.cm.Spectral, s=9, c=color, label=target_names[pos])


##################################
# SHOW PLOT
##################################

plt.axis('equal');
plt.title("PCA")
plt.legend(bbox_to_anchor=(0.95,0.98))
ax.xaxis.set_major_formatter(NullFormatter())
ax.yaxis.set_major_formatter(NullFormatter())
plt.axis('tight')
fig.savefig(output_file)
print ("A new plot will be shown in a new window. Close it to finish!!")
plt.show()
