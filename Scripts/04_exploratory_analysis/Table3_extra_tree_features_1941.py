####################################################################
#
#  Python script that obtain the Extra Tree importances 
#
#  of the isAPT field of the Dataset and plots it in a BAR or LINE graph
#
#  Author: Luis Martin Liras
#
####################################################################



##################################
# IMPORTS
##################################
import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.manifold import TSNE
from sklearn.feature_selection import VarianceThreshold
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn import datasets
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.externals import joblib 
from sklearn import tree
import sys
import numpy
from sklearn.externals.six import StringIO
import pydot
import graphviz
import datetime
import os

##################################
# CONFIGURATION
##################################
input_file="../datasets/dataset_1941_features_and_19457_rows.csv"
output_file="../results/elbow_extra_tree_56_bars.png"
dump_file="../tmp/dataset_1941.joblib.pkl"
num_bars=56
numpy.set_printoptions(threshold=numpy.nan)

def convert_to_year(date_in_some_format):
	datetime_object = datetime.datetime.strptime(date_in_some_format, '%d/%m/%Y %H:%M')
	totalmins=(datetime_object-datetime.datetime(1970,1,1)).total_seconds()/60
	return int(totalmins)

##########
#ARGUMENTS#
##########
def syntax_error():
        print "SYNTAX ERROR: Introduce the following values as the first argument:"
        print " 1 Bar graph"
        print " 2 Line graph"
        print " 3 Show sorted scores"
        print
        print "Current input/output values are:"
        print "         Input File:"+input_file
        print "         Dump File:"+dump_file
        print "         Output File:"+output_file
        print "         Num values:"+str(num_bars)
        print
        print

argumentos=sys.argv
os.system("clear")
if len(argumentos)!=2:
    syntax_error()
    exit()

##################################
# Previous tasks 
##################################

###1.- Read the dataset
print ("Reading CSV...")
df = pd.read_csv(input_file, header = 0, sep=';')
print ("Read!!!")

###2.- Extract target fields
isapt=df.isAPT
numapt=df.NUM_APT
values2=isapt.values.astype(np.int64)
values3=numapt.values.astype(np.int64)
#Note: values2 is a fields of 0s and 1s that states if a sample is an APT or not
del df['isAPT']
del df['MD5']
del df['NUM_APT']


##################################
# EXTRA TREE IMPORTANCES
##################################

print ("Calculating extra tree importances...")
headers=list(df)
headersArray=array(array(headers))

#model=tree.ExtraTreeClassifier()
model=ExtraTreesClassifier(n_estimators=250)

model.fit(df,values2)
importances=model.feature_importances_
indices = np.argsort(importances)[::-1]


lista = pd.DataFrame({'header': headersArray, 'importance': importances})
lista.sort_values(by=['importance'], inplace=True, ascending=False)

sorted_importances=lista['importance']
sorted_headers=lista['header']

short_sorted_importances=sorted_importances[0:num_bars]
short_sorted_headers=sorted_headers[0:num_bars]

scores=np.column_stack((headersArray,model.feature_importances_))
sorted_scores = scores[(-scores[:,1].astype(np.float)).argsort()]
print ("Done!!")

if (argumentos[1]=="3"):
    os.system("clear")
    print("==================================================")
    print("====Top 20 fields by Extra Tree importances=======")
    print("==================================================")
    print(sorted_scores[:20])
    exit()

##################################
# PLOTTING
##################################
plt.figure()
plt.title("ExtraTree Feature importances")

if (argumentos[1]=="1"):
#Asked for a BAR plot
    #print(mat_sort)
    #list=mat_sort

    plt.bar(range(len(short_sorted_importances)), short_sorted_importances, color="r", align="center")
    ###plt.xticks(range(X.shape[1]), indices)
    plt.xticks(range(len(short_sorted_importances)), short_sorted_headers, rotation=80)

    ax = plt.gca()
    ax.tick_params(axis = 'x', which = 'major', labelsize = 5, width=2)
    ax.tick_params(axis = 'x', which = 'minor', labelsize = 5, width=2)

    iii=0
    for tick in ax.xaxis.get_major_ticks(): 
        if iii%2==0:
            tick.label.set_color('red')
        if iii%2==1:
            tick.label.set_color('black')
        iii+=1

    plt.xlim([0, len(short_sorted_importances)])
    output_file="../results/elbow_extra_tree_1941_fields_and_56_bars.png"

if (argumentos[1]=="2"):
#Asked for a LINE plot
    plt.plot(range(len(short_sorted_importances)), short_sorted_importances, color="r")
    output_file="../results/elbow_extra_tree_1941_fields_and_56_lines.png"

#In any case, save figure and show
plt.savefig(output_file, bbox_inches='tight')

print("New plot will be shown in a new window. CLose it!")
plt.show()
