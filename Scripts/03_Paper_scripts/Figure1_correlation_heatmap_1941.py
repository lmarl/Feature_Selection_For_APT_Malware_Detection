###########################################################
#
#    This script obtains the correlation among all the fields of the 
#    dataset and plots the image shown in Figure 1 which is a correlation
#    heatmap among the fields
#
#    Author: Luis Martin
#
###########################################################




####################################
#    IMPORTS
####################################
import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from pandas.plotting import scatter_matrix
from sklearn.externals import joblib
from sklearn import manifold
import sys

####################################
#   INTERNAL METHODS
####################################
def get_redundant_pairs(df):
    '''Get diagonal and lower triangular pairs of correlation matrix'''
    pairs_to_drop = set()
    cols = df.columns
    for i in range(0, df.shape[1]):
        for j in range(0, i+1):
            pairs_to_drop.add((cols[i], cols[j]))
    return pairs_to_drop

def get_top_abs_correlations(df, n=5):
    au_corr = df.corr().abs().unstack()
    labels_to_drop = get_redundant_pairs(df)
    au_corr = au_corr.drop(labels=labels_to_drop, errors="ignore").sort_values(ascending=False)
    return au_corr[0:n]

####################################
#    ARGUMENTS
####################################
def syntax_error():
        print "SYNTAX ERROR: Introduce one argument  with any of the possible values:"
        print " 1.- Show 25 greates correlations among features"
        print " 2.- Show the whole heatmap"
        print " 3.- Show the average correlation of each field ordered "
        print " 4.- Show everything"
        print


argumentos=sys.argv
if len(argumentos)!=2:
        syntax_error()
        sys.exit()
else:
        if (argumentos[1]!='1' and argumentos[1]!='2' and argumentos[1]!='3' and argumentos[1]!='4'):
                syntax_error()
                sys.exit()

#####################
# PRELIMINAR TAKS
#####################
input_file= "../datasets/reducido_a_1941_features_without_NaNs_y_19457_rows.csv"
output_file="resultados/correlation_heatmap_1941.png"

df = pd.read_csv(input_file, header = 0, sep=';') 

apttypes=df.APT
numapt=df.NUM_APT
values2=apttypes.values.astype(np.int64)
values3=numapt.values.astype(np.int64)
del df['APT']
del df['NUM_APT']


#####################
# CORRELATION HEATMAP
#####################

#Different number of fields were tried to obtain an interesting heatmap figure. Finally the total number of fields was left
num=1941
df=df.iloc[0:19457,0:num] 
atributos=list(df)
atributos2=atributos[0:num]
atributos2=atributos

correlations=df.corr()

if (argumentos[1]=="3" or argumentos[1]=="4"):
    print "Average correlation of each field ordered"
    print "========================================"
    with pd.option_context('display.max_rows', None, 'display.max_columns', None):
                X=correlations.abs().mean().sort_values()
                print (X)
                print (X.mean())

    if (argumentos[1]=="3"):
		exit()

if (argumentos[1]=="1" or argumentos[1]=="4"):
	df_attr = pd.Series( (v for v in atributos) )
	print("Top Absolute Correlations")
	print("=========================")
	print(get_top_abs_correlations(df, 400))

	if (argumentos[1]=="1"):
		exit()

#####################
# PLOTTING
#####################
if (argumentos[1]=="2" or argumentos[1]=="4"):
    fig = plt.figure(figsize=(36,36)) #TAMANYO FISICO DE LA IMAGEN GRANDE
    ax = fig.add_subplot(111)

    cax = ax.matshow(correlations, vmin=-1, vmax=1)
    fig.colorbar(cax)

    font = {'family': 'serif',
        'color':  'black',
        'weight': 'normal',
        'size': 4,
        }

    ticks = np.arange(0,num,1)
    ax.set_xticks(ticks)
    ax.set_yticks(ticks)
    ax.set_xticklabels(atributos2, fontdict=font)
    ax.set_yticklabels(atributos2, fontdict=font)

    plt.xticks(rotation=80)

    fig.savefig(output_file)

    plt.show()
