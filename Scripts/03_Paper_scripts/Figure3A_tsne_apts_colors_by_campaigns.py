########################################################
#
#
#
#
#
#
########################################################



##################################
# IMPORTS
##################################
import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.manifold import TSNE
import sys

##################################
# ARGUMENTS
##################################
def syntax_error():
        print "SYNTAX ERROR: Introduce one argument with the following values"
        print
        print "First argument:"
        print " 1 Recalculate TSNE"
        print " 2 Obtain TSNE from last recorded TSNE"


argumentos=sys.argv
if len(argumentos)!=2:
        syntax_error()
        sys.exit()
else:
        if (argumentos[1]!='1' and argumentos[1]!='2'):
                syntax_error()
                sys.exit()

##################################
# PRELIMINAR TASKS
##################################
###Read dataset
input_file = "../datasets/csv_con_puntos_y_con_num_APTs_final_final_conptoycoma_new_3.csv"
df = pd.read_csv(input_file, header = 0, sep=';')

###Separamos los campos que no nos interesan y campos objetivo
malwaretypes=df.MALWARE_TYPE
ssdeeptypes=df.SSDEEP
imphashtypes=df.IMPHASH
apttypes=df.APT
numapt=df.NUM_APT
develgroups=df.DEVEL_GROUP
develcountries=df.DEVEL_COUNTRY

###Quitamos las cabeceras de los campos objetivo
values=malwaretypes.values.astype(np.int64)
values2=apttypes.values.astype(np.int64)
values3=numapt.values.astype(np.int64)
values4=develgroups.values.astype(np.int64)
values5=develcountries.values.astype(np.int64)

###Quitamos los campos que no nos interesan
del df['APT']
del df['MD5']
del df['FIRST_SEEN']
del df['SSDEEP']
del df['IMPHASH']
del df['NUM_APT']
del df['DEVEL_GROUP']
del df['DEVEL_COUNTRY']

##################################
# Standarization
##################################
from sklearn import preprocessing
df = preprocessing.scale(df)

##################################
# TSNE
##################################
perpl=30

data_dir="../tmp"
data_filename = data_dir + '/tsne_nuevo.npy'
if argumentos[1]=='1':
	tsne = manifold.TSNE(n_components=2, perplexity=perpl)
	Y = tsne.fit_transform(df)
	np.save(data_filename, Y)

if argumentos[1]=='2':
	Y = np.load(data_filename)


##################################
# PLOTTING
##################################
fig = plt.figure(figsize=(12,8))
ax = fig.add_subplot(1, 1, 1)

##########################################
# Showing by campaign
# These are the 19 APT campaigns we work with 
target_names=['Malware', 'APT1', 'APT28', 'APT29', 'Carbanak','Careto','DarkHotel','Hellsing', 'Icefog', 'Kimsuky', 'Lazarus', 'Machete', 'NetTraveler','NSA','Poseidon','Sandworm','Turla','Unit8200','WildNeutron','Winnti']

#Y ESTOS SON LOS COLORES QUE LES DAMOS (Negro para el desconocido y rosa claro para el malware general):
colors=['lightpink','firebrick','blue','navy','mediumpurple','gray','chocolate','crimson','lightpink','magenta','purple','red','gold','pink','tan', 'sienna', 'y','yellow','lavender','gray','royalblue','slateblue','orchid','lime','salmon']

target=[  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
lista=[  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]

for color, i, target_name, pos in zip(colors, target, target_names, lista):
		indices=[]
		paraimprimir=[]

		for index in range(0,Y.size/2):
			if values4[index]==i:
				indices=np.append(indices,index)

		indices2=indices.astype(np.int64)
		paraimprimir=Y[indices2]
		if pos==0:
			plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])
		else:
			plt.scatter(paraimprimir[:, 0], paraimprimir[:, 1], cmap=plt.cm.Spectral, s=4, c=color, label=target_names[pos])


##################################
# SHOW PLOT
##################################
plt.title("t-SNE (perplexity: %.2g)" % (perpl))
plt.legend(bbox_to_anchor=(0.98,0.98))
ax.xaxis.set_major_formatter(NullFormatter())
ax.yaxis.set_major_formatter(NullFormatter())
plt.axis('tight')
fig.savefig('resultados/FigTSNEColorsByDevelgroup.png')
plt.show()
