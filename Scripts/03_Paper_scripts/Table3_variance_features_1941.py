###################################################
#
#   This script calculates de scores for every field
#
#   according to its variance in the whole dataset.
#
#   It receives only one parameter. With the value 1, shows a Bar graphicm 
#   with value 2, shows a Line Graphics. With Value 3, shows a 20 element list 
#
#   Author: Luis Martin Liras
#
######################################################




##################################
# IMPORTS
##################################
import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.manifold import TSNE
from sklearn.feature_selection import VarianceThreshold
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn import datasets
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.externals import joblib 
from sklearn import tree
import sys
import numpy
from sklearn.externals.six import StringIO
import pydot
import graphviz

##################################
# CONFIGURATION
##################################

###Leemos el dataset
input_file="../datasets/reducido_a_1941_features_without_NaNs_y_19457_rows.csv"
output_file="resultados/codo_variance.png"
dump_file="../tmp/dataset_1941.joblib.pkl"
num_bars=400
numpy.set_printoptions(threshold=numpy.nan)

###########
#ARGUMENTS#
###########
def syntax_error():
        print "SYNTAX ERROR: Introduce un argumentos con los siguientes valores"
        print " 1 Bar Plot"
        print " 2 Line plot"
        print " 3 Show sorted scores via command line"
        print
        print "Current input/output values are:"
        print "         Input File:"+input_file
        print "         Dump File:"+dump_file
        print "         Output File:"+output_file
        print "         Num values:"+str(num_bars)
        print
        print

argumentos=sys.argv
if len(argumentos)!=2:
    syntax_error()
    exit()

df = pd.read_csv(input_file, header = 0, sep=';')

##Extract target fields
isapt=df.APT
numapt=df.NUM_APT
values2=isapt.values.astype(np.int64)
values3=numapt.values.astype(np.int64)
del df['ID']
del df['APT']
del df['NUM_APT']


##################################
# Normalization 
##################################
from sklearn import preprocessing
headers=list(df)
x = df.values #returns a numpy array
min_max_scaler = preprocessing.MinMaxScaler()
x_scaled = min_max_scaler.fit_transform(x)
df = pd.DataFrame(x_scaled)

##################################
# VARIANCE
##################################
print(" ")
print("====================================================")
print("VARIANCE")
print("====================================================")

variance=df.apply(np.var,axis=0)
headersArray=array(array(headers))

scores=np.column_stack((headersArray,variance))
sorted_scores = scores[(-scores[:,1].astype(np.float)).argsort()]

lista = pd.DataFrame({'header': headersArray, 'variance': variance})
lista.sort_values(by=['variance'], inplace=True, ascending=False)

sorted_chis=lista['variance']
sorted_headers=lista['header']

short_sorted_chis=sorted_chis[0:num_bars]
short_sorted_headers=sorted_headers[0:num_bars]

if (argumentos[1]=="3"):
    print (sorted_scores[:20])
    exit()

##################################
# PLOTTING
##################################

plt.locator_params(axis='y', nbins=16)

plt.title("Feature variances")
if (argumentos[1]=="1"):
    ###plt.bar(range(X.shape[1]), importances[indices], color="r", yerr=std[indices], align="center")
    plt.bar(range(len(short_sorted_chis)), short_sorted_chis, color="b", align="center")
    ###plt.xticks(range(X.shape[1]), indices)
    plt.xticks(range(len(short_sorted_chis)), short_sorted_headers, rotation=80)

    ax = plt.gca()
    ax.tick_params(axis = 'x', which = 'major', labelsize = 6, width=1)
    ax.tick_params(axis = 'x', which = 'minor', labelsize = 6, width=1)

    iii=0
    for tick in ax.xaxis.get_major_ticks():
        if iii%2==0:
            tick.label.set_color('red')
        if iii%2==1:
            tick.label.set_color('black')
        iii+=1

    plt.xlim([0, len(short_sorted_chis)])
    output_file="resultados/codo_variance_bars_1941.png"

if (argumentos[1]=="2"):
    plt.title("Feature variances")
    plt.plot(range(len(short_sorted_chis)), short_sorted_chis, color="b")
    output_file="resultados/codo_variance_line_1941.png"

plt.show()
plt.savefig(output_file)
