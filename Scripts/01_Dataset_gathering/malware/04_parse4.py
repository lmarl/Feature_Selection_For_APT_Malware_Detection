#################################################################
#
#    This script parses the virustotal report generating a set of INSERT queries
#    to be later run from other script
#
#################################################################



import json
from pprint import pprint
import ast
import os
import sys

insert_text=""

def sanitize (cad):
	return cad.replace(" ", "_").replace("-","_").replace("\\","/").replace("'","")

#Convierte el contenido de una lista en una ristra de secuencias INSERT y UPDATE	
def parse_list (campo, l, insert_text):
	First=True
	for i in l:
	   if type(i) == dict:
#            	print "\n\nTABLE: ", campo
		print_dict_rec(i)
	   else:
		if campo:
			if First:
	   			cad= ""+insert_text+" set "+sanitize(campo)+" = '"+sanitize(i)+"' where MD5='"+MD5+"'"
				First=False
			else:
	   			cad=cad+", "+sanitize(campo)+" = '"+sanitize(i)+"' where MD5='"+MD5+"'"
			
		print cad+";"			

#Convierte el contenido de un diccionario en una ristra de secuencias INSERT y UPDATE	
def print_dict_rec( indict ):
  global insert_text
  if indict is not None:
    for majorkey, subdict in indict.iteritems():
	 if type(subdict) == list:
	    #Si son listas y no estan vacias
	    if subdict and insert_text=="":
	    	print "\nINSERT INTO "+ sanitize(str(majorkey))+" (MD5) VALUES('"+MD5+"');"
	    	insert_text="UPDATE "+ sanitize(str(majorkey))
	    parse_list(majorkey,subdict, str(insert_text))
	    insert_text=""
         elif type(subdict) == dict:
	    print "\nINSERT INTO "+ sanitize(str(majorkey))+" (MD5) VALUES('"+MD5+"');"
	    insert_text="UPDATE "+ sanitize(str(majorkey))
            print_dict_rec(subdict)
	    insert_text=""
         else:
	    if subdict is not None:
		try:
			if (str(majorkey)=='update'):
				majorkey="updates"

            		print ""+insert_text+" set "+sanitize(str(majorkey))+" = '"+str(subdict) +"' where MD5='"+MD5+"';"
		
		except:
			print ""	

if len(sys.argv)!=2:
	print "\nError: Se necesita un argumento.\n"
	exit(98)
	
m=sys.argv[1]
mypath=os.path.join(m, "")

if not os.path.isdir(os.path.join(m, "")): 
#if not mypath.isdir():
	print "\nError: El parametro no es un directorio.\n"
	exit(99)

print "LOCK TABLES extra WRITE, FileSystem WRITE, HOOKING WRITE, HOSTS_FILE WRITE, mutex WRITE, TCP WRITE, UDP WRITE, DNS WRITE, HTTP WRITE, processes WRITE, RUNTIME_DLLS WRITE, exiftool WRITE, ALYac WRITE, AVG WRITE, AVware WRITE, Ad_Aware WRITE, AegisLab WRITE, Agnitum WRITE, AhnLab_V3 WRITE, Alibaba WRITE, Antiy_AVL WRITE, Arcabit WRITE, Avast WRITE, Avira WRITE, Baidu_International WRITE, BitDefender WRITE, Bkav WRITE, ByteHero WRITE, CAT_QuickHeal WRITE, CMC WRITE, CRC WRITE, ClamAV WRITE, Commtouch WRITE, Comodo WRITE, Cyren WRITE, DNS WRITE, DrWeb WRITE, ESET_NOD32 WRITE, Emsisoft WRITE, F_Prot WRITE, F_Secure WRITE, FileSystem WRITE, Fortinet WRITE, GData WRITE, GENERAL WRITE, HASHES WRITE, HOOKING WRITE, HOSTS_FILE WRITE, HTTP WRITE, Ikarus WRITE, Jiangmin WRITE, K7AntiVirus WRITE, K7GW WRITE, Kaspersky WRITE, Kingsoft WRITE, Malwarebytes WRITE, McAfee WRITE, McAfee_GW_Edition WRITE, MicroWorld_eScan WRITE, Microsoft WRITE, NANO_Antivirus WRITE, Norman WRITE, PACKERS2 WRITE, PE WRITE, PE_Resource_detail WRITE, PE_Resources WRITE, PE_Sections WRITE, Panda WRITE, Qihoo_360 WRITE, RUNTIME_DLLS WRITE, Rising WRITE, SIGCHECK WRITE, SUPERAntiSpyware WRITE, Sophos WRITE, Symantec WRITE, TCP WRITE, Tencent WRITE, TheHacker WRITE, TotalDefense WRITE, TrendMicro WRITE, TrendMicro_HouseCall WRITE, UDP WRITE, VBA32 WRITE, VIPRE WRITE, ViRobot WRITE, Zillya WRITE, Zoner WRITE, autostart WRITE, clamav WRITE, counter_signers_details WRITE, deepguard WRITE, eSafe WRITE, exiftool WRITE, exports WRITE, filetype WRITE, imports WRITE, imports2 WRITE, links WRITE, mutex WRITE, nProtect WRITE, netguids WRITE, opened_managers WRITE, overlay WRITE, packers WRITE, pescan WRITE, pescanner WRITE, processes WRITE, resources WRITE, samples WRITE, services WRITE, shellcmds WRITE, signers_details WRITE, submission_names WRITE, suspicious_sections WRITE, trendmicro_heuristics WRITE, verinfo WRITE, windows_searched WRITE, yara WRITE;"

for f in os.listdir(mypath):

 if f.endswith('json') and os.path.isfile(os.path.join(mypath, f)):
  ########################################
  #Abrimos el fichero y lo hacemos legible
  #with open('VTDL000578397FB06052C58738B38E3E800A.json') as data_file:    
  print f
  with open(os.path.join(mypath, f)) as data_file:    
    cata=data_file.read()
    aaa=ast.literal_eval(cata)
    #d=json.load(aaa)

  MD5=aaa['md5']


  #######################
  #    BEHAVIOUR
  #######################
  ####print_dict_rec(aaa['additional_info']['behaviour-v1'])
  #La mayor parte del fichero es un diccionario llamado behaviour-v1
  
  #Dentro de behaviour-v1 estan los sudiccionarios:
  #- extra
  #- filesystem
  #- hooking
  #- hosts_file
  #- mutex
  #- network
  #- process
  #- registry
  #- runtime-dlls
  #- service


  if 'behaviour-v1' in aaa['additional_info']:


	#########
	#extra
	#########
	First=True
	if aaa['additional_info']['behaviour-v1']['extra']:
		#print "INSERT INTO extra (MD5) VALUES ('"+MD5+"');"	
		for i in aaa['additional_info']['behaviour-v1']['extra']:
			if First:
	   			cad="INSERT INTO extra VALUES (0,'"+MD5+"','"+sanitize(str(i))+"')"
				First=False
			else:
				cad=cad+" , (0,'"+MD5+"','"+sanitize(str(i))+"')"
	
		print cad+";"


	#########
	#filesystem
	#########
	#print_dict_rec(aaa['additional_info']['behaviour-v1']['filesystem'])
	First=False
	for type_key, type_values in aaa['additional_info']['behaviour-v1']['filesystem'].iteritems():
		if type_values:
			for fil in type_values:
				#print type_key
				#print fil
				if (type_key=='copied')| (type_key=='moved'):
					print "INSERT INTO Copied_Files VALUES(0,'"+MD5+"','"+sanitize(str(type_key))+"','"+sanitize(str(fil['src']))+"','"+sanitize(str(fil['dst']))+"','"+str(fil['success'])+"');"
				elif (type_key=='replaced'):
					print "INSERT INTO Copied_Files VALUES(0,'"+MD5+"','"+sanitize(str(type_key))+"','"+sanitize(str(fil['replaced']))+"','"+sanitize(str(fil['replacement']))+"','"+str(fil['success'])+"');"
				else:
					print "INSERT INTO FileSystem VALUES(0,'"+MD5+"','"+sanitize(str(type_key))+"','"+sanitize(str(fil['path']))+"','"+str(fil['success'])+"');"
		

	#########
	#hooking
	#########
	print "INSERT INTO HOOKING (MD5) VALUES ('"+MD5+"');"	
	insert_text="UPDATE HOOKING"
	parse_list("",aaa['additional_info']['behaviour-v1']['hooking'],"UPDATE HOOKING ")

	#########
	#hosts_file
	#########
	if 'hosts_file' in aaa['additional_info']['behaviour-v1']:
		if aaa['additional_info']['behaviour-v1']['hosts_file'] is not None:
			print "INSERT INTO HOSTS_FILE VALUES(0,'"+MD5+"', '"+sanitize(''.join(aaa['additional_info']['behaviour-v1']['hosts_file'].splitlines()))+"');" 

	#########
	#mutex
	#########
	#print_dict_rec(aaa['additional_info']['behaviour-v1']['mutex'])
	First=True
	for type_key, type_values in aaa['additional_info']['behaviour-v1']['mutex'].iteritems():
		if type_values:
			for mut in type_values:
				if First:
					cad="INSERT INTO mutex VALUES(0,'"+MD5+"','"+sanitize(str(type_key))+"','"+sanitize(mut['mutex'])+"','"+sanitize(str(mut['success']))+"')"
					First=False
				else:
					cad=cad+", (0,'"+MD5+"','"+sanitize(str(type_key))+"','"+sanitize(mut['mutex'])+"','"+sanitize(str(mut['success']))+"')"

			print cad+";"

	#########
	#network
	#########
	#print_dict_rec(aaa['additional_info']['behaviour-v1']['network'])
	for type_key, type_values in aaa['additional_info']['behaviour-v1']['network'].iteritems():
		if type_values:
			#print type_values
			if (type_key=='dns'):
				for domain in type_values:
					try:
						print "INSERT INTO DNS VALUES(0,'"+MD5+"','"+domain['hostname']+"','"+domain['ip']+"');"
					except:
						print ""
				
			if (type_key=='tcp'):
				for connection in type_values:
					print "INSERT INTO TCP VALUES(0,'"+MD5+"','"+str(connection.split(":")[0])+"',"+str(connection.split(":")[1])+");"

			if (type_key=='udp'):
				for connection in type_values:
					print "INSERT INTO UDP VALUES(0,'"+MD5+"','"+str(connection.split(":")[0])+"',"+str(connection.split(":")[1])+");"

			if (type_key=='http'):
				for connection in type_values:
					#print connection
					print "INSERT INTO HTTP VALUES(0,'"+MD5+"','"+str(connection['method'])+"','"+str(connection['url'])+"','"+str(connection['user-agent'])+"');"


	#########
	#process
	#########
	#print_dict_rec(aaa['additional_info']['behaviour-v1']['process'])
	for type_key, type_values in aaa['additional_info']['behaviour-v1']['process'].iteritems():
		if type_values:
			if (type_key=='created') | (type_key=='terminated') | (type_key=='injected'):
				for process in type_values:
					print "INSERT INTO processes VALUES(0,'"+MD5+"','"+sanitize(str(type_key))+"','"+sanitize(process['proc'])+"','"+sanitize(str(process['success']))+"');"
					
			if (type_key=='shellcmds'):
				for process in type_values:
					print "INSERT INTO shellcmds VALUES(0,'"+MD5+"','"+sanitize(str(type_key))+"','"+sanitize(process['cmd'])+"','"+sanitize(str(process['success']))+"');"
					

	#########
	#registry
	#########
	print_dict_rec(aaa['additional_info']['behaviour-v1']['registry'])

	#########
	#runtime-dlls
	#########
	First=True
	cad=""
	insert_text="INSERT INTO RUNTIME_DLLS"
	for i in aaa['additional_info']['behaviour-v1']['runtime-dlls']:
		if First:
			cad="INSERT INTO RUNTIME_DLLS VALUES (0,'"+MD5+"','"+sanitize(i['file'])+"','"+sanitize(str(i['success']))+"')"
			First=False
		else:
			cad=cad+ ", (0,'"+MD5+"','"+sanitize(i['file'])+"','"+sanitize(str(i['success']))+"')"

	print cad+";"

	#########
	#service
	#########
	#print_dict_rec(aaa['additional_info']['behaviour-v1']['service'])
	for type_key, type_values in aaa['additional_info']['behaviour-v1']['service'].iteritems():
		if type_values:
			if (type_key=='created') | (type_key=='deleted') | (type_key=='opened') | (type_key=='controlled') | (type_key=='started'):
				for service in type_values:
					print "INSERT INTO services VALUES(0,'"+MD5+"','"+sanitize(str(type_key))+"','"+sanitize(service['name'])+"','"+sanitize(str(service['success']))+"');"
			
			if (type_key=='opened-managers'):
				for db in type_values:
					print "INSERT INTO opened_managers VALUES(0,'"+MD5+"','"+sanitize(db['machine'])+"','"+sanitize(db['database'])+"','"+sanitize(str(db['success']))+"');"
				

	#########
	#windows_searched
	#########
	#print_dict_rec(aaa['additional_info']['behaviour-v1']['windows'])
	First=True
	for w in aaa['additional_info']['behaviour-v1']['windows']['searched']:
		if w:
			if First:
				cad= "INSERT INTO windows_searched VALUES(0,'"+MD5+"','"+sanitize(w['class'])+"','"+sanitize(w['name'])+"')"
				First=False
			else:
				cad=cad+ ", (0,'"+MD5+"','"+sanitize(w['class'])+"','"+sanitize(w['name'])+"')"
	print cad+";"				


  #######################
  #  EXIFTOOL
  #######################
  if 'exiftool' in aaa['additional_info']:
	print "\nINSERT INTO exiftool (MD5) values('"+MD5+"');"
	insert_text="UPDATE exiftool"
	print_dict_rec(aaa['additional_info']['exiftool'])

  #######################
  #  EXPORTS
  #######################
  First=True
  if 'exports' in aaa['additional_info']:
	for ex in  aaa['additional_info']['exports']:
		if First:
			cad= "\nINSERT INTO exports values(0,'"+MD5+"','"+sanitize(ex)+"')"
			First=False
		else:
			cad=cad+ ", (0,'"+MD5+"','"+sanitize(ex)+"')"

	print cad+";"
			

  #######################
  #  IMPORTS
  #######################
  First=True
  if 'imports' in aaa['additional_info']:
	#print "\nINSERT INTO imports values(MD5='"+MD5+"')"
	#insert_text="UPDATE imports"
	#print_dict_rec(aaa['additional_info']['imports'])
	for majorkey, subdict in aaa['additional_info']['imports'].iteritems():
		for i in subdict:
			if First:
				cad="\nINSERT INTO imports2 values(0,'"+MD5+"', '"+sanitize(majorkey)+"', '"+sanitize(i)+"' )"
				First=False
			else:
				cad=cad+",(0,'"+MD5+"', '"+sanitize(majorkey)+"', '"+sanitize(i)+"' )"
	
	print cad+";"
				

  #######################
  #   Filetype 
  #######################
  if 'magic' in aaa['additional_info']:
  	print "\nINSERT INTO filetype values(0,'"+MD5+"', '"+aaa['additional_info']['magic']+"');"

  #######################
  #    PE
  #######################
  if 'pe-timestamp' in aaa['additional_info']:
	p1=str(aaa['additional_info']['pe-timestamp'])
  else:
	p1=""

  if 'pe-imphash' in aaa['additional_info']:
	p2=str(aaa['additional_info']['pe-imphash'])
  else:
	p2=""

  if 'pe-entrypoint' in aaa['additional_info']:
	p3=str(aaa['additional_info']['pe-entrypoint'])
  else:
	p3=""

  if 'pe-machine-type' in aaa['additional_info']:
	p4=str(aaa['additional_info']['pe-machine-type'])
  else:
	p4=""
  print "\nINSERT INTO PE values(0,'"+MD5+"', '"+p3+"', '"+p2+"','"+p4+"','"+p1+"');"

  #############
  ###OVERLAY###
  #############
  if 'pe-overlay' in aaa['additional_info']:
	print "\nINSERT INTO overlay values('"+MD5+"', "+sanitize(str(aaa['additional_info']['pe-overlay']['entropy']))+", '"+sanitize(str(aaa['additional_info']['pe-overlay']['filetype']))+"','"+sanitize(str(aaa['additional_info']['pe-overlay']['md5']))+"',"+sanitize(str(aaa['additional_info']['pe-overlay']['offset']))+","+sanitize(str(aaa['additional_info']['pe-overlay']['size']))+");"

  #############
  ##RESOURCE###
  #############
  ####faltan los resource-langs y los resource-types
  First=True
  if 'pe-resource-list' in aaa['additional_info']:
	for key, value in aaa['additional_info']['pe-resource-list'].iteritems():
		if First:
			cad= "\nINSERT INTO PE_Resources values(0,'"+MD5+"', '"+sanitize(key)+"', '"+sanitize(value)+"')"
			First=False
		else:
			cad=cad+ ", (0,'"+MD5+"', '"+sanitize(key)+"', '"+sanitize(value)+"')"
	print cad+";"

	
  First=True
  if 'pe-resource-detail' in aaa['additional_info']:
	for resource in aaa['additional_info']['pe-resource-detail']:
		if First:
			cad= "\nINSERT INTO PE_Resource_detail values(0,'"+MD5+"', '"+resource['filetype']+"', '"+resource['lang']+"','"+resource['sha256']+"', '"+resource['type']+"')"
			First=False
		else:
			cad=cad+ ", (0,'"+MD5+"', '"+resource['filetype']+"', '"+resource['lang']+"','"+resource['sha256']+"', '"+resource['type']+"')"

	print cad+";"
	

  First=True
  if 'pe-resource-parents' in aaa['additional_info']:
	for resource in aaa['additional_info']['pe-resource-parents']:
		if First:
			cad= "\nINSERT INTO PE_Resource_parents values(0,'"+MD5+"','"+resource+"')"
			First=False
		else:
			cad=cad+ ", (0,'"+MD5+"','"+resource+"')"

	print cad+";"
			

  #############
  ##SECTIONS###
  #############
  First=True
  if 'sections' in aaa['additional_info']:
  	for section in aaa['additional_info']['sections']:
		if First:
			cad= "\nINSERT INTO PE_Sections values(0,'"+MD5+"','"+str(section[0])+"','"+str(section[1])+"','"+str(section[2])+"','"+str(section[3])+"','"+str(section[4])+"','"+str(section[5])+"')"
			First=False
		else:
			cad=cad+ ", (0,'"+MD5+"','"+str(section[0])+"','"+str(section[1])+"','"+str(section[2])+"','"+str(section[3])+"','"+str(section[4])+"','"+str(section[5])+"')"

	print cad+";"
			
	
  #print "\nINSERT INTO sections values (MD5='KK')"
  #insert_text="UPDATE sections"
  #print_dict_rec(aaa['additional_info']['sections'])

  #############
  ##SIGCHECK###
  #############
  n=0
  m=0
  if 'sigcheck' in aaa['additional_info']:
  	print "\nINSERT INTO SIGCHECK (MD5) values ('"+MD5+"');"
	for key, value in aaa['additional_info']['sigcheck'].iteritems():
	 	if type(value) == list:
			if (key=="counter signers details"):
				for detail in value:
					print "INSERT INTO counter_signers_details (MD5, num_id) values ('"+MD5+"','"+str(n)+"');"
					n=n+1
					for key2, value2 in detail.iteritems():
						print "UPDATE counter_signers_details set "+sanitize(str(key2))+" = '"+sanitize(str(value2))+"' where MD5='"+MD5+"';"
					
			elif (key=="signers details"):
				for detail in value:
					print "INSERT INTO signers_details (MD5, num_id) values ('"+MD5+"','"+str(m)+"');"
					m=m+1
					for key2, value2 in detail.iteritems():
						print "UPDATE signers_details set "+sanitize(str(key2))+" = '"+sanitize(str(value2))+"' where MD5='"+MD5+"';"
					

				
		else:
			try: 
				print "UPDATE SIGCHECK set "+sanitize(str(key))+" = '"+sanitize(str(value))+"' where MD5='"+MD5+"';"
			except:
				print ""
		

  	#insert_text="UPDATE SIGCHECK"
  	#print_dict_rec(aaa['additional_info']['sigcheck'])
		#print "\nINSERT INTO SIGCHECK values('"+MD5+"','"+str(section[0])+"','"+str(section[1])+"','"+str(section[2])+"','"+str(section[3])+"','"+str(section[4])+"','"+str(section[5])+"');"

	
  #############
  ###GENERAL###
  #############
  if 'suspicious-insight' in aaa['additional_info']:
	s1=str(aaa['additional_info']['suspicious-insight'])
  else:
	s1=""

  print "\nINSERT INTO GENERAL values (0,'"+MD5+"','"+s1+"','"+sanitize(''.join(aaa['additional_info']['trid'].splitlines()))+"','"+str(aaa['community_reputation'])+"','"+str(aaa['first_seen'])+"','"+str(aaa['last_seen'])+"','"+str(aaa['harmless_votes'])+"','"+str(aaa['malicious_votes'])+"','"+str(aaa['positives'])+"','"+str(aaa['size'])+"','"+str(aaa['total'])+"','"+str(aaa['times_submitted'])+"');"

  #############
  ###HASHES###
  #############
  if 'authentihash' in aaa:
	a1=str(aaa['authentihash'])
  else:
	a1=""

  if 'sha1' in aaa:
	a2=str(aaa['sha1'])
  else:
	a2=""

  if 'sha256' in aaa:
	a3=str(aaa['sha256'])
  else:
	a3=""

  if 'ssdeep' in aaa:
	a4=str(aaa['ssdeep'])
  else:
	a4=""

  print "\nINSERT INTO HASHES values (0,'"+MD5+"','"+a1+"','"+a2+"','"+a3+"','"+a4+"');"

  #############
  ###SCANS###
  #############
  #print "\nINSERT INTO scans values(MD5='"+MD5+"')"
  insert_text="UPDATE scans"
  print_dict_rec(aaa['scans'])

  #############
  ###SUBMISSION NAMES###
  #############
  First=True
  Fail=False
  cad=""
  for i in aaa['submission_names']:
	if First:
		cad= "\nINSERT INTO submission_names values(0,'"+MD5+"','"+sanitize(str(i))+"')"
		First=False
	else:
		try:
			cad=cad+ ", (0,'"+MD5+"','"+sanitize(str(i))+"')"
		except:
			cad=""	
			Fail=True

  if Fail:
	print ""
  else:
  	print cad+";"
		

  ##############
  ### LINKS ####
  ##############
  try:
   if 'prevx' in aaa['additional_info']:
	print "\nINSERT INTO links values(0,'"+MD5+"','prevx','"+aaa['additional_info']['prevx']+"');"

   if 'permalink' in aaa:
	print "\nINSERT INTO links values(0,'"+MD5+"','virustotal','"+aaa['permalink']+"');"

   if 'ITW_urls' in aaa:
	if aaa['ITW_urls']:
		print "\nINSERT INTO links values(0,'"+MD5+"','ITW','"+aaa['ITW_urls'][0]+"');"
		
   if 'cwsandbox' in aaa['additional_info']:
		print "\nINSERT INTO links values(0,'"+MD5+"','cwsandbox','"+aaa['additional_info']['cwsandbox']+"');"
  except:
	print ""

  #############
  ###PACKERS###
  #############
  if 'peid' in aaa['additional_info']:
	print "\nINSERT INTO PACKERS2 values (0,'"+MD5+"','peid','"+sanitize(aaa['additional_info']['peid'])+"');" 

  if 'f-prot-unpacker' in aaa['additional_info']:
	print "\nINSERT INTO PACKERS2 values (0,'"+MD5+"','f-prot','"+aaa['additional_info']['f-prot-unpacker']+"');" 

  if 'command-unpacker' in aaa['additional_info']:
	print "\nINSERT INTO PACKERS2 values (0,'"+MD5+"','command','"+aaa['additional_info']['command-unpacker']+"');" 

  #############
   ### AUTOSTART ###
  #############
  if 'autostart' in aaa['additional_info']:
	for i in aaa['additional_info']['autostart']:
		print "\nINSERT INTO autostart values (0,'"+MD5+"','"+i['entry']+"','"+i['location']+"');" 
		#print

  #############
  ### .NET GUID ###
  #############
  if 'netguids' in aaa['additional_info']:
	print "\nINSERT INTO netguids values (0,'"+MD5+"','"+aaa['additional_info']['netguids']['mvid']+"');" 

  #############
  ### TRENDMICRO HEURISTIC ###
  #############
  if 'trendmicro-housecall-heuristic' in aaa['additional_info']:
	print "\nINSERT INTO trendmicro_heuristics values (0,'"+MD5+"','"+aaa['additional_info']['trendmicro-housecall-heuristic']+"');" 

  #############
  ### DEEPGUARD ###
  #############
  if 'deepguard' in aaa['additional_info']:
	print "\nINSERT INTO deepguard values (0,'"+MD5+"','"+aaa['additional_info']['deepguard']+"');" 


  data_file.close()


print "UNLOCK TABLES extra WRITE, FileSystem WRITE, HOOKING WRITE, HOSTS_FILE WRITE, mutex WRITE, TCP WRITE, UDP WRITE, DNS WRITE, HTTP WRITE, processes WRITE, RUNTIME_DLLS WRITE, exiftool WRITE, ALYac WRITE, AVG WRITE, AVware WRITE, Ad_Aware WRITE, AegisLab WRITE, Agnitum WRITE, AhnLab_V3 WRITE, Alibaba WRITE, Antiy_AVL WRITE, Arcabit WRITE, Avast WRITE, Avira WRITE, Baidu_International WRITE, BitDefender WRITE, Bkav WRITE, ByteHero WRITE, CAT_QuickHeal WRITE, CMC WRITE, CRC WRITE, ClamAV WRITE, Commtouch WRITE, Comodo WRITE, Copied_Files WRITE, Cyren WRITE, DNS WRITE, DrWeb WRITE, ESET_NOD32 WRITE, Emsisoft WRITE, F_Prot WRITE, F_Secure WRITE, FileSystem WRITE, Fortinet WRITE, GData WRITE, GENERAL WRITE, HASHES WRITE, HOOKING WRITE, HOSTS_FILE WRITE, HTTP WRITE, Ikarus WRITE, Jiangmin WRITE, K7AntiVirus WRITE, K7GW WRITE, Kaspersky WRITE, Kingsoft WRITE, Malwarebytes WRITE, McAfee WRITE, McAfee_GW_Edition WRITE, MicroWorld_eScan WRITE, Microsoft WRITE, NANO_Antivirus WRITE, Norman WRITE, PACKERS2 WRITE, PE WRITE, PE_Resource_detail WRITE, PE_Resources WRITE, PE_Sections WRITE, Panda WRITE, Qihoo_360 WRITE, RUNTIME_DLLS WRITE, Rising WRITE, SIGCHECK WRITE, SUPERAntiSpyware WRITE, Sophos WRITE, Symantec WRITE, TCP WRITE, Tencent WRITE, TheHacker WRITE, TotalDefense WRITE, TrendMicro WRITE, TrendMicro_HouseCall WRITE, UDP WRITE, VBA32 WRITE, VIPRE WRITE, ViRobot WRITE, Zillya WRITE, Zoner WRITE, autostart WRITE, clamav WRITE, counter_signers_details WRITE, deepguard WRITE, eSafe WRITE, exiftool WRITE, exports WRITE, filetype WRITE, imports WRITE, imports2 WRITE, links WRITE, mutex WRITE, nProtect WRITE, netguids WRITE, opened_managers WRITE, overlay WRITE, packers WRITE, pescan WRITE, pescanner WRITE, processes WRITE, resources WRITE, samples WRITE, services WRITE, shellcmds WRITE, signers_details WRITE, submission_names WRITE, suspicious_sections WRITE, trendmicro_heuristics WRITE, verinfo WRITE, windows_searched WRITE, yara WRITE;"
