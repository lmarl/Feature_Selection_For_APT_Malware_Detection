@inproceedings{Chen2014,
abstract = {A recent class of threats, known as Advanced Persistent Threats (APTs), has drawn increasing attention from researchers, primarily from the industrial security sector. APTs are cyber attacks executed by sophisticated and well-resourced adversaries targeting specific information in high-profile companies and governments, usually in a long term campaign involving different steps. To a significant extent, the academic community has neglected the specificity of these threats and as such an objective approach to the APT issue is lacking. In this paper, we present the results of a comprehensive study on APT, characterizing its distinguishing characteristics and attack model, and analyzing techniques commonly seen in APT attacks. We also enumerate some non-conventional countermeasures that can help to mitigate APTs, hereby highlighting the directions for future research. {\textcopyright} 2014 IFIP International Federation for Information Processing.},
author = {Chen, Ping and Desmet, Lieven and Huygens, Christophe},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-662-44885-4-5},
isbn = {9783662448847},
issn = {16113349},
keywords = {APT,advanced threat,cyber security,sophisticated attacks},
pages = {63--72},
publisher = {Springer Verlag},
title = {A study on advanced persistent threats},
volume = {8735 LNCS},
year = {2014}
}
@techreport{FireEyea,
author = {FireEye},
pages = {52},
title = {{M-Trends 2018}},
url = {https://www.fireeye.com/content/dam/collateral/en/mtrends-2018.pdf},
year = {2018}
}
@article{Andress2011,
author = {Andress, Jason},
journal = {The ISSA Journal},
pages = {18--19},
title = {{Advanced Persistent Threat Attacker Sophistication Continues to Grow?}},
year = {2011}
}
@misc{Cloppert,
author = {Cloppert, Mike},
booktitle = {Computer Forensics Blog, SANS.org.},
title = {{Security Intelligence: Introduction}},
url = {http://static.usenix.org/event/lisa09/tech/slides/daly.pdf}
}
@inproceedings{Daly2009,
author = {Daly, Michael K.},
booktitle = {23rd Annual Large Installation System Administration Conference},
title = {{The Advanced Persistent Threat (or Informationized Force Operations)}},
year = {2009}
}
@article{Cutler2009,
author = {Cutler, Terry},
journal = {SecurityWeek},
title = {{The Anatomy of an Advanced Persistent Threat}},
url = {https://www.securityweek.com/anatomy-advanced-persistent-threat},
year = {2009}
}
@article{Nicho2014,
abstract = {One of the most serious and persistent threat that has emerged in recent years combining technical as well as non-technical skills is the Advanced Persistent Threat, commonly known as APT where hackers circumvent the organizational defenses and instead target the naivety of the employees in making an unintentional mistake. While this threat has gained prominence in recent years, research on its cause and mitigation is still at the infancy stage. In this paper the authors explore APT vulnerabilities from an organizational perspective to create a taxonomy of non-technical and technical vulnerabilities. The objective is to enhance awareness and detection of APT vulnerabilities by managers and end users. To this end, the authors conducted interviews with senior IT managers in three large organizations in Dubai, United Arab Emirates. The analysis of the findings suggested that the APT threat environment is affected by multiple factors spanning primarily non-technical as well as technical vulnerabilities.},
author = {Nicho, Mathew},
doi = {10.4018/ijisp.2014010101},
journal = {International Journal of Information Security and Privacy (IJISP)},
pages = {18},
title = {{Identifying Vulnerabilities of Advanced Persistent Threats: An Organizational Perspective}},
volume = {8},
year = {2014}
}
@article{Tankard2011,
abstract = {Advanced Persistent Threat (APT) is a term coined over the past couple of years for a new breed of insidious threats that use multiple attack techniques and vectors and that are conducted by stealth to avoid detection so that hackers can retain control over target systems unnoticed for long periods of time. Traditional defences aimed at keeping known threats out of the network are no longer sufficient against the exploits being used to conduct such attacks. The focus should be on developing a defence in depth strategy that aims to constantly monitor networks and security controls for their effectiveness, explains Colin Tankard of Digital Pathways. The UK Government has recently estimated that cybercrime costs the country some {\pounds}27bn per year and, according to some estimates, the global cost is {\$}1 trillion every year. This crime wave has been greatly facilitated by the rise of electronic communications, primarily those making use of the Internet. The purpose of electronic communications is to make it more efficient and easier to communicate – but they are also relatively easy to attack or intercept. No-one is immune – such attacks are aimed at individuals, small firms, multinationals and governments.},
author = {Tankard, Colin},
doi = {10.1016/S1353-4858(11)70086-1},
issn = {1353-4858},
journal = {Network Security},
month = {aug},
number = {8},
pages = {16--19},
publisher = {Elsevier Advanced Technology},
title = {{Advanced Persistent threats and how to monitor and deter them}},
url = {https://www.sciencedirect.com/science/article/pii/S1353485811700861},
volume = {2011},
year = {2011}
}
@inproceedings{Vukalovic2015,
author = {Vukalovic, J. and Delija, D.},
booktitle = {38th International Convention on Information and Communication Technology, Electronics and Microelectronics (MIPRO)},
doi = {10.1109/MIPRO.2015.7160480},
isbn = {978-9-5323-3082-3},
month = {may},
pages = {1324--1330},
publisher = {IEEE},
title = {{Advanced Persistent Threats - detection and defense}},
url = {http://ieeexplore.ieee.org/document/7160480/},
year = {2015}
}
@inproceedings{Ussath2016,
author = {Ussath, Martin and Jaeger, David and Cheng, Feng and Meinel, Christoph},
booktitle = {2016 Annual Conference on Information Science and Systems (CISS)},
doi = {10.1109/CISS.2016.7460498},
isbn = {978-1-4673-9457-4},
month = {mar},
pages = {181--186},
publisher = {IEEE},
title = {{Advanced persistent threats: Behind the scenes}},
url = {http://ieeexplore.ieee.org/document/7460498/},
year = {2016}
}
@article{Sexton2016,
author = {Sexton, Joseph and Storlie, Curtis and Anderson, Blake},
doi = {10.1007/s11416-015-0258-7},
issn = {2263-8733},
journal = {Journal of Computer Virology and Hacking Techniques},
month = {nov},
number = {4},
pages = {225--233},
publisher = {Springer Paris},
title = {{Subroutine based detection of APT malware}},
url = {http://link.springer.com/10.1007/s11416-015-0258-7},
volume = {12},
year = {2016}
}
@inproceedings{LaiA.WuB.Chiu2011,
author = {Lai, A. and Wu, B. and Chiu, J.},
booktitle = {Defcon 19},
title = {{Balancing the PWN trade deficit series: APT secrets in Asia}},
url = {http://www.defcon.org/images/defcon-19/ dc-19-presentations/Lai-Wu-Chiu-PK/DEFCON-19-Lai-WuChiu-PK-APT-Secrets-2},
year = {2011}
}
@inproceedings{Ruttenberg2014,
abstract = {Recent reports from the anti-malware industry indicate similarity between malware code resulting from code reuse can aid in developing a profile of the attackers. We describe a method for identifying shared components in a large corpus of malware, where a component is a collection of code, such as a set of procedures, that implement a unit of functionality. We develop a general architecture for identifying shared components in a corpus using a two-stage clustering technique. While our method is parametrized on any features extracted from a binary, our implementation uses features abstracting the semantics of blocks of instructions. Our system has been found to identify shared components with extremely high accuracy in a rigorous, controlled experiment conducted independently by MITLL. Our technique provides an automated method to find between malware code functional relationships that may be used to establish evolutionary relationships and aid in forensics.},
author = {Ruttenberg, Brian and Miles, Craig and Kellogg, Lee and Notani, Vivek and Howard, Michael and LeDoux, Charles and Lakhotia, Arun and Pfeffer, Avi},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-08509-8-2},
isbn = {9783319085081},
issn = {16113349},
pages = {21--40},
publisher = {Springer Verlag},
title = {{Identifying shared software components to support malware forensics}},
volume = {8550 LNCS},
year = {2014}
}
@article{Ghafir2018,
abstract = {As one of the most serious types of cyber attack, Advanced Persistent Threats (APT) have caused major concerns on a global scale. APT refers to a persistent, multi-stage attack with the intention to compromise the system and gain information from the targeted system, which has the potential to cause significant damage and substantial financial loss. The accurate detection and prediction of APT is an ongoing challenge. This work proposes a novel machine learning-based system entitled MLAPT, which can accurately and rapidly detect and predict APT attacks in a systematic way. The MLAPT runs through three main phases: (1) Threat detection, in which eight methods have been developed to detect different techniques used during the various APT steps. The implementation and validation of these methods with real traffic is a significant contribution to the current body of research; (2) Alert correlation, in which a correlation framework is designed to link the outputs of the detection methods, aims to identify alerts that could be related and belong to a single APT scenario; and (3) Attack prediction, in which a machine learning-based prediction module is proposed based on the correlation framework output, to be used by the network security team to determine the probability of the early alerts to develop a complete APT attack. MLAPT is experimentally evaluated and the presented system is able to predict APT in its early steps with a prediction accuracy of 84.8{\%}.},
author = {Ghafir, Ibrahim and Hammoudeh, Mohammad and Prenosil, Vaclav and Han, Liangxiu and Hegarty, Robert and Rabie, Khaled and Aparicio-Navarro, Francisco J.},
doi = {10.1016/j.future.2018.06.055},
issn = {0167739X},
journal = {Future Generation Computer Systems},
keywords = {Advanced persistent threat,Alert correlation,Cyber attacks,Intrusion detection system,Machine learning,Malware},
pages = {349--359},
title = {{Detection of advanced persistent threat using machine-learning correlation analysis}},
volume = {89},
year = {2018}
}
@article{Gandotra2014,
abstract = {One of the major and serious threats on the
Internet today is malicious software, often referred to as a malware. The
malwares being designed by attackers are polymorphic and metamorphic which have
the ability to change their code as they propagate. Moreover, the diversity and
volume of their variants severely undermine the effectiveness of traditional
defenses which typically use signature based techniques and are unable to
detect the previously unknown malicious executables. The variants of malware
families share typical behavioral patterns reflecting their origin and purpose.
The behavioral patterns obtained either statically or dynamically can be
exploited to detect and classify unknown malwares into their known families
using machine learning techniques. This survey paper provides an overview of
techniques for analyzing and classifying the malwares.},
author = {Gandotra, Ekta and Bansal, Divya and Sofat, Sanjeev},
doi = {10.4236/jis.2014.52006},
issn = {2153-1234},
journal = {Journal of Information Security},
month = {feb},
number = {02},
pages = {56--64},
publisher = {Scientific Research Publishing},
title = {{Malware Analysis and Classification: A Survey}},
url = {http://www.scirp.org/journal/doi.aspx?DOI=10.4236/jis.2014.52006},
volume = {05},
year = {2014}
}
@article{Harikrishnan2018,
abstract = {Advance persistent threats (APT) are the recently emerged hazard against the modern organization. It is the most challenging attack to detect because of its unique and complex nature. APTs are network specific attacks which span over a long period of time to ex-filtrate sensitive information of various targets. Unlike automated mindless threats, they are skilled, motivated and organized attacks conducted by Cyber Crime Organizations. Present systems use either network analyzer or some host based insider threat detection mechanisms to detect APTs. In this work we analyzeAPTs using splunk-Security Information and Event Management (SIEM). SIEM is the most modern security solution which gave the ability to monitor all the events that are happening inside each system and represent each of the logs in a well-mannered form. 100 of samples of APT logs are compared against the normal event logs to identify the behaviour of an APT. Based on the analysis we developed a set of features that every APT contains. We are also proposing an efficient approach to identify the exfiltration of this APT by using the modern technology called machine learning tool kit.},
author = {Harikrishnan, V N and Kumar, Gireesh},
journal = {International Journal of Pure and Applied Mathematics},
number = {No. 20 },
pages = {3761--3768},
title = {{Advanced Persistent Threat Analysis using Splunk}},
volume = {Volume 118},
year = {2018}
}
@phdthesis{Brogi2018,
author = {Brogi, Guillaume},
school = {Conservatoire National des Arts et M\'etiers},
keywords = {Machine learning Intrusion detection system},
month = {apr},
title = {{Real-time detection of Advanced Persistent Threats using Information Flow Tracking and Hidden Markov Models}},
url = {http://www.theses.fr/2018CNAM1167},
year = {2018}
}
@techreport{Acs-Kurucz2014,
author = {{{\'{A}}cs -Kurucz}, G{\'{a}}bor and Bal{\'{a}}zs, Zolt{\'{a}}n and Bencs{\'{a}}th, Boldizs{\'{a}}r and Butty{\'{a}}n, Levente and Kamar{\'{a}}s, Roland and Moln{\'{a}}r, G{\'{a}}bor and Vasp{\"{o}}ri, G{\'{a}}bor},
title = {{An independent test of APT attack detection appliances}},
url = {http://www.fireeye.com/blog/technical/cyber-exploits/2013/02/in-turn-},
year = {2014}
}
@incollection{Lamprakis2017,
author = {Lamprakis, Pavlos and Dargenio, Ruggiero and Gugelmann, David and Lenders, Vincent and Happe, Markus and Vanbever, Laurent},
doi = {10.1007/978-3-319-60876-1-17},
pages = {366--387},
publisher = {Springer, Cham},
title = {{Unsupervised Detection of APT C{\&}C Channels using Web Request Graphs}},
url = {http://link.springer.com/10.1007/978-3-319-60876-1-17},
year = {2017}
}
@inproceedings{Vance2014,
author = {Vance, Andrew},
booktitle = {2014 First International Scientific-Practical Conference Problems of Infocommunications Science and Technology},
doi = {10.1109/INFOCOMMST.2014.6992342},
isbn = {978-1-4799-7342-2},
month = {oct},
pages = {173--176},
publisher = {IEEE},
title = {{Flow based analysis of Advanced Persistent Threats detecting targeted attacks in cloud computing}},
url = {http://ieeexplore.ieee.org/document/6992342/},
year = {2014}
}
@article{Zhao2015,
author = {Zhao, G. and Xu, K. and Xu, L. and Wu, B.},
doi = {10.1109/ACCESS.2015.2458581},
issn = {2169-3536},
journal = {IEEE Access},
pages = {1132--1142},
title = {{Detecting APT Malware Infections Based on Malicious DNS and Traffic Analysis}},
url = {http://ieeexplore.ieee.org/document/7163279/},
volume = {3},
year = {2015}
}
@inproceedings{Siddiqui2016,
address = {New York, New York, USA},
author = {Siddiqui, Sana and Khan, Muhammad Salman and Ferens, Ken and Kinsner, Witold},
booktitle = {Proceedings of the 2016 ACM on International Workshop on Security And Privacy Analytics - IWSPA '16},
doi = {10.1145/2875475.2875484},
isbn = {9781450340779},
keywords = {advanced persistent threats (apt),classification,complexity,cyber threats,machine learning,multifractal,remote trojans},
pages = {64--69},
publisher = {ACM Press},
title = {{Detecting Advanced Persistent Threats using Fractal Dimension based Machine Learning Classification}},
url = {http://dl.acm.org/citation.cfm?doid=2875475.2875484},
year = {2016}
}
@inproceedings{Pei2016,
address = {New York, New York, USA},
author = {Pei, Kexin and Gu, Zhongshu and Saltaformaggio, Brendan and Ma, Shiqing and Wang, Fei and Zhang, Zhiwei and Si, Luo and Zhang, Xiangyu and Xu, Dongyan},
booktitle = {Proceedings of the 32nd Annual Conference on Computer Security Applications - ACSAC '16},
doi = {10.1145/2991079.2991122},
isbn = {9781450347716},
pages = {583--595},
publisher = {ACM Press},
title = {{Hercule: Attack Story Reconstruction via Community Discovery on Correlated Log Graph.}},
url = {http://dl.acm.org/citation.cfm?doid=2991079.2991122},
year = {2016}
}
@inproceedings{Nath2014,
abstract = {Malware analysis forms a critical component of cyber defense mechanism. In the last decade, lot of research has been done, using machine learning methods on both static as well as dynamic analysis. Since the aim and objective of malware developers have changed from just for fame to political espionage or financial gain, the malware is also getting evolved in its form, and infection methods. One of the latest form of malware is known as targeted malware, on which not much research has happened. Targeted malware, which is a superset of Advanced Persistent Threat (APT), is growing in its volume and complexity in recent years. Targeted Cyber attack (through targeted malware) plays an increasingly malicious role in disrupting the online social and financial systems. APTs are designed to steal corporate / national secrets and/or harm national/corporate interests. It is difficult to recognize targeted malware by antivirus, IDS, IPS and custom malware detection tools. Attackers leverage compelling social engineering techniques along with one or more zero day vulnerabilities for deploying APTs. Along with these, the recent introduction of Crypto locker and Ransom ware pose serious threats to organizations/nations as well as individuals. In this paper, we compare various machine-learning techniques used for analyzing malwares, focusing on static analysis. {\textcopyright} Springer-Verlag Berlin Heidelberg 2014.},
author = {Nath, Hiran V. and Mehtre, Babu M.},
booktitle = {Communications in Computer and Information Science},
doi = {10.1007/978-3-642-54525-2-39},
isbn = {9783642545245},
issn = {18650929},
keywords = {Advanced Persistent Threat,Cyber Defence,Machine Learning,Malware,Static Analysis},
pages = {440--450},
publisher = {Springer Verlag},
title = {{Static Malware Analysis Using Machine Learning Methods}},
volume = {420 CCIS},
year = {2014}
}
@inproceedings{Vasilescu2014,
abstract = {The past years have shown an increase in the both number and sophistication of cyber-attacks targeting Windows and Linux operating systems. Traditional network security solutions such as firewalls are incapable of detecting and stopping these attacks. In this paper, we describe our distributed firewall solution Distfw and its integration with a sandbox for malware analysis and detection. We demonstrate the effectiveness and shortcomings of such a solution. We use Cuckoo to perform automated analysis of malware samples and compare the results with the ones from manual analysis. We discover that Cuckoo provides similar results in a considerable amount of time.},
author = {Vasilescu, Mihai and Gheorghe, Laura and Tapus, Nicolae},
booktitle = {Proceedings - RoEduNet IEEE International Conference},
doi = {10.1109/RoEduNet-RENAM.2014.6955304},
isbn = {9781479968602},
issn = {20681038},
keywords = {malware,malware analysis,network security,sandbox},
month = {nov},
publisher = {IEEE Computer Society},
title = {{Practical malware analysis based on sandboxing}},
year = {2014}
}
@inproceedings{Li2011,
author = {Li, Frankie and Lai, Anthony and Ddl, Ddl},
booktitle = {2011 6th International Conference on Malicious and Unwanted Software},
doi = {10.1109/MALWARE.2011.6112333},
isbn = {978-1-4673-0034-6},
month = {oct},
pages = {102--109},
publisher = {IEEE},
title = {{Evidence of Advanced Persistent Threat: A case study of malware for political espionage}},
url = {http://ieeexplore.ieee.org/document/6112333/},
year = {2011}
}
@article{Sornil2013,
abstract = {Malware family identification is a complex process involving extraction of distinctive characteristics from a set of malware samples. Malware authors employ various techniques to prevent the identification of unique characteristics of their programs, such as encryption and obfuscation. In this paper, we present n-gram based sequential features extracted from content of the files. N-grams are extracted from malicious program files; sequential n-gram patterns are determined; pattern statistics are calculated and reduced by the sequential floating forward selection method; and a classifier is used to determine the family of malware. Three classification models which are C4.5, multilayer perceptron, and support vector machine are studied. Experimental results on a standard malware test collection show that the proposed method performs well, with the classification accuracy of 96.64{\%}.},
author = {Sornil, Ohm and Liangboonprakong, Chatchai},
doi = {10.4156/ijipm.vol4.issue5.7},
journal = {International Journal of Information Processing and Management},
keywords = {C45,Malware Classification,Multilayer Perceptron,N-Gram,Sequential Floating Forward Selection,Sequential Pattern,Support Vector Machine},
number = {4(5)},
pages = {59--67},
title = {{Malware Classification Using N-grams Sequential Pattern Features}},
volume = {July},
year = {2013}
}
@inproceedings{Bhatt2014,
author = {Bhatt, Parth and Yano, Edgar Toshiro and Gustavsson, Per},
booktitle = {2014 IEEE 8th International Symposium on Service Oriented System Engineering},
doi = {10.1109/SOSE.2014.53},
isbn = {978-1-4799-3616-8},
month = {apr},
pages = {390--395},
publisher = {IEEE},
title = {{Towards a Framework to Detect Multi-stage Advanced Persistent Threats Attacks}},
url = {http://ieeexplore.ieee.org/document/6830935/},
year = {2014}
}
@inproceedings{DeVries2012,
author = {de Vries, Johannes and Hoogstraaten, Hans and van den Berg, Jan and Daskapan, Semir},
booktitle = {2012 International Conference on Cyber Security},
doi = {10.1109/CyberSecurity.2012.14},
isbn = {978-1-4799-0219-4},
month = {dec},
pages = {54--61},
publisher = {IEEE},
title = {{Systems for Detecting Advanced Persistent Threats: A Development Roadmap Using Intelligent Data Analysis}},
url = {http://ieeexplore.ieee.org/document/6542526/},
year = {2012}
}
@inproceedings{Giura2012,
author = {Giura, Paul and Wang, Wei},
booktitle = {2012 International Conference on Cyber Security},
doi = {10.1109/CyberSecurity.2012.16},
isbn = {978-1-4799-0219-4},
month = {dec},
pages = {69--74},
publisher = {IEEE},
title = {{A Context-Based Detection Framework for Advanced Persistent Threats}},
url = {http://ieeexplore.ieee.org/document/6542528/},
year = {2012}
}
@article{Ronen2018,
abstract = {The Microsoft Malware Classification Challenge was announced in 2015 along with a publication of a huge dataset of nearly 0.5 terabytes, consisting of disassembly and bytecode of more than 20K malware samples. Apart from serving in the Kaggle competition, the dataset has become a standard benchmark for research on modeling malware behaviour. To date, the dataset has been cited in more than 50 research papers. Here we provide a high-level comparison of the publications citing the dataset. The comparison simplifies finding potential research directions in this field and future performance evaluation of the dataset.},
archivePrefix = {arXiv},
arxivId = {1802.10135},
author = {Ronen, Royi and Radu, Marian and Feuerstein, Corina and Yom-Tov, Elad and Ahmadi, Mansour},
eprint = {1802.10135},
month = {feb},
title = {{Microsoft Malware Classification Challenge}},
url = {http://arxiv.org/abs/1802.10135},
year = {2018}
}
@inproceedings{Su2016,
address = {Paris, France},
author = {Su, Yunfei and Li, Mengjun and Tang, ChaoJing and Shen, Rongjun},
booktitle = {Proceedings of the 2015 4th National Conference on Electrical, Electronics and Computer Engineering},
doi = {10.2991/nceece-15.2016.187},
isbn = {978-94-6252-150-6},
issn = {2352-5401},
keywords = {APT detection.,Advanced persistent threat,dynamic analysis},
month = {dec},
publisher = {Atlantis Press},
title = {{A Framework of APT Detection Based on Dynamic Analysis}},
url = {http://www.atlantis-press.com/php/paper-details.php?id=25847055},
year = {2016}
}
@article{Laurenza2018,
abstract = {In the last decade, a new class of cyber-threats has emerged. This new cybersecurity adversary is known with the name of "Advanced Persistent Threat" (APT) and is referred to different organizations that in the last years have been "in the center of the eye" due to multiple dangerous and effective attacks targeting financial and politic, news headlines, embassies, critical infrastructures, TV programs, etc. In order to early identify APT related malware, a semi-automatic approach for malware samples analysis is needed. In our previous work we introduced a "malware triage" step for a semi-automatic malware analysis architecture. This step has the duty to analyze as fast as possible new incoming samples and to immediately dispatch the ones that deserve a deeper analysis, among all the malware delivered per day in the cyber-space, the ones that really worth to be further examined by analysts. Our paper focuses on malware developed by APTs, and we build our knowledge base, used in the triage, on known APTs obtained from publicly available reports. In order to have the triage as fast as possible, we only rely on static malware features, that can be extracted with negligible delay, and use machine learning techniques for the identification. In this work we move from multiclass classification to a group of oneclass classifier, which simplify the training and allows higher modularity. The results of the proposed framework highlight high performances, reaching a precision of 100{\%} and an accuracy over 95{\%}},
archivePrefix = {arXiv},
arxivId = {1810.07321},
author = {Laurenza, Giuseppe and Lazzeretti, Riccardo and Mazzotti, Luca},
eprint = {1810.07321},
file = {:C$\backslash$:/Users/martinll/Downloads/1810.07321.pdf:pdf},
title = {{Malware triage for early identification of Advanced Persistent Threat activities}},
url = {http://arxiv.org/abs/1810.07321},
year = {2018}
}
@article{Niu2017,
abstract = {Advanced Persistent Threat (APT) is a serious threat against sensitive information. Current detection approaches are time-consuming since they detect APT attack by in-depth analysis of massive amounts of data after data breaches. Specifically, APT attackers make use of DNS to locate their command and control (C{\&}C) servers and victims' machines. In this paper, we propose an efficient approach to detect APT malware C{\&}C domain with high accuracy by analyzing DNS logs. We first extract 15 features from DNS logs of mobile devices. According to Alexa ranking and the VirusTotal's judgement result, we give each domain a score. Then, we select the most normal domains by the score metric. Finally, we utilize our anomaly detection algorithm, called Global Abnormal Forest (GAF), to identify malware C{\&}C domains. We conduct a performance analysis to demonstrate that our approach is more efficient than other existing works in terms of calculation efficiency and recognition accuracy. Compared with Local Outlier Factor (LOF), k -Nearest Neighbor (KNN), and Isolation Forest (iForest), our approach obtains more than 99{\%} F - M and R for the detection of C{\&}C domains. Our approach not only can reduce data volume that needs to be recorded and analyzed but also can be applicable to unsupervised learning.},
author = {Niu, Weina and Zhang, Xiaosong and Yang, GuoWu and Zhu, Jianan and Ren, Zhongwei},
doi = {10.1155/2017/4916953},
file = {:C$\backslash$:/Users/martinll/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Niu et al. - 2017 - Identifying APT Malware Domain Based on Mobile DNS Logging.pdf:pdf},
issn = {1024-123X},
journal = {Mathematical Problems in Engineering},
month = {apr},
pages = {1--9},
publisher = {Hindawi},
title = {{Identifying APT Malware Domain Based on Mobile DNS Logging}},
url = {https://www.hindawi.com/journals/mpe/2017/4916953/},
volume = {2017},
year = {2017}
}
@article{Anderson2018,
abstract = {This paper describes EMBER: a labeled benchmark dataset for training machine learning models to statically detect malicious Windows portable executable files. The dataset includes features extracted from 1.1M binary files: 900K training samples (300K malicious, 300K benign, 300K unlabeled) and 200K test samples (100K malicious, 100K benign). To accompany the dataset, we also release open source code for extracting features from additional binaries so that additional sample features can be appended to the dataset. This dataset fills a void in the information security machine learning community: a benign/malicious dataset that is large, open and general enough to cover several interesting use cases. We enumerate several use cases that we considered when structuring the dataset. Additionally, we demonstrate one use case wherein we compare a baseline gradient boosted decision tree model trained using LightGBM with default settings to MalConv, a recently published end-to-end (featureless) deep learning model for malware detection. Results show that even without hyper-parameter optimization, the baseline EMBER model outperforms MalConv. The authors hope that the dataset, code and baseline model provided by EMBER will help invigorate machine learning research for malware detection, in much the same way that benchmark datasets have advanced computer vision research.},
archivePrefix = {arXiv},
arxivId = {1804.04637},
author = {Anderson, Hyrum S. and Roth, Phil},
eprint = {1804.04637},
file = {:C$\backslash$:/Users/martinll/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Anderson, Roth - 2018 - EMBER An Open Dataset for Training Static PE Malware Machine Learning Models.pdf:pdf},
month = {apr},
title = {{EMBER: An Open Dataset for Training Static PE Malware Machine Learning Models}},
url = {http://arxiv.org/abs/1804.04637},
year = {2018}
}
@inproceedings{Shafiq2009,
abstract = {In this paper, we present an accurate and realtime PE-Miner framework that automatically extracts distinguishing features from portable executables (PE) to detect zero-day (i.e. previously unknown) malware. The distinguishing features are extracted using the structural information standardized by the Microsoft Windows operating system for executables, DLLs and object files. We follow a threefold research methodology: (1) identify a set of structural features for PE files which is computable in realtime, (2) use an efficient preprocessor for removing redundancy in the features' set, and (3) select an efficient data mining algorithm for final classification between benign and malicious executables. We have evaluated PE-Miner on two malware collections, VX Heavens and Malfease datasets which contain about 11 and 5 thousand malicious PE files respectively. The results of our experiments show that PE-Miner achieves more than 99{\%} detection rate with less than 0.5{\%} false alarm rate for distinguishing between benign and malicious executables. PE-Miner has low processing overheads and takes only 0.244 seconds on the average to scan a given PE file. Finally, we evaluate the robustness and reliability of PE-Miner under several regression tests. Our results show that the extracted features are robust to different packing techniques and PE-Miner is also resilient to majority of crafty evasion strategies. {\textcopyright} 2009 Springer Berlin Heidelberg.},
author = {Shafiq, M. Zubair and Tabish, S. Momina and Mirza, Fauzan and Farooq, Muddassar},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-04342-0-7},
isbn = {3642043410},
issn = {03029743},
keywords = {Data Mining,Malicious Executable Detection,Malware Detection,Portable Executables,Structural Information},
pages = {121--141},
title = {{PE-miner: Mining structural information to detect malicious executables in realtime}},
volume = {5758 LNCS},
year = {2009}
}
@article{Witten1999,
author = {Witten, Ian H. and Frank, Eibe and Trigg, Leonard E. and Hall, Mark A. and Holmes, Geoffrey and Cunningham, Sally Jo},
keywords = {Working Paper,computer science},
title = {{Weka: Practical machine learning tools and techniques with Java implementations}},
url = {https://researchcommons.waikato.ac.nz/handle/10289/1040},
year = {1999}
}
@article{Zhang2015,
abstract = {While there are various model selection methods, an unanswered but important question is how to select one of them for data at hand. The difficulty is due to that the targeted behaviors of the model selection procedures depend heavily on uncheckable or difficult-to-check assumptions on the data generating process. Fortunately, cross-validation (CV) provides a general tool to solve this problem. In this work, results are provided on how to apply CV to consistently choose the best method, yielding new insights and guidance for potentially vast amount of application. In addition, we address several seemingly widely spread misconceptions on CV.},
author = {Zhang, Yongli and Yang, Yuhong},
doi = {10.1016/j.jeconom.2015.02.006},
isbn = {0304-4076},
issn = {18726895},
journal = {Journal of Econometrics},
keywords = {Adaptive procedure selection,Cross-validation,Cross-validation paradox,Data splitting ratio,Information criterion,LASSO,MCP,SCAD},
title = {{Cross-validation for selecting a model selection procedure}},
year = {2015}
}
@article{Shlens2014,
abstract = {Principal component analysis (PCA) is a mainstay of modern data analysis - a black box that is widely used but (sometimes) poorly understood. The goal of this paper is to dispel the magic behind this black box. This manuscript focuses on building a solid intuition for how and why principal component analysis works. This manuscript crystallizes this knowledge by deriving from simple intuitions, the mathematics behind PCA. This tutorial does not shy away from explaining the ideas informally, nor does it shy away from the mathematics. The hope is that by addressing both aspects, readers of all levels will be able to gain a better understanding of PCA as well as the when, the how and the why of applying this technique.},
archivePrefix = {arXiv},
arxivId = {1404.1100},
author = {Shlens, Jonathon},
eprint = {1404.1100},
file = {:C$\backslash$:/Users/martinll/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shlens - 2014 - A Tutorial on Principal Component Analysis.pdf:pdf},
journal = {Google Research},
month = {apr},
title = {{A Tutorial on Principal Component Analysis}},
url = {http://arxiv.org/abs/1404.1100},
year = {2014}
}

@article{VanDerMaaten2008,
abstract = {We present a new technique called "t-SNE" that visualizes high-dimensional data by giving each datapoint a location in a two or three-dimensional map. The technique is a variation of Stochastic Neighbor Embedding (Hinton and Roweis, 2002) that is much easier to optimize, and produces significantly better visualizations by reducing the tendency to crowd points together in the center of the map. t-SNE is better than existing techniques at creating a single map that reveals structure at many different scales. This is particularly important for high-dimensional data that lie on several different, but related, low-dimensional manifolds, such as images of objects from multiple classes seen from multiple viewpoints. For visualizing the structure of very large data sets, we show how t-SNE can use random walks on neighborhood graphs to allow the implicit structure of all of the data to influence the way in which a subset of the data is displayed. We illustrate the performance of t-SNE on a wide variety of data sets and compare it with many other non-parametric visualization techniques, including Sammon mapping, Isomap, and Locally Linear Embedding. The visualiza-tions produced by t-SNE are significantly better than those produced by the other techniques on almost all of the data sets.},
author = {{Van Der Maaten}, Laurens and Hinton, Geoffrey},
journal = {Journal of Machine Learning Research},
file = {:C$\backslash$:/Users/martinll/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Van Der Maaten, Hinton - 2008 - Visualizing Data using t-SNE.pdf:pdf},
keywords = {dimensionality reduction,embedding algorithms,manifold learning,multidimensional scaling,visualization},
pages = {2579--2605},
title = {{Visualizing Data using t-SNE}},
volume = {9},
year = {2008}
}

@article{Nassar2019,
abstract = {Malicious software are categorized into families based on their static and dynamic characteristics, infection methods, and nature of threat. Visual exploration of malware instances and families in a low dimensional space helps in giving a first overview about dependencies and relationships among these instances, detecting their groups and isolating outliers. Furthermore, visual exploration of different sets of features is useful in assessing the quality of these sets to carry a valid abstract representation, which can be later used in classification and clustering algorithms to achieve a high accuracy. In this paper, we investigate one of the best dimensionality reduction techniques known as t-SNE to reduce the malware representation from a high dimensional space consisting of thousands of features to a low dimensional space. We experiment with different feature sets and depict malware clusters in 2-D. Surprisingly, t-SNE does not only provide nice 2-D drawings, but also dramatically increases the generalization power of SVM classifiers. Moreover, obtained results showed that cross-validation accuracy is much better using the 2-D embedded representation of samples than using the original high-dimensional representation.},
archivePrefix = {arXiv},
arxivId = {1901.10590},
author = {Nassar, Mohamed and Safa, Haidar},
eprint = {1901.10590},
file = {:C$\backslash$:/Users/martinll/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Nassar, Safa - 2019 - Throttling Malware Families in 2D.pdf:pdf},
month = {jan},
title = {{Throttling Malware Families in 2D}},
url = {http://arxiv.org/abs/1901.10590},
year = {2019}
}
@inproceedings{David2015,
abstract = {This paper presents a novel deep learning based method for automatic malware signature generation and classification. The method uses a deep belief network (DBN), implemented with a deep stack of denoising autoencoders, generating an invariant compact representation of the malware behavior. While conventional signature and token based methods for malware detection do not detect a majority of new variants for existing malware, the results presented in this paper show that signatures generated by the DBN allow for an accurate classification of new malware variants. Using a dataset containing hundreds of variants for several major malware families, our method achieves 98.6{\%} classification accuracy using the signatures generated by the DBN. The presented method is completely agnostic to the type of malware behavior that is logged (e.g., API calls and their parameters, registry entries, websites and ports accessed, etc.), and can use any raw input from a sandbox to successfully train the deep neural network which is used to generate malware signatures.},
author = {David, Omid E. and Netanyahu, Nathan S.},
booktitle = {2015 International Joint Conference on Neural Networks (IJCNN)},
doi = {10.1109/IJCNN.2015.7280815},
file = {:C$\backslash$:/Users/martinll/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/David, Netanyahu - 2015 - DeepSign Deep learning for automatic malware signature generation and classification.pdf:pdf},
isbn = {978-1-4799-1960-4},
keywords = {Autoencoders,Automatic Signature Generation,Deep Belief Network,Deep Learning,Malware},
month = {jul},
pages = {1--8},
publisher = {IEEE},
title = {{DeepSign: Deep learning for automatic malware signature generation and classification}},
url = {http://ieeexplore.ieee.org/document/7280815/},
year = {2015}
}
@article{Xu2005,
abstract = {Data analysis plays an indespensable role for understanding various phenomena. Cluster analysis, primitive exploration with little or no prior knowledge, consists of research developed across a wide variety of communities. The diversity, on one hand, equips us with many tools. On the other hand, the profusion of options causes confusion. We survey clustering algorithms for data sets appearing in statistics, computer science, and machine learning, and illustrate their applications in some benchmark data sets, the traveling salesman problem, and bioinformatics, a new field attracting intensive efforts. Several tightly related topics, proximity measure, and cluster validation, are also discussed. {\textcopyright} 2005 IEEE.},
author = {Xu, Rui and Wunsch, Donald},
doi = {10.1109/TNN.2005.845141},
file = {:C$\backslash$:/Users/martinll/Downloads/Xu.pdf:pdf},
issn = {10459227},
journal = {IEEE Transactions on Neural Networks},
keywords = {Adaptive resonance theory (ART),Cluster validation,Clustering,Clustering algorithm,Neural networks,Proximity,Self-organizing feature map (SOFM)},
number = {3},
pages = {645--678},
pmid = {15940994},
title = {{Survey of clustering algorithms}},
volume = {16},
year = {2005}
}
@article{Chakraborty2011,
abstract = {Incremental K-means and DBSCAN are two very important and popular clustering techniques for today's large dynamic databases (Data warehouses, WWW and so on) where data are changed at random fashion. The performance of the incremental K-means and the incremental DBSCAN are different with each other based on their time analysis characteristics. Both algorithms are efficient compare to their existing algorithms with respect to time, cost and effort. In this paper, the performance evaluation of incremental DBSCAN clustering algorithm is implemented and most importantly it is compared with the performance of incremental K-means clustering algorithm and it also explains the characteristics of these two algorithms based on the changes of the data in the database. This paper also explains some logical differences between these two most popular clustering algorithms. This paper uses an air pollution database as original database on which the experiment is performed.},
journal = {International Journal of Computer Applications},
year = {2011},
author = {Chakraborty, Sanjay and Nagwani, N. K. and Dey, Lopamudra},
file = {:C$\backslash$:/Users/martinll/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Chakraborty, Nagwani, Dey - 2014 - Performance Comparison of Incremental K-means and Incremental DBSCAN Algorithms.pdf:pdf},
volume = {27},
number = {11},
pages = {14-18},
month = {August},
title = {{Performance Comparison of Incremental K-means and Incremental DBSCAN Algorithms}},
doi = {10.5120/3346-4611},
year = {2014}
}

@article{Chakraborty2014a,
abstract = {Incremental K-means and DBSCAN are two very important and popular clustering techniques for today's large dynamic databases (Data warehouses, WWW and so on) where data are changed at random fashion. The performance of the incremental K-means and the incremental DBSCAN are different with each other based on their time analysis characteristics. Both algorithms are efficient compare to their existing algorithms with respect to time, cost and effort. In this paper, the performance evaluation of incremental DBSCAN clustering algorithm is implemented and most importantly it is compared with the performance of incremental K-means clustering algorithm and it also explains the characteristics of these two algorithms based on the changes of the data in the database. This paper also explains some logical differences between these two most popular clustering algorithms. This paper uses an air pollution database as original database on which the experiment is performed.},
archivePrefix = {arXiv},
arxivId = {1406.4751},
author = {Chakraborty, Sanjay and Nagwani, N. K. and Dey, Lopamudra},
eprint = {1406.4751},
file = {:C$\backslash$:/Users/martinll/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Chakraborty, Nagwani, Dey - 2014 - Performance Comparison of Incremental K-means and Incremental DBSCAN Algorithms.pdf:pdf},
month = {jun},
title = {{Performance Comparison of Incremental K-means and Incremental DBSCAN Algorithms}},
url = {http://arxiv.org/abs/1406.4751},
year = {2014}
}
@article{Sander1998,
abstract = {The clustering algorithm DBSCAN relies on a density-based notion of clusters and is designed to discover clusters of arbitrary shape as well as to distinguish noise. In this paper, we generalize this algorithm in two important directions. The generalized algorithm - called GDBSCAN - can cluster point objects as well as spatially extended objects according to both, their spatial and their nonspatial attributes. In addition, four applications using 2D points (astronomy), 3D points (biology), 5D points (earth science) and 2D polygons (geography) are presented, demonstrating the applicability of GDBSCAN to real-world problems. {\textcopyright} 1998 Kluwer Academic Publishers.},
author = {Sander, J{\"{o}}rg and Ester, Martin and Kriegel, Hans Peter and Xu, Xiaowei},
doi = {10.1023/A:1009745219419},
issn = {13845810},
journal = {Data Mining and Knowledge Discovery},
keywords = {Applications,Clustering algorithms,Efficiency,Spatial databases},
number = {2},
pages = {169--194},
publisher = {Springer Netherlands},
title = {{Density-based clustering in spatial databases: The algorithm GDBSCAN and its applications}},
volume = {2},
year = {1998}
}
@inproceedings{Sahay2016,
abstract = {The metamorphic malware variants with the same malicious behavior (family), can obfuscate themselves to look different from each other. This variation in structure lead to a huge signature database for traditional signature matching techniques to detect them. In order to effective and effcient detection of malwares in large amounts of executables, we need to partition these files into groups which can identify their respective families. In addition, the grouping criteria should be chosen such a way that, it can also be applied to unknown files encounter on computer for classification. This paper discusses the study of malwares and benign executables in groups to detect unknown malwares with high accuracy. We studied sizes of malwares generated by three popular second generation malwares (metamorphic malwares) creator kits viz. G2, PS-MPC and NGVCK, and observed that the size variation in any two generated malwares from same kit is not much. Hence we grouped the executables on the basis of malware sizes by using Optimal k-Means Clustering algorithm and used these obtained groups to select promising features for training (Random forest, J48, LMT, FT and NBT) classifiers to detect variants of malwares or unknown malwares. We find that detection of malwares on the basis of their respected file sizes gives accuracy up to 99.11{\%} from the classifiers.},
author = {Sahay, Sanjay K. and Sharma, Ashu},
booktitle = {Physics Procedia},
doi = {10.1016/j.procs.2016.02.115},
file = {:C$\backslash$:/Users/martinll/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sahay, Sharma - 2016 - Grouping the Executables to Detect Malwares with High Accuracy.pdf:pdf},
issn = {18753892},
keywords = {Anti-Malware,Machine Learning,Static Malware Analysis,WEKA},
pages = {667--674},
publisher = {Elsevier B.V.},
title = {{Grouping the Executables to Detect Malwares with High Accuracy}},
volume = {78},
year = {2016}
}
@article{Dietrich2012,
abstract = {We discovered and reverse engineered Feederbot, a botnet that uses DNS as carrier for its command and control. Using k-Means clustering and a Euclidean Distance based classifier, we correctly classified more than 14m DNS transactions of 42,143 malware samples concerning DNS-C{\&}C usage, revealing another bot family with DNS C{\&}C. In addition, we correctly detected DNS C{\&}C in mixed office workstation network traffic. {\textcopyright} 2011 IEEE.},
author = {Dietrich, Christian J. and Rossow, Christian and Freiling, Felix C. and Bos, Herbert and Steen, Maarten Van and Pohlmann, Norbert},
doi = {10.1109/EC2ND.2011.16},
isbn = {9780769547626},
journal = {Proceedings - 2011 7th European Conference on Computer Network Defense, EC2ND 2011},
keywords = {botnet detection,command and control,dns,malware detection},
pages = {9--16},
title = {{On botnets that use DNS for command and control}},
year = {2012}
}
@article{Antonakakis2012,
abstract = {Many botnet detection systems employ a blacklist of known command and control (C{\&}C) domains to detect bots and block their traffic. Similar to signature-based virus detection, such a botnet detection approach is static because the blacklist is updated only after running an ex- ternal (and often manual) process of domain discovery. As a response, botmasters have begun employing domain generation algorithms (DGAs) to dynamically produce a large number of randomdomain names and select a small subset for actualC{\&}Cuse. That is, aC{\&}Cdomain is ran- domly generated and used for a very short period of time, thus rendering detection approaches that rely on static domain lists ineffective. Naturally, if we know how a do- main generation algorithm works, we can generate the domains ahead of time and still identify and block bot- net C{\&}C traffic. The existing solutions are largely based on reverse engineering of the bot malware executables, which is not always feasible. In this paper we present a new technique to detect ran- domly generated domains without reversing. Our insight is that most of the DGA-generated (random) domains that a bot queries would result in Non-Existent Domain (NXDomain) responses, and that bots fromthe same bot- net (with the same DGA algorithm) would generate sim- ilarNXDomain traffic. Our approach uses a combination of clustering and classification algorithms. The cluster- ing algorithm clusters domains based on the similarity in the make-ups of domain names as well as the groups of machines that queried these domains. The classification algorithmis used to assign the generated clusters tomod- els of known DGAs. If a cluster cannot be assigned to a known model, then a new model is produced, indicating a new DGA variant or family. We implemented a pro- totype system and evaluated it on real-world DNS traffic obtained from large ISPs in North America. We report the discovery of twelve DGAs. Half of them are variants of known (botnet) DGAs, and the other half are brand new DGAs that have never been reported before.},
author = {Antonakakis, Manos and Perdisci, Roberto},
file = {:C$\backslash$:/Users/martinll/Downloads/sec12-final127.pdf:pdf},
isbn = {978-931971-95-9},
journal = {Proceedings of the 21st USENIX Security Symposium},
pages = {16},
title = {{From throw-away traffic to bots: detecting the rise of DGA-based malware}},
url = {https://www.usenix.org/system/files/conference/usenixsecurity12/sec12-final127.pdf},
year = {2012}
}
@article{Dietrich2012a,
abstract = {We discovered and reverse engineered Feederbot, a botnet that uses DNS as carrier for its command and control. Using k-Means clustering and a Euclidean Distance based classifier, we correctly classified more than 14m DNS transactions of 42,143 malware samples concerning DNS-C{\&}C usage, revealing another bot family with DNS C{\&}C. In addition, we correctly detected DNS C{\&}C in mixed office workstation network traffic. {\textcopyright} 2011 IEEE.},
author = {Dietrich, Christian J. and Rossow, Christian and Freiling, Felix C. and Bos, Herbert and Steen, Maarten Van and Pohlmann, Norbert},
doi = {10.1109/EC2ND.2011.16},
isbn = {9780769547626},
journal = {Proceedings - 2011 7th European Conference on Computer Network Defense, EC2ND 2011},
keywords = {botnet detection,command and control,dns,malware detection},
pages = {9--16},
title = {{On botnets that use DNS for command and control}},
year = {2012}
}
@misc{Iguyon2003,
abstract = {Variable and feature selection have become the focus of much research in areas of application for which datasets with tens or hundreds of thousands of variables are available. These areas include text processing of internet documents, gene expression array analysis, and combinatorial chemistry. The objective of variable selection is three-fold: improving the prediction performance of the predictors, providing faster and more cost-effective predictors, and providing a better understanding of the underlying process that generated the data. The contributions of this special issue cover a wide range of aspects of such problems: providing a better definition of the objective function, feature construction, feature ranking, multivariate feature selection, efficient search methods, and feature validity assessment methods.},
author = {Iguyon, Isabelle and Elisseeff, Andr{\'{e}}},
booktitle = {Journal of Machine Learning Research},
doi = {10.1162/153244303322753616},
issn = {15324435},
keywords = {Bioinformatics,Clustering,Computational biology,Feature selection,Filters,Gene expression,Genomics,Information retrieval,Information theory,Microarray,Model selection,Pattern discovery,Proteomics,QSAR,Space dimensionality reduction,Statistical testing,Support vector machines,Text classification,Variable selection,Wrappers},
month = {mar},
pages = {1157--1182},
title = {{An introduction to variable and feature selection}},
volume = {3},
year = {2003}
}
@inproceedings{Firdausi2010,
author = {Firdausi, Ivan and Lim, Charles and Erwin, Alva and Nugroho, Anto Satriyo},
booktitle = {2010 Second International Conference on Advances in Computing, Control, and Telecommunication Technologies},
doi = {10.1109/ACT.2010.33},
isbn = {978-1-4244-8746-2},
month = {dec},
pages = {201--203},
publisher = {IEEE},
title = {{Analysis of Machine learning Techniques Used in Behavior-Based Malware Detection}},
url = {http://ieeexplore.ieee.org/document/5675808/},
year = {2010}
}
@article{Aung2013,
abstract = {Mobile devices have become popular in our lives since they offer almost the same functionality as personal computers. Among them, Android-based mobile devices had appeared lately and, they were now an ideal target for attackers. Android-based smartphone users can get free applications from Android Application Market. But, these applications were not certified by legitimate organizations and they may contain malware applications that can steal privacy information for users. In this paper, a framework that can detect android malware applications is propos ed to help organizing Android Market. The proposed framework intends to develop a machine learning-based malware detection system on Android to detect malware applications and to enhance security and privacy of smartphone users. This system monitors various permissionbased features and events obtained from the android applications, and analyses these features by using machine learning classifiers to classify whether the application is goodware or malware.},
author = {Aung, Zarni and Zaw, Win},
issn = {2277-8616},
journal = {INTERNATIONAL JOURNAL OF SCIENTIFIC {\&} TECHNOLOGY RESEARCH},
keywords = {Android,Index Terms:-Smartphones,Machine Learning,Malware detection},
title = {{Permission-Based Android Malware Detection}},
url = {www.ijstr.org},
volume = {2},
year = {2013}
}
@article{Breiman2001,
abstract = {Random forests are a combination of tree predictors such that each tree depends on the values of a random vector sampled independently and with the same distribution for all trees in the forest. The generalization error for forests converges a.s. to a limit as the number of trees in the forest becomes large. The generalization error of a forest of tree classifiers depends on the strength of the individual trees in the forest and the correlation between them. Using a random selection of features to split each node yields error rates that compare favorably to Adaboost (Y. Freund {\&} R. Schapire, Machine Learning: Proceedings of the Thirteenth International conference, * * *, 148-156), but are more robust with respect to noise. Internal estimates monitor error, strength, and correlation and these are used to show the response to increasing the number of features used in the splitting. Internal estimates are also used to measure variable importance. These ideas are also applicable to regression.},
author = {Breiman, Leo},
doi = {10.1023/A:1010933404324},
issn = {08856125},
journal = {Machine Learning},
keywords = {Classification,Ensemble,Regression},
month = {oct},
number = {1},
pages = {5--32},
title = {{Random forests}},
volume = {45},
year = {2001}
}
@article{Cortes1995,
abstract = {The support-vector network is a new learning machine for two-group classification problems. The machine conceptually implements the following idea: input vectors are non-linearly mapped to a very high-dimension feature space. In this feature space a linear decision surface is constructed. Special properties of the decision surface ensures high generalization ability of the learning machine. The idea behind the support-vector network was previously implemented for the restricted case where the training data can be separated without errors. We here extend this result to non-separable training data. High generalization ability of support-vector networks utilizing polynomial input transformations is demonstrated. We also compare the performance of the support-vector network to various classical learning algorithms that all took part in a benchmark study of Optical Character Recognition. {\textcopyright} 1995, Kluwer Academic Publishers. All rights reserved.},
author = {Cortes, Corinna and Vapnik, Vladimir},
doi = {10.1023/A:1022627411411},
file = {:C$\backslash$:/Users/martinll/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Cortes, Vapnik - 1995 - Support-Vector Networks.pdf:pdf},
issn = {15730565},
journal = {Machine Learning},
keywords = {efficient learning algorithms,neural networks,pattern recognition,polynomial classifiers,radial basis function classifiers},
number = {3},
pages = {273--297},
title = {{Support-Vector Networks}},
volume = {20},
year = {1995}
}
@techreport{Hsu2003,
abstract = {The support vector machine (SVM) is a popular classification technique. However, beginners who are not familiar with SVM often get unsatisfactory results since they miss some easy but significant steps. In this guide, we propose a simple procedure which usually gives reasonable results.},
author = {Hsu, Chih-Wei and Chang, Chih-Chung and Lin, Chih-Jen},
title = {{A Practical Guide to Support Vector Classification}},
url = {http://www.csie.ntu.edu.tw/{~}cjlin},
year = {2003}
}
@techreport{PedregosaFABIANPEDREGOSA2011,
abstract = {Scikit-learn is a Python module integrating a wide range of state-of-the-art machine learning algorithms for medium-scale supervised and unsupervised problems. This package focuses on bringing machine learning to non-specialists using a general-purpose high-level language. Emphasis is put on ease of use, performance, documentation, and API consistency. It has minimal dependencies and is distributed under the simplified BSD license, encouraging its use in both academic and commercial settings. Source code, binaries, and documentation can be downloaded from http://scikit-learn.sourceforge.net.},
author = {Pedregosa, Fabian and Michel, Vincent and Grisel, Olivier and Blondel, Mathieu and Prettenhofer, Peter and Weiss, Ron and Vanderplas, Jake and Cournapeau, David and Varoquaux, Ga{\"{e}}l and Gramfort, Alexandre and Thirion, Bertrand, Olivier and Dubourg, Vincent and Passos, Alexandre and Brucher, Matthieu and Perrot and{\'{E}}douardand, Matthieu and Duchesnay , FR{\'{E}}douard},
booktitle = {Journal of Machine Learning Research},
keywords = {Python,model selection,supervised learning,unsupervised learning},
pages = {2825--2830},
title = {{Scikit-learn: Machine Learning in Python }},
url = {http://scikit-learn.sourceforge.net.},
volume = {12},
year = {2011}
}
@inproceedings{Shafiq2008,
abstract = {Embedded malware is a recently discovered security threat that allows malcode to be hidden inside a benign file. It has been shown that embedded malware is not detected by commercial antivirus software even when the malware signature is present in the antivirus database. In this paper, we present a novel anomaly detection scheme to detect embedded malware. We first analyze byte sequences in benign files to show that benign files' data generally exhibit a 1-st order dependence structure. Consequently, conditional n-grams provide a more meaningful representation of a file's statistical properties than traditional n-grams. To capture and leverage this correlation structure for embedded malware detection, we model the conditional distributions as Markov n -grams. For embedded malware detection, we use an information-theoretic measure, called entropy rate, to quantify changes in Markov n-gram distributions observed in a file. We show that the entropy rate of Markov n-grams gets significantly perturbed at malcode embedding locations, and therefore can act as a robust feature for embedded malware detection. We evaluate the proposed Markov n-gram detector on a comprehensive malware dataset consisting of more than 37,000 malware samples and 1,800 benign samples of six well-known filetypes. We show that the Markov n-gram detector provides better detection and false positive rates than the only existing embedded malware detection scheme. {\textcopyright} 2008 Springer-Verlag Berlin Heidelberg.},
author = {Shafiq, M. Zubair and Khayam, Syed Ali and Farooq, Muddassar},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-540-70542-0-5},
isbn = {3540705414},
issn = {03029743},
pages = {88--107},
title = {{Embedded malware detection using Markov n-Grams}},
volume = {5137 LNCS},
year = {2008}
}
@inproceedings{Szeles2019,
abstract = {Malware growth was exponential in the last years, therefore it is a tedious work to manually analyze them in order to observe when a new strain appears. In this article we present a dynamic analysis system which clusters suspicious executable files in different malware families, based on the behavioral similarities their running processes exhibit thus reducing the workload of malware analysts. We identified similarities between our approach and the problem of text clustering based on topic, achieving similar results to text clustering without semantic analysis involved. We modeled the behavior of a process by extracting sequences of Windows API functions called by that process during its execution. We separated the registered API calls on three levels, based on their impact on the system, and dealt with them as text-like terms. More complex terms were constructed with N-grams and the features were represented with TF-IDF scores. We clustered the processes with variants of the k-means algorithm and derived a method for analyzing cluster characteristics in order to determine the best number of clusters to be considered. Finally, we identified the API level and N-gram lengths required to obtain relevant clusters.},
author = {Sz{\'{e}}les, Gergő J{\'{a}}nos and Coleşa, Adrian},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-030-12085-6-10},
isbn = {9783030120849},
issn = {16113349},
keywords = {Behavioral analysis,Windows API,k-means},
pages = {110--121},
publisher = {Springer Verlag},
title = {{Malware Clustering Based on Called API During Runtime}},
volume = {11398 LNCS},
year = {2019}
}
@inproceedings{Thwe2019,
author = {Thwe, Yoon Myet and Ogawa, Mizuhito and Dung, Pham Ngoc},
booktitle = {2019 International Conference on Advanced Information Technologies (ICAIT)},
doi = {10.1109/AITC.2019.8921088},
isbn = {978-1-7281-5173-1},
month = {nov},
pages = {238--243},
publisher = {IEEE},
title = {{Applying Clustering Techniques for Refining Large Data Set: Case Study on Malware}},
url = {https://ieeexplore.ieee.org/document/8921088/},
year = {2019}
}
@incollection{Esposito2013,
abstract = {As the applications and adoption of networked electronic devices grow, their use in conjunction with crimes also increases. Extracting probative evidence from these devices requires experienced digital forensic practi- tioners to use specialized tools that help interpret the raw binary data present in digital media. After the evidentiary artifacts are collected, an important goal of the practitioner is to assemble a narrative that de- scribes when the events of interest occurred based on the timestamps of the artifacts. Unfortunately, generating and evaluating super timelines is a manual and labor-intensive process. This paper describes a tech- nique that aids the practitioner in this process by generating queries that extract and connect the temporal artifacts, and produce concise timelines. Application of the queries to a simulated incident demon- strates their ability to reduce the number of artifacts from hundreds of thousands artifacts to a few hundred or less, and to facilitate the understanding of the activities surrounding the incident.},
author = {Esposito, Stephen and Peterson, Gilbert},
doi = {10.1007/978-3-642-41148-9-9},
keywords = {Windows forensics,artifacts,events,super timelines},
pages = {135--144},
title = {{Creating Super Timelines in Windows Investigations}},
url = {http://link.springer.com/10.1007/978-3-642-41148-9{\_}9},
year = {2013}
}
@techreport{Minnaard2014,
author = {Minnaard, Wicher},
title = {{Timestomping NTFS}},
file = {:C$\backslash$:/Users/martinll/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - 2014 - Timestomping NTFS MSc final research project report.pdf:pdf},
institution = {University of Amsterdam, MSc final research project},
year = {2014}
}
@article{Friedberg2015,
abstract = {An advanced persistent threat (also known as APT) is a deliberately slow-moving cyberattack that is applied to quietly compromise interconnected information systems without revealing itself. APTs often use a variety of attack methods to get unauthorized system access initially and then gradually spread throughout the network. In contrast to traditional attacks, they are not used to interrupt services but primarily to steal intellectual property, sensitive internal business and legal documents and other data. If an attack on a system is successful, timely detection is of paramount importance to mitigate its impact and prohibit APTs from further spreading. However, recent security incidents, such as Operation Shady Rat, Operation Red October or the discovery of MiniDuke – just to name a few – have impressively demonstrated that current security mechanisms are mostly insufficient to prohibit targeted and customized attacks. This paper therefore proposes a novel anomaly detection approach which is a promising basis for modern intrusion detection systems. In contrast to other common approaches, which apply a kind of black-list approach and consider only actions and behaviour that match to well-known attack patterns and signatures of malware traces, our system works with a white-list approach. Our anomaly detection technique keeps track of system events, their dependencies and occurrences, and thus learns the normal system behaviour over time and reports all actions that differ from the created system model. In this work, we describe this system in theory and show evaluation results from a pilot study under real-world conditions.},
author = {Friedberg, Ivo and Skopik, Florian and Settanni, Giuseppe and Fiedler, Roman},
doi = {10.1016/J.COSE.2014.09.006},
issn = {0167-4048},
journal = {Computers {\&} Security},
month = {feb},
pages = {35--57},
publisher = {Elsevier Advanced Technology},
title = {{Combating advanced persistent threats: From network event correlation to incident detection}},
url = {https://www.sciencedirect.com/science/article/pii/S0167404814001461},
volume = {48},
year = {2015}
}
@article{Burnap2018,
abstract = {In this article we use machine activity metrics to automatically distinguish between malicious and trusted portable executable software samples. The motivation stems from the growth of cyber attacks using techniques that have been employed to surreptitiously deploy Advanced Persistent Threats (APTs). APTs are becoming more sophisticated and able to obfuscate much of their identifiable features through encryption, custom code bases and in-memory execution. Our hypothesis is that we can produce a high degree of accuracy in distinguishing malicious from trusted samples using Machine Learning with features derived from the inescapable footprint left behind on a computer system during execution. This includes CPU, RAM, Swap use and network traffic at a count level of bytes and packets. These features are continuous and allow us to be more flexible with the classification of samples than discrete features such as API calls (which can also be obfuscated) that form the main feature of the extant literature. We use these continuous data and develop a novel classification method using Self Organizing Feature Maps to reduce over fitting during training through the ability to create unsupervised clusters of similar “behaviour” that are subsequently used as features for classification, rather than using the raw data. We compare our method to a set of machine classification methods that have been applied in previous research and demonstrate an increase of between 7.24{\%} and 25.68{\%} in classification accuracy using our method and an unseen dataset over the range of other machine classification methods that have been applied in previous research.},
author = {Burnap, Pete and French, Richard and Turner, Frederick and Jones, Kevin},
doi = {10.1016/J.COSE.2017.11.016},
file = {:C$\backslash$:/Users/martinll/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Burnap et al. - 2018 - Malware classification using self organising feature maps and machine activity data.pdf:pdf},
issn = {0167-4048},
journal = {Computers {\&} Security},
month = {mar},
pages = {399--410},
publisher = {Elsevier Advanced Technology},
title = {{Malware classification using self organising feature maps and machine activity data}},
url = {https://www.sciencedirect.com/science/article/pii/S0167404817302535},
volume = {73},
year = {2018}
}
@inproceedings{Wang2009,
	author = {Wang, Cheng and Pang, Jianmin and Zhao, Rongcai and Fu, Wen and Liu, Xiaoxian},
	booktitle = {2009 First International Workshop on Education Technology and Computer Science},
	doi = {10.1109/ETCS.2009.306},
	isbn = {978-0-7695-3557-9},
	pages = {198--202},
	publisher = {IEEE},
	title = {{Malware Detection Based on Suspicious Behavior Identification}},
	url = {http://ieeexplore.ieee.org/document/4959020/},
	year = {2009}
}
@inproceedings{Alazab2010,
	author = {Alazab, Mamoun and Venkataraman, Sitalakshmi and Watters, Paul},
	booktitle = {2010 Second Cybercrime and Trustworthy Computing Workshop},
	doi = {10.1109/CTC.2010.8},
	isbn = {978-1-4244-8054-8},
	month = {jul},
	pages = {52--59},
	publisher = {IEEE},
	title = {{Towards Understanding Malware Behaviour by the Extraction of API Calls}},
	url = {http://ieeexplore.ieee.org/document/5615097/},
	year = {2010}
}
@inproceedings{Moser2007,
	author = {Moser, Andreas and Kruegel, Christopher and Kirda, Engin},
	booktitle = {Twenty-Third Annual Computer Security Applications Conference (ACSAC 2007)},
	doi = {10.1109/ACSAC.2007.21},
	isbn = {0-7695-3060-5},
	month = {dec},
	pages = {421--430},
	publisher = {IEEE},
	title = {{Limits of Static Analysis for Malware Detection}},
	url = {http://ieeexplore.ieee.org/document/4413008/},
	year = {2007}
}
@inproceedings{Namanya,
	abstract = {The rate at which malware samples are released is much higher than the rate at which malware analysts can fully investigate. CNN reported that nearly one million malware threats are released daily. It is however known that most of the new samples discovered are repackaged or simply variants of already known malware. With a list of known fingerprints of malware, detection of the variants would reduce the number of unknown malware, increase detection rates thus reducing the impact of cybercrime. Whilst detecting malware may require both static and dynamic analysis, efficient static analysis remains safer and a key first step. In order to understand what characteristics are required to detect malicious files, we analysed 2269 samples of malware using three of the most popular open source malware static analysis tools: PEFrame, Pyew and mastiff. Whilst the comparison of the tools will inform us what tool is best depending on the given scenario, the file feature extraction will allow us to obtain fingerprints against which files can be tested to determine whether they are malicious or not. This paper presents our findings of the work described above},
	author = {Namanya, Anitta Patience and Pagna-Disso, Jules and Awan, Irfan},
	booktitle = {31st UK Performance Engineering Workshop},
	pages = {81--95},
	title = {{Evaluation of automated static analysis tools for malware detection in Portable Executable files}},
	year = {2015}
}
@incollection{Mukesh2018,
	author = {Mukesh, Sharma Divya and Raval, Jigar A. and Upadhyay, Hardik},
	doi = {10.1007/978-3-319-63673-3-21},
	pages = {173--182},
	title = {{Real-Time Framework for Malware Detection Using Machine Learning Technique}},
	url = {http://link.springer.com/10.1007/978-3-319-63673-3{\_}21},
	year = {2018}
}
@article{QIAN,
	abstract = {With the problem of the explosive growth of malicious code and many of the malicious samples are variations of previously encountered samples, this paper presents a novel approach to investigate the homology of malicious code based on behavior characteristics. To distinguish the variations of malicious code, it studies the malicious behavior of malwares, then computes the similarity of characteristics and the call graphs which are extracted by disassembly tools. It employs the clustering algorithms of DBSCAN to discover the family of malicious code. Experiments show that it effectively investigates the homology of malicious code and cluster variations into different malicious code family.},
	author = {{Qian Yucun, Peng Guojun}, Wang Ying},
	journal = {Computer Engineering {\&} Applications},
	keywords = {malicious code   homology   static analysis   func},
	pages = {76--81},
	title = {{Homology analysis of malicious code and family clustering}},
	volume = {51(18)},
	year = {2015}
}
@phdthesis{UlrichBayer2009,
	author = {Bayer, Ulrich},
	title = {{Large-Scale Dynamic Malware Analysis}},
	school = {TU Wien},
	url = {https://old.iseclab.org/people/ulli/dissertation{\_}ubayer.pdf},
	year = {2009}
}
@article{Trunk1979,
	abstract = {In pattern recognition problems it has been noted that beyond a certain point the inclusion of additional parameters (that have been estimated) leads to higher probabilities of error. A simple problem has been formulated where the probability of error approaches zero as the dimensionality increases and all the parameters are known; on the other hand, the probability of error approaches one-half as the dimensionality increases and parameters are estimated. Copyright {\textcopyright} 1979 by The Institute of Electrical and Electronics Engineers, Inc.},
	author = {Trunk, G. V.},
	doi = {10.1109/TPAMI.1979.4766926},
	issn = {01628828},
	journal = {IEEE Transactions on Pattern Analysis and Machine Intelligence},
	keywords = {Dimensionality},
	number = {3},
	pages = {306--307},
	title = {{A Problem of Dimensionality: A Simple Example}},
	volume = {PAMI-1},
	year = {1979}
}
@incollection{Yan2013,
	author = {Yan, Guanhua and Brown, Nathan and Kong, Deguang},
	doi = {10.1007/978-3-642-39235-1-3},
	pages = {41--61},
	publisher = {Springer, Berlin, Heidelberg},
	title = {{Exploring Discriminatory Features for Automated Malware Classification}},
	year = {2013}
}
@article{Liu2017,
	abstract = {The Internet has become an indispensable part of people's work and life, but it also provides favorable communication conditions for malwares. Therefore, malwares are endless and spread faster and become one of the main threats of current network security. Based on the malware analysis process, from the original feature extraction and feature selection to malware analysis, this paper introduces the machine learning algorithms such as classification, clustering and association analysis, and how to use these machine learning algorithms to effectively analyze the malware and its variants.},
	author = {Liu, Zhenyan and Zeng, Yifei and Yan, Yida and Zhang, Pengfei and Wang, Yong},
	doi = {10.13052/jcsm2245-1439.631},
	issn = {22454578},
	journal = {Journal of Cyber Security and Mobility},
	keywords = {Association analysis,Classification,Clustering,Machine learning,Malware analysis},
	number = {3},
	pages = {227--244},
	title = {{Machine learning for analyzing malware}},
	volume = {6},
	year = {2017}
}
@book{Bishop2006,
	abstract = {Pattern recognition has its origins in engineering, whereas machine learning grew out of computer science. However, these activities can be viewed as two facets of the same field, and together they have undergone substantial development over the past ten years. In particular, Bayesian methods have grown from a specialist niche to become mainstream, while graphical models have emerged as a general framework for describing and applying probabilistic models. Also, the practical applicability of Bayesian methods has been greatly enhanced through the development of a range of approximate inference algorithms such as variational Bayes and expectation propa- gation. Similarly, new models based on kernels have had significant impact on both algorithms and applications. This new textbook reflects these recent developments while providing a compre- hensive introduction to the fields of pattern recognition and machine learning. It is aimed at advanced undergraduates or first year PhD students, as well as researchers and practitioners, and assumes no previous knowledge of pattern recognition or ma- chine learning concepts. Knowledge of multivariate calculus and basic linear algebra is required, and some familiarity with probabilities would be helpful though not es- sential as the book includes a self-contained introduction to basic probability theory. Because this book has broad scope, it is impossible to provide a complete list of references, and in particular no attempt has been made to provide accurate historical attribution of ideas. Instead, the aim has been to give references that offer greater detail than is possible here and that hopefully provide entry points into what, in some cases, is a very extensive literature. For this reason, the references are often to more recent textbooks and review articles rather than to original sources.},
	author = {Bishop, Christopher M.},
	booktitle = {Information Science and Statistics},
	isbn = {978-0-387-31073-2},
	pages = {738},
	publisher = {Springer-Verlag New York},
	title = {{Pattern Recognition and Machine Learning}},
	url = {https://www.springer.com/gp/book/9780387310732},
	year = {2006}
}
@techreport{Yonts2011,
	author = {Yonts, Joel},
	institution = {SANS},
	pages = {25},
	title = {{Attributes of Malicious Files}},
	year = {2011}
}

@article{Arlot2010,
	abstract = {Used to estimate the risk of an estimator or to perform model selection, cross-validation is a widespread strategy because of its simplic-ity and its (apparent) universality. Many results exist on model selection performances of cross-validation procedures. This survey intends to relate these results to the most recent advances of model selection theory, with a particular emphasis on distinguishing empirical statements from rigorous theoretical results. As a conclusion, guidelines are provided for choosing the best cross-validation procedure according to the particular features of the problem in hand.},
	archivePrefix = {arXiv},
	arxivId = {0907.4728},
	author = {Arlot, Sylvain and Celisse, Alain},
	doi = {10.1214/09-SS054},
	eprint = {0907.4728},
	file = {:C$\backslash$:/Users/martinll/Downloads/2010{\_}Arlot{\_}Celisse{\_}SS.pdf:pdf},
	issn = {19357516},
	journal = {Statistics Surveys},
	keywords = {Cross-validation,Leave-one-out,Model selection},
	pages = {40--79},
	title = {{A survey of cross-validation procedures for model selection}},
	volume = {4},
	year = {2010}
}
@article{Mulder2011,
	abstract = {Efficient and accurate malware detection is increasingly becoming a necessity for society to operate. Existing malware detection systems have excellent performance in identifying known malware for which signatures are available, but poor performance in anomaly detection for zero day exploits for which signatures have not yet been made available or targeted attacks against a specific entity. The primary goal of this paper is to provide evidence for the potential of learning classifier systems to improve the accuracy of malware detection. This paper presents a proof of concept for adaptive rule-based malware detection employing learning classifier systems, which combine a rule-based expert system with evolutionary algorithm based reinforcement learning, thus creating a self-training adaptive malware detection system which dynamically evolves detection rules. Experimental results are presented which demonstrate the system’s ability to learn effective rules from repeated presentations of a tagged training set and show the degree of generalization achieved on an independent test set.},
	author = {Mulder, Samuel , Blunt, Jonathan and Tauritz, Daniel},
	doi = {10.1109/COMPSACW.2011.28},
	journal = {Computer Software and Applications Conference Workshops (COMPSACW), 2011 IEEE 35th Annual},
	keywords = {Learning Classifier Systems; Malware Detection},
	title = {{Adaptive Rule-Based Malware Detection Employing Learning Classifier Systems: A Proof of Concept.}},
	year = {2011}
}