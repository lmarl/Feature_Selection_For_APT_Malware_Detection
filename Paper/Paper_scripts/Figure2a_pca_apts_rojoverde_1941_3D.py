###################################################
#
#    This script generates a plot with the projection using PCA 
#    of the 3 principal components of the dataset. This is the base 
#    of the figure 2a 
#
#    Author: Luis Martin Liras
#
###################################################




###############
# IMPORTS
###############

import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.externals import joblib
from sklearn import decomposition
import sys
from sklearn import preprocessing

###############
# CONFIGURATION
###############
input_file= "../datasets/reducido_a_1941_features_without_NaNs_y_19457_rows.csv"

data_dir="../tmp"
data_filename = data_dir + '/pca_3D_1941.npy'
tmp_file="../tmp/dataset_1941.joblib.pkl"
output_file='resultados/DoubleFigPCAByAPTandMalware_1941.png'

def draw_vector(v0, v1, ax=None):
    ax = ax or plt.gca()
    arrowprops=dict(arrowstyle='->', linewidth=2, shrinkA=0, shrinkB=0)
    ax.annotate('', v1, v0, arrowprops=arrowprops)

##########
#ARGUMENTS#
##########
def syntax_error():
        print "SYNTAX ERROR: Introduce one argument with any of the following values:"
        print " 1 Recalculate PCA"
        print " 2 Obtain the PCA from the last operation"
	print
	print "Current input/output values are:"
	print "		Input File:"+input_file
	print "		TMP File:"+tmp_file
	print "		PCA File:"+data_filename
	print "		Output File:"+output_file
	print
	print


argumentos=sys.argv
if len(argumentos)!=2:
        syntax_error()
        sys.exit()
else:
        if (argumentos[1]!='1' and argumentos[1]!='2'):
                syntax_error()
                sys.exit()

##################################
# PRELIMINAR TASKS
##################################

###Read dataset
df = pd.read_csv(input_file, header = 0, sep=';')
isapt=df.APT
numapt=df.NUM_APT
values2=isapt.values.astype(np.int64)
values3=numapt.values.astype(np.int64)
del df['APT']
del df['NUM_APT']

import datetime
def convert_to_year(date_in_some_format):
        datetime_object = datetime.datetime.strptime(date_in_some_format, '%d/%m/%Y %H:%M')
        totalmins=(datetime_object-datetime.datetime(1970,1,1)).total_seconds()/60
        return int(totalmins)

def convert_malware_type_to_new_fields(row,valor):
   if int(row['MALWARE_TYPE']) == int(valor) :
      return 1;
   else:
      return 0;

print df.shape


print df.shape
###AQUI HAY 1942#####

import datetime
def convert_to_year(date_in_some_format):
        datetime_object = datetime.datetime.strptime(date_in_some_format, '%d/%m/%Y %H:%M')
        totalmins=(datetime_object-datetime.datetime(1970,1,1)).total_seconds()/60
        return int(totalmins)


##################################
# Standarization
##################################
X=df
X = preprocessing.scale(X)
joblib.dump(X,tmp_file)

##################################
# PCA
##################################
if argumentos[1]=='1':
	pca = decomposition.PCA(n_components=3)
	Y = pca.fit_transform(X)

	print ("Lost variance is:")
	print pca.explained_variance_ 

	print ("RATIO IS:")
	print pca.explained_variance_ratio_

	np.save(data_filename, Y)

if argumentos[1]=='2':
	Y = np.load(data_filename)


##################################
# PLOTTING
##################################
###Create a figure with two parts
fig = plt.figure(figsize=(15,15))
ax = fig.add_subplot(111, projection='3d')


colors=['red', 'green']
target_names=['Malware','APT']
target=[0, 1]
lista=[0,1]

for color, i, target_name, pos in zip(colors, target, target_names, lista):
                indices=[]
                paraimprimir=[]


                for index in range(0,Y.size/3):
                        if values2[index]==i:
                                indices=np.append(indices,index)

                indices2=indices.astype(np.int64)
                paraimprimir=Y[indices2]
		if pos!=1:
                    ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], cmap=plt.cm.Spectral, s=1, c=color, label=target_names[pos])


for color, i, target_name, pos in zip(colors, target, target_names, lista):
                indices=[]
                paraimprimir=[]


                for index in range(0,Y.size/3):
                        if values2[index]==i:
                                indices=np.append(indices,index)

                indices2=indices.astype(np.int64)
                paraimprimir=Y[indices2]
		if pos==1:
                    ax.scatter(paraimprimir[:, 0], paraimprimir[:, 1], paraimprimir[:, 2], cmap=plt.cm.Spectral, s=9, c=color, label=target_names[pos])



##################################
# SHOW PLOT
##################################

plt.axis('equal');
plt.title("PCA")
plt.legend(bbox_to_anchor=(0.95,0.98))
ax.xaxis.set_major_formatter(NullFormatter())
ax.yaxis.set_major_formatter(NullFormatter())
plt.axis('tight')
fig.savefig(output_file)
plt.show()
