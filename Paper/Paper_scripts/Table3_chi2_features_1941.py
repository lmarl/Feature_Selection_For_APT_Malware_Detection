##########################################
#
#  This script computes chi-squared stats between each non-negative feature and class.
#  The score is used to select the 400 top features, however later only the top 20 are returned
#
#
##########################################



##################################
# IMPORTS
##################################
import numpy as np
from numpy import *
import pandas as pd
from time import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import NullFormatter
from sklearn import manifold
from sklearn.manifold import TSNE
from sklearn.feature_selection import VarianceThreshold
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn import datasets
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.externals import joblib 
from sklearn import tree
import sys
import numpy
from sklearn.externals.six import StringIO
import pydot
import graphviz
from sklearn.feature_selection import SelectPercentile

##################################
# CONFIGURATION
##################################

###Leemos el dataset
input_file="../datasets/reducido_a_1941_features_without_NaNs_y_19457_rows.csv"
output_file="resultados/codo_chi2.png"
dump_file="../tmp/ultimo_dataset_imputado.joblib.pkl"
num_bars=200
numpy.set_printoptions(threshold=numpy.nan)

###########
#ARGUMENTS#
###########
def syntax_error():
        print "SYNTAX ERROR: Introduce un argumentos con los siguientes valores"
        print " 1 Grafico de barras"
        print " 2 Grafico de lineas"
        print " 3 Show matrix results"
        print
        print "Current input/output values are:"
        print "         Input File:"+input_file
        print "         Dump File:"+dump_file
        print "         Output File:"+output_file
        print "         Num values:"+str(num_bars)
        print
        print

argumentos=sys.argv
if len(argumentos)!=2:
    syntax_error()
    exit()

##################################
# PRELIMINAR TASKS
##################################

##Read the dataset
df = pd.read_csv(input_file, header = 0, sep=';')

##Extract target fields
isapt=df.APT
numapt=df.NUM_APT
values2=isapt.values.astype(np.int64)
values3=numapt.values.astype(np.int64)
del df['ID']
del df['APT']
del df['NUM_APT']

##################################
# CHI2
##################################
print(" ")
print("====================================================")
print("====Univariate Feature Selection (Chi2, k=10)=======")
print("====================================================")

#chi_results=SelectKBest(chi2,'all').fit(imputado,values2)
#chi_results=SelectPercentile(chi2,percentile=10).fit(imputado,values2)
chi_results=SelectKBest(chi2,400).fit(df,values2)

headers=list(df)
headersArray=array(array(headers))

scores=np.column_stack((headersArray,chi_results.scores_))
sorted_scores = scores[(-scores[:,1].astype(np.float)).argsort()]


lista = pd.DataFrame({'header': headersArray, 'chi': chi_results.scores_})
lista.sort_values(by=['chi'], inplace=True, ascending=False)

sorted_chis=lista['chi']
sorted_headers=lista['header']

short_sorted_chis=sorted_chis[0:num_bars]
short_sorted_headers=sorted_headers[0:num_bars]

plt.locator_params(axis='y', nbins=16)

if (argumentos[1]=="3"):
    print (sorted_scores[:20])
    exit()
############################
# Plot Figure
############################
plt.figure()
plt.title("Chi2 Feature scores")

if (argumentos[1]=="1"):
    #BAR Plot
    ###plt.bar(range(X.shape[1]), importances[indices], color="r", yerr=std[indices], align="center")
    plt.bar(range(len(short_sorted_chis)), short_sorted_chis, color="b", align="center")
    plt.xticks(range(len(short_sorted_chis)), short_sorted_headers, rotation=80)

    ax = plt.gca()
    ax.tick_params(axis = 'x', which = 'major', labelsize = 6, width=1)
    ax.tick_params(axis = 'x', which = 'minor', labelsize = 6, width=1)

    iii=0
    for tick in ax.xaxis.get_major_ticks():
        if iii%2==0:
            tick.label.set_color('red')
        if iii%2==1:
            tick.label.set_color('black')
        iii+=1

    plt.xlim([0, len(short_sorted_chis)])
    output_file="resultados/codo_chi2_bars_1941.png"

if (argumentos[1]=="2"):
    #LINE PLot
    plt.title("Chi2 Feature importances")
    plt.plot(range(len(short_sorted_chis)), short_sorted_chis, color="b")
    output_file="resultados/codo_chi2_line_1941.png"

plt.savefig(output_file)
plt.show()
